<?xml version="1.0"?>
<doc>
    <assembly>
        <name>L</name>
    </assembly>
    <members>
        <member name="T:LCore.Extensions.L">
            <summary>
            L provides a shorthand to common functions and method manipulation functions.
            </summary>
        </member>
        <member name="F:LCore.Extensions.L.Empty">
            <summary>
            Empty method. Takes no parameters and performs no actions.
            </summary>
        </member>
        <member name="F:LCore.Extensions.L.E">
            <summary>
            Empty method. Takes no parameters and performs no actions.
            Alias of L.Empty
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.A">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.A``1">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.A``2">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.A``3">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.A``4">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.A``5">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.A``6">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.A``7">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.A``8">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.A``9">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.A``10">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.A``11">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.A``12">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.A``13">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.A``14">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.A``15">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.A``16">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.F``1">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.F``2">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.F``3">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.F``4">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.F``5">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.F``6">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.F``7">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.F``8">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.F``9">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.F``10">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.F``11">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.F``12">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.F``13">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.F``14">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.F``15">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.F``16">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.F``17">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.A(System.Action)">
            <summary>
            Returns a method from a static or instance reference
            </summary>
            <param name="In"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.A``1(System.Action{``0})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
            <typeparam name="T1"></typeparam>
            <param name="In"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.A``2(System.Action{``0,``1})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="In"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.A``3(System.Action{``0,``1,``2})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <param name="In"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.A``4(System.Action{``0,``1,``2,``3})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <param name="In"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.A``5(System.Action{``0,``1,``2,``3,``4})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.A``6(System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.A``7(System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.A``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.A``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.A``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.A``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.A``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.A``13(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.A``14(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.A``15(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.A``16(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.F``1(System.Func{``0})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
            <typeparam name="U"></typeparam>
            <param name="In"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.F``2(System.Func{``0,``1})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="In"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.F``3(System.Func{``0,``1,``2})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="In"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.F``4(System.Func{``0,``1,``2,``3})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="In"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.F``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.F``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.F``7(System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.F``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.F``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.F``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.F``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.F``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.F``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.F``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.F``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.F``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.F``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
            <returns></returns>
        </member>
        <member name="T:LCore.Extensions.L.Ref">
            <summary>
            Contains static methods and lambdas pertaining to Reflection.
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Ref.Constant``1(System.String)">
            <summary>
            Retrieve a constantly declared MethodInfo using a string name.
            Ex. L.Ref.Constant`Class(nameof(Class.ConstantName));
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Ref.Constructor``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Retrieve a ConstructorInfo using a lambda statement.
            Ex. L.Ref.Constructor(() => new Class(""));
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Ref.FindType(System.String,System.Reflection.Assembly[])">
            <summary>
            Finds a type by name in all current assemblies.
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Ref.FindMembers(System.String,System.Reflection.Assembly[])">
            <summary>
            Returns members matching fully qualified name.
            Ex: "LCore.Extensions.L.Ref.FindMember"
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Ref.GetNamespaceTypes(System.String,System.Type[])">
            <summary>
            Returns all namespace types, optionally filtering using multiple <paramref name="AttributeTypes" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Ref.GetNamespaceTypes(System.Type,System.String,System.Type[])">
            <summary>
            Returns all namespace types, optionally filtering using multiple <paramref name="AttributeTypes" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Ref.GetNamespaceTypes(System.Reflection.Assembly,System.String,System.Type[])">
            <summary>
            Returns all namespace types, optionally filtering using multiple <paramref name="AttributeTypes" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Ref.Member``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Retrieve a MemberInfo using a lambda statement.
            Ex. L.Ref.Member`Class(t => t.Member);
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Ref.Method``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Retrieve a MethodInfo using a lambda statement.
            Ex. L.Ref.Method`Class(t => t.Method(""));
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Ref.StaticMethod(System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Retrieve a statically declared MethodInfo using a lambda statement.
            Ex. L.Ref.StaticMethod(() => Class.StaticMethod(""));
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Ref.Event``1(System.String)">
            <summary>
            Retrieve a EventInfo using a string name.
            Ex. L.Ref.Constant`Class(nameof(Class.EventName));
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Ref.GetAvailableTestAssemblies">
            <summary>
            Returns all test assemblies available in the current context.
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Ref.GetPropertyNames``1">
            <summary>
            Retrieves a list of all public properties and fields for a Type <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Ref.GetProjectRootPath">
            <summary>
            Returns the root path of the current process.
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Ref.GetSolutionRootPath">
            <summary>
            Returns the root path of the current solution.
            </summary>
        </member>
        <member name="T:LCore.Extensions.L.Num">
            <summary>
            Contains static methods and variables used for number extensions and wrappers.
            </summary>
        </member>
        <member name="F:LCore.Extensions.L.Num.RegexScientificNotation">
            <summary>
            Regular expression used to identify string numbers in Scientific Notation.
            </summary>
        </member>
        <member name="T:LCore.Extensions.L.Num.Operation">
            <summary>
            Type of numerical operation to perform.
            </summary>
        </member>
        <member name="F:LCore.Extensions.L.Num.Operation.Add">
            <summary>
            Add
            </summary>
        </member>
        <member name="F:LCore.Extensions.L.Num.Operation.Subtract">
            <summary>
            Subtract
            </summary>
        </member>
        <member name="F:LCore.Extensions.L.Num.Operation.Multiply">
            <summary>
            Multiply
            </summary>
        </member>
        <member name="F:LCore.Extensions.L.Num.Operation.Divide">
            <summary>
            Divide
            </summary>
        </member>
        <member name="P:LCore.Extensions.L.Num.MostPreciseType">
            <summary>
            The most precise type for storing numbers based on precision.
            </summary>
        </member>
        <member name="P:LCore.Extensions.L.Num.NumberTypes">
            <summary>
            All number-container types defined in this assembly.
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Num.ScientificNotationToNumber(System.String)">
            <summary>
            Converts a string <paramref name="In"/> in Scientific Notation format
            to a string representing the actual number.
            Ex: L.Num.ScientificNotationToNumber("5.0032e2"); // "500.32"
            </summary>
        </member>
        <member name="T:LCore.Extensions.L.Comment">
            <summary>
            Contains values and test members for CommentExt
            </summary>
            <feature>1</feature>
            <feature>a</feature>
            <classFeature>2</classFeature>
            <projectFeature>3</projectFeature>
            <testedFeature>4</testedFeature>
        </member>
        <member name="T:LCore.Extensions.L.Comment.Test">
            <summary>
            Contains test members for CommentExt
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Comment.Test.TestMethod``1(System.Int32,System.String)">
            <summary>
            Test class
            </summary>
            <remarks>Remark</remarks>
            <returns>Returns</returns>
            <param name="A">param1</param>
            <param name="B">param2</param>
            <example><code>some code</code></example>
            <example><c>more code</c></example>
            <exception cref="T:System.Exception">exception 1</exception>
            <exception cref="T:System.ArgumentException">exception 2</exception>
            <permission cref="T:System.Security.PermissionSet">permission 1</permission>
            <permission cref="T:System.Security.CodeAccessPermission">permission 2</permission>
            <typeparam name="T">Type</typeparam>
            <value>value</value>
            <feature>1</feature>
            <feature>a</feature>
            <classFeature>2</classFeature>
            <projectFeature>3</projectFeature>
            <testedFeature>4</testedFeature>
        </member>
        <member name="M:LCore.Extensions.L.Comment.Test.TestMethod2``1(System.Int32,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="filepath" path="[@name=&quot;filename&quot;]" />
        </member>
        <member name="P:LCore.Extensions.L.Comment.Test.TestProperty">
            <summary>
            TestProperty 
            </summary>
            <feature>1</feature>
            <feature>a</feature>
            <classFeature>2</classFeature>
            <projectFeature>3</projectFeature>
            <testedFeature>4</testedFeature>
        </member>
        <member name="F:LCore.Extensions.L.Comment.Test.TestField">
            <summary>
            TestField
            </summary>
            <feature>1</feature>
            <feature>a</feature>
            <classFeature>2</classFeature>
            <projectFeature>3</projectFeature>
            <testedFeature>4</testedFeature>
        </member>
        <member name="T:LCore.Extensions.L.Loop">
            <summary>
            Contains static methods and lambdas pertaining to loops and iteration.
            </summary>
        </member>
        <member name="F:LCore.Extensions.L.Loop.AlwaysLoop">
            <summary>
            This is a simple function that takes an int and returns true, causing loops to continue until completion. Merge this with any function to turn it into a Loop, or use the Loop function.
            </summary>
        </member>
        <member name="F:LCore.Extensions.L.Loop.While">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Loop.While_T``1">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Loop.While_T``2">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Loop.While_T``3">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Loop.While_T``4">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Loop.L_DoWhile">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Loop.L_Until``1">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Loop.L_DoUntil``1">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Loop.L_Repeat_uint">
            <summary>
            Returns an action that is repeated a number of times.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Loop.L_Repeat_int">
            <summary>
            Returns an action that is repeated a number of times.
            </summary>
        </member>
        <member name="F:LCore.Extensions.L.Loop.WhileI">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Loop.WhileI_T``1">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
            <typeparam name="T1"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Loop.WhileI_T``2">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Loop.WhileI_T``3">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Loop.Until``1">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Loop.Until``2">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Loop.Until``3">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Loop.Until``4">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Loop.DoWhile">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Loop.DoWhile``1">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
            <typeparam name="T1"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Loop.DoWhile``2">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Loop.DoWhile``3">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Loop.DoUntil``1">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Loop.DoUntil``2">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Loop.DoUntil``3">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Loop.DoUntil``4">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Loop.L_Collect``1">
            <summary>
            Returns a Func that collects the result of In into a List`<typeparamref name="U" />. 
            The Func will be run <paramref><name>Count</name></paramref> times and there will be that many items 
            in the resulting List`<typeparamref name="U" />.
            </summary>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Loop.L_Collect``2">
            <summary>
            Returns a Func that collects the result of In into a List`<typeparamref name="U" />. 
            The Func will be run <paramref><name>Count</name></paramref> times and there will be that many items 
            in the resulting List`<typeparamref name="U" />.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Loop.L_Collect``3">
            <summary>
            Returns a Func that collects the result of In into a List`<typeparamref name="U" />. 
            The Func will be run <paramref><name>Count</name></paramref> times and there will be that many items 
            in the resulting List`<typeparamref name="U" />.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Loop.L_Collect``4">
            <summary>
            Returns a Func that collects the result of In into a List`<typeparamref name="U" />. 
            The Func will be run <paramref><name>Count</name></paramref> times and there will be that many items 
            in the resulting List`<typeparamref name="U" />.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Loop.L_Collect``5">
            <summary>
            Returns a Func that collects the result of In into a List`<typeparamref name="U" />. 
            The Func will be run <paramref><name>Count</name></paramref> times and there will be that many items 
            in the resulting List`<typeparamref name="U" />.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Loop.L_MergeLoop">
            <summary>
            Loop takes an action and returns a loop function, that takes an index and returns true to continue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Loop.L_MergeLoop``1">
            <summary>
            /Loop takes an action and returns a loop function, that takes an index and returns true to continue.
            </summary>
            <typeparam name="T1"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Loop.L_MergeLoop``2">
            <summary>
            Loop takes an action and returns a loop function, that takes an index and returns true to continue.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Loop.L_MergeLoop``3">
            <summary>
            Loop takes an action and returns a loop function, that takes an index and returns true to continue.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Loop.L_To">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Loop.L_ToI">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Loop.L_For">
            <summary>
            Loops an Action that takes an index and returns false to break out of the loop. a and b can be any integers.
            </summary>
        </member>
        <member name="T:LCore.Extensions.L.Thread">
            <summary>
            Contains static methods and lambdas pertaining to timing and threading.
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Thread.MethodProfileData_Get(System.String)">
            <summary>
            Access profile data from methods passed through Profile.
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Thread.MethodProfileData_Remove(System.String)">
            <summary>
            Removes a method's profile data from the profile data dictionary.
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Thread.MethodProfileData_Add(System.String,LCore.Tools.MethodProfileData)">
            <summary>
            Adds a method's profile data to the profile data dictionary.
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Thread.MethodProfileData_Has(System.String)">
            <summary>
            Determines if a method has any profile data tracked.
            </summary>
        </member>
        <member name="T:LCore.Extensions.L.Exc">
            <summary>
            Contains System.Exception static methods and lambdas.
            </summary>
        </member>
        <member name="F:LCore.Extensions.L.Exc.DefaultExceptionHandler">
            <summary>
            The default exception handler used with Method.Handle().
            This should be set to your own exception handler action.
            </summary>
        </member>
        <member name="F:LCore.Extensions.L.Exc.Fail">
            <summary>
            An action that throws an empty exception.
            </summary>
        </member>
        <member name="F:LCore.Extensions.L.Exc.Throw">
            <summary>
            An action that throws an exception with a message.
            </summary>
        </member>
        <member name="F:LCore.Extensions.L.Exc.Report">
            <summary>
            Rethrows an exception, adding a message.
            </summary>
        </member>
        <member name="F:LCore.Extensions.L.Exc.ReportEmpty">
            <summary>
            Rethrows an exception and adds no message.
            </summary>
        </member>
        <member name="T:LCore.Extensions.L.Obj">
            <summary>
            Contains System.Object static methods and lambdas.
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Obj.As``1">
            <summary>
            Returns a function that performs the 'as' operation.
            </summary>
        </member>
        <member name="F:LCore.Extensions.L.Obj.Str">
            <summary>
            Returns a function that converts an Object to a String. Shortcut for Logic.Object_ToString
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Obj.Swap``1(``0@,``0@)">
            <summary>
            Swaps two objects by reference
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Obj.SafeEquals(System.Object,System.Object)">
            <summary>
            Returns a function that safely compares an object with another, returning whether they are equal.
            </summary>
        </member>
        <member name="F:LCore.Extensions.L.Obj.Objects_ToString">
            <summary>
            Returns a string representation of a set of objects.
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Obj.New``1(System.Object[])">
            <summary>
            Retrieves a new <typeparamref name="T" />, passing <paramref name="Parameters" /> to the constructor.
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Obj.NewRandom``1(System.Nullable{``0},System.Nullable{``0})">
            <summary>
            Creates a new random <typeparamref name="T"/> for many simple types.
            </summary>
        </member>
        <member name="F:LCore.Extensions.L.Obj.NewRandom_TypeCreators">
            <summary>
            Type creators for random data.
            
            The value function is a Function which takes the Type, 
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Obj.NewRandom(System.Type,System.Object,System.Object)">
            <summary>
            Creates a new random object of type <paramref name="Type"/> for many simple types.
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Obj.IsNull``1">
            <summary>
            Retrieves a func that determines if a certain type of object is null.
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Obj.IsA``1">
            <summary>
            Retrieves a func that determines if an object matches type <typeparamref name="T" />.
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Obj.Method``1(System.String,System.Object[])">
            <summary>
            Retrieves a func that retrieves a method executor on type <typeparamref name="U" /> using the supplied parameters
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Obj.HasProperty">
            <summary>
            Determine if an object has a property by name.
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Obj.GetProperty">
            <summary>
            Get a property or field value from an object.
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Obj.SetProperty">
            <summary>
            Set a property value on an object.
            </summary>
        </member>
        <member name="F:LCore.Extensions.L.Obj.Is">
            <summary>
            Returns a function that safely Compares an object with another, returning whether they are equal. Shortcut for Logic.Object_SafeEquals
            </summary>
        </member>
        <member name="T:LCore.Extensions.L.Bool">
            <summary>
            Contains System.Boolean static methods and lambdas.
            </summary>
        </member>
        <member name="F:LCore.Extensions.L.Bool.True">
            <summary>
            Returns a function that returns true
            </summary>
        </member>
        <member name="F:LCore.Extensions.L.Bool.False">
            <summary>
            Returns a function that returns false
            </summary>
        </member>
        <member name="F:LCore.Extensions.L.Bool.Not">
            <summary>
            Returns a function that inverts the boolean it is sent.
            </summary>
        </member>
        <member name="F:LCore.Extensions.L.Bool.And">
            <summary>
            Returns a function that ANDs the booleans that are sent
            </summary>
        </member>
        <member name="F:LCore.Extensions.L.Bool.Or">
            <summary>
            Returns a function that ORs the booleans that are sent
            </summary>
        </member>
        <member name="F:LCore.Extensions.L.Bool.Xor">
            <summary>
            Returns a function that XORs the booleans that are sent
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Bool.L_If_A">
            <summary>
            Logical If Statement. If the condition passed is true, the action passed is executed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Bool.L_If_A``1">
            <summary>
            Logical If Statement. If the condition passed is true, the action passed is executed.
            </summary>
            <typeparam name="T1"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Bool.L_If_A``2">
            <summary>
            Logical If Statement. If the condition passed is true, the action passed is executed.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Bool.L_If_A``3">
            <summary>
            Logical If Statement. If the condition passed is true, the action passed is executed.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Bool.L_If_A``4">
            <summary>
            Logical If Statement. If the condition passed is true, the action passed is executed.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Bool.L_If_F``1">
            <summary>
            Logical If Statement for a Func. If the condition passed is true, the action passed is executed and its result returned. Otherwise, the result will be the default value for U.
            </summary>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Bool.L_If_F``2">
            <summary>
            Logical If Statement for a Func. If the condition passed is true, the action passed is executed and its result returned. Otherwise, the result will be the default value for U.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Bool.L_If_F``3">
            <summary>
            Logical If Statement for a Func. If the condition passed is true, the action passed is executed and its result returned. Otherwise, the result will be the default value for U.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Bool.L_If_F``4">
            <summary>
            Logical If Statement for a Func. If the condition passed is true, the action passed is executed and its result returned. Otherwise, the result will be the default value for U.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Bool.L_If_F``5">
            <summary>
            Logical If Statement for a Func. If the condition passed is true, the action passed is executed and its result returned. Otherwise, the result will be the default value for U.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Bool.L_IfElse">
            <summary>
            Logical If Else Statement. If the condition passed is true, the first action passed is executed. Otherwise, the second action is executed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Bool.L_IfElse``1">
            <summary>
            Logical If Else Statement. If the condition passed is true, the first action passed is executed. Otherwise, the second action is executed.
            </summary>
            <typeparam name="T1"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Bool.L_IfElse``2">
            <summary>
            Logical If Else Statement. If the condition passed is true, the first action passed is executed. Otherwise, the second action is executed.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Bool.L_IfElse``3">
            <summary>
            Logical If Else Statement. If the condition passed is true, the first action passed is executed. Otherwise, the second action is executed.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Bool.L_IfElse``4">
            <summary>
            Logical If Else Statement. If the condition passed is true, the first action passed is executed. Otherwise, the second action is executed.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <returns></returns>
        </member>
        <member name="T:LCore.Extensions.L.Date">
            <summary>
            Contains System.DateTime and System.TimeSpan static methods and lambdas.
            </summary>
        </member>
        <member name="F:LCore.Extensions.L.Date.MaxTimerInterval">
            <summary>
            This is the maximum number of ticks that a System.Timing.Timer will still operate.
            </summary>
        </member>
        <member name="F:LCore.Extensions.L.Date.TicksToMilliseconds">
            <summary>
            Constant value for converting from Ticks to Milliseconds.
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Date.MonthNumberGetName(System.Int32)">
            <summary>
            Returns the name of the month by the number of the month.
            Fails if the number is not between 1 and 12.
            </summary>
        </member>
        <member name="F:LCore.Extensions.L.Date.GetDayNumber">
            <summary>
            Returns the number of the day of the week, from
            Sunday: 0 to Saturday: 6.
            </summary>
        </member>
        <member name="F:LCore.Extensions.L.Date.GetMonthName">
            <summary>
            Returns the name of the months from a datetime.
            </summary>
        </member>
        <member name="T:LCore.Extensions.L.File">
            <summary>
            Contains static methods and lambdas pertaining to file operations.
            </summary>
        </member>
        <member name="F:LCore.Extensions.L.File.DefaultFileMode">
            <summary>
            During file operations, L will use the default file mode Open.
            Change this value to manually override.
            </summary>
        </member>
        <member name="F:LCore.Extensions.L.File.DefaultFileAccess">
            <summary>
            During file operations, L will use the default file access Read.
            Change this value to manually override.
            </summary>
        </member>
        <member name="F:LCore.Extensions.L.File.DefaultFileShare">
            <summary>
            During file operations, L will use the default file share ReadWrite + Delete.
            Change this value to manually override.
            </summary>
        </member>
        <member name="F:LCore.Extensions.L.File.LockFiles">
            <summary>
            During file operations, L will lock files if this value is set to true. Default is false.
            </summary>
        </member>
        <member name="F:LCore.Extensions.L.File.CombinePathsDefaultSeparator">
            <summary>
            The default character to use to combine paths for L.
            Change this value to manually override.
            </summary>
        </member>
        <member name="F:LCore.Extensions.L.File.HashAlgorithm">
            <summary>
            The default hashing algorithm to use for L hashing functions.
            Change this value to manually override.
            </summary>
        </member>
        <member name="E:LCore.Extensions.L.File.BufferedMoveProgress">
            <summary>
            Subscribe to this EventHandler to be notified of buffered move progress 
            during the 
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.File.BufferedMove(System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Moves a file from <paramref name="From" /> to <paramref name="To" /> using a buffer.
            The original file is deleted.
            </summary>
        </member>
        <member name="F:LCore.Extensions.L.File.CleanFileName">
            <summary>
            Removes non-supported characters from filenames.
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.File.CombinePaths(System.String[])">
            <summary>
            Combines sections of a file path using the default Windows file path 
            separator '\'
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.File.CombinePaths(System.Char,System.String[])">
            <summary>
            Combines sections of a file path using a character separator.
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.File.GetFileContents(System.String)">
            <summary>
            A function that returns the bytes of a file from a string path.
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.File.SafeCopyFile(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Tries to copy a file from <paramref name="PathSource" /> to <paramref name="PathDestination" />.
            Optionally, retry a number of times, default 0.
            Optionally, overwrite the destination file if it exists. 
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.File.SafeMoveFile(System.String,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Tries to move a file from <paramref name="PathSource" /> to <paramref name="PathDestination" />.
            Optionally, retry a number of times, default 0.
            Optionally, overwrite the destination file if it exists.
            Optionally, delete the original.
            </summary>
        </member>
        <member name="T:LCore.Extensions.L.Str">
            <summary>
            Contains System.String static methods and lambdas.
            </summary>
        </member>
        <member name="F:LCore.Extensions.L.Str.NewLineString">
            <summary>
            New line string (C# "\r\n")
            </summary>
        </member>
        <member name="F:LCore.Extensions.L.Str.Empty">
            <summary>
            Func that returns an empty string.
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Str.Char(System.String,System.Int32)">
            <summary>
            Character indexer returns the character at index <paramref name="i" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Str.JoinLines(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Function that joins strings from an IEnumerable <paramref name="Line" />.
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Str.CompareNumberString(System.String,System.String)">
            <summary>
            Compares two string-representations of numbers.
            Ex: 
                0
                5
                5.003
               -2
               -0.00000001
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Str.NumericalCompare(System.String,System.String)">
            <summary>
            Compares a string numerically, begin mindful of strings with sequences of numbers.
            Ex: File0005
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Str.Pluralize(System.String,System.Int32)">
            <summary>
            Takes a string and returns a pluralized version of the word or phrase.
            This method will not fail. If the input is empty it will just return "".
            
            <paramref name="Count" /> is used as the number of things you're referring to. 
            If you pass 1 (or -1), pluralization will not be applied
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Str.Pluralize(System.String,System.UInt32)">
            <summary>
            Takes a string and returns a pluralized version of the word or phrase.
            This method will not fail. If the input is empty it will just return "".
            
            <paramref name="Count" /> is used as the number of things you're referring to. 
            If you pass 1 (or -1), pluralization will not be applied
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Str.RemoveChars(System.String,System.Char[])">
            <summary>
            Function that removes any of the supplied characters from a string.
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Str.ReplaceDouble(System.String,System.Char)">
            <summary>
            Function that replaces all double occurrences of a string with single occurrences.
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Str.Singularize(System.String)">
            <summary>
            Takes a string and returns a singularized version of the word or phrase.
            This method will not fail. If the input is empty it will just return "".
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Str.Surround(System.String,System.String,System.String)">
            <summary>
            Surrounds a string with <paramref name="Before" /> and <paramref name="After" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Str.ToS(System.Object)">
            <summary>
            Converts an object or IEnumerable to a detailed string.
            Ex: "System.String[] { a, b, c, d, e }"
            </summary>
        </member>
        <member name="T:LCore.Extensions.L.Char">
            <summary>
            Contains System.Char static methods and lambdas.
            </summary>
        </member>
        <member name="F:LCore.Extensions.L.Char.NewLineChar">
            <summary>
            New line character (C# '\n')
            </summary>
        </member>
        <member name="F:LCore.Extensions.L.Char.LowerCaseChars">
            <summary>
            Array of lower case characters for passwords (char[])
            </summary>
        </member>
        <member name="F:LCore.Extensions.L.Char.UpperCaseChars">
            <summary>
            Array of upper case characters for passwords (char[])
            </summary>
        </member>
        <member name="F:LCore.Extensions.L.Char.NumberChars">
            <summary>
            Array of number characters for passwords (char[])
            </summary>
        </member>
        <member name="F:LCore.Extensions.L.Char.SpecialChars">
            <summary>
            Array of special characters for passwords (char[])
            </summary>
        </member>
        <member name="T:LCore.Extensions.L.Logic">
            <summary>
            Contains static methods and lambdas pertaining to logical operations.
            (Action and Func)
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Do``1">
            <summary>
            Returns an Action from the supplied Func. The return value is discarded.
            </summary>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Cache``1">
            <summary>
            Caches the results of In using a Unique CacheID, combined with the string representation of all parameters.
            </summary>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Cache``1(System.Object@,System.Func{``0})">
            <summary>
            Caches the results of In using a Unique CacheID, combined with the string representation of all parameters.
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Cache``1(``0@,System.Func{``0})">
            <summary>
            Caches the results of In using a Unique CacheID, combined with the string representation of all parameters.
            </summary>
        </member>
        <member name="P:LCore.Extensions.L.Logic.DataCaches">
            <summary>
            Return an array of all L.Logic.ResultCacheData Keys
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.GetCacheData(System.String)">
            <summary>
            Returns the set of CacheData for the L.Logic.ResultCacheData Key.
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.ClearCache(System.String)">
            <summary>
            Clear data for an L.Logic.ResultCacheData Key.
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_SetFunc_A``1">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_SetFunc_F``2">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_SetFunc_A2``2">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_SetFunc_F2``3">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_SetFunc_A3``3">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_SetFunc_F3``4">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_SetFunc_A4``4">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_SetFunc_F4``5">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Set_A``1">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
            <typeparam name="T1"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Set_F``2">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Set2_A``2">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Set2_F``3">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Set3_A``3">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Set3_F``4">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Set4_A``4">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Set4_F``5">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Return_A``1">
            <summary>
            Returns a function that converts an action to a Func, returning the specified value.
            </summary>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Return_A``2">
            <summary>
            Returns a function that converts an action to a Func, returning the specified value.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Return_A``3">
            <summary>
            Returns a function that converts an action to a Func, returning the specified value.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Return_A``4">
            <summary>
            Returns a function that converts an action to a Func, returning the specified value.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Return_A``5">
            <summary>
            Returns a function that converts an action to a Func, returning the specified value.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Return_F``1">
            <summary>
            Returns a function that Overrides the return value of In with the specified value.
            </summary>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Return_F``2">
            <summary>
            Returns a function that Overrides the return value of In with the specified value.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Return_F``3">
            <summary>
            Returns a function that Overrides the return value of In with the specified value.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Return_F``4">
            <summary>
            Returns a function that Overrides the return value of In with the specified value.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Return_F``5">
            <summary>
            Returns a function that Overrides the return value of In with the specified value.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Rotate_A``2">
            <summary>
            Returns a function that rotates the list of parameters to the right.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Rotate_A``3">
            <summary>
            Returns a function that rotates the list of parameters to the right.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Rotate_A``4">
            <summary>
            Returns a function that rotates the list of parameters to the right.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Rotate_F``3">
            <summary>
            Returns a function that rotates the list of parameters to the right.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Rotate_F``4">
            <summary>
            Returns a function that rotates the list of parameters to the right.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Rotate_F``5">
            <summary>
            Returns a function that rotates the list of parameters to the right.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_RotateBack_A``2">
            <summary>
            Returns a function that rotates the list of parameters to the left.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_RotateBack_A``3">
            <summary>
            Returns a function that rotates the list of parameters to the left.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_RotateBack_A``4">
            <summary>
            Returns a function that rotates the list of parameters to the left.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_RotateBack_F``3">
            <summary>
            Returns a function that rotates the list of parameters to the left.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_RotateBack_F``4">
            <summary>
            Returns a function that rotates the list of parameters to the left.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_RotateBack_F``5">
            <summary>
            Returns a function that rotates the list of parameters to the left.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Default_A``1">
            <summary>
            If the first argument passed is null or empty, the Default value is used instead.
            </summary>
            <typeparam name="T1"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Default_A``2">
            <summary>
            If the first argument passed is null or empty, the Default value is used instead.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Default2_A``2">
            <summary>
            If the second argument passed is null or empty, the Default value is used instead.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Default_A``3">
            <summary>
            If the first argument passed is null or empty, the Default value is used instead.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Default2_A``3">
            <summary>
            If the second argument passed is null or empty, the Default value is used instead.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Default3_A``3">
            <summary>
            If the third argument passed is null or empty, the Default value is used instead.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Default_A``4">
            <summary>
            If the first argument passed is null or empty, the Default value is used instead.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Default2_A``4">
            <summary>
            If the second argument passed is null or empty, the Default value is used instead.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Default3_A``4">
            <summary>
            If the third argument passed is null or empty, the Default value is used instead.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Default4_A``4">
            <summary>
            If the fourth argument passed is null or empty, the Default value is used instead.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Default_F``2">
            <summary>
            If the first argument passed is null or empty, the Default value is used instead.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Default_F``3">
            <summary>
            If the first argument passed is null or empty, the Default value is used instead.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Default2_F``3">
            <summary>
            If the second argument passed is null or empty, the Default value is used instead.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Default_F``4">
            <summary>
            If the first argument passed is null or empty, the Default value is used instead.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Default2_F``4">
            <summary>
            If the second argument passed is null or empty, the Default value is used instead.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Default3_F``4">
            <summary>
            If the third argument passed is null or empty, the Default value is used instead.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Default_F``5">
            <summary>
            If the first argument passed is null or empty, the Default value is used instead.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Default2_F``5">
            <summary>
            If the second argument passed is null or empty, the Default value is used instead.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Default3_F``5">
            <summary>
            If the third argument passed is null or empty, the Default value is used instead.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Default4_F``5">
            <summary>
            If the fourth argument passed is null or empty, the Default value is used instead.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Defaults_A``2">
            <summary>
            If the arguments passed are null or empty, the Default values are used instead.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Defaults_A``3">
            <summary>
            If the arguments passed are null or empty, the Default values are used instead.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Defaults_A``4">
            <summary>
            If the arguments passed are null or empty, the Default values are used instead.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Defaults_F``3">
            <summary>
            If the arguments passed are null or empty, the Default values are used instead.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Defaults_F``4">
            <summary>
            If the arguments passed are null or empty, the Default values are used instead.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Defaults_F``5">
            <summary>
            If the arguments passed are null or empty, the Default values are used instead.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Require_A``1">
            <summary>
            Returns a method that requires the first parameter to be non-null. If the parameter is null, an exception is thrown with the parameter name.
            </summary>
            <typeparam name="T1"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Require_A``2">
            <summary>
            Returns a method that requires the first parameter to be non-null. If the parameter is null, an exception is thrown with the parameter name.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Require2_A``2">
            <summary>
            Returns a method that requires the second parameter to be non-null. If the parameter is null, an exception is thrown with the parameter name.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Require_A``3">
            <summary>
            Returns a method that requires the first parameter to be non-null. If the parameter is null, an exception is thrown with the parameter name.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Require2_A``3">
            <summary>
            Returns a method that requires the second parameter to be non-null. If the parameter is null, an exception is thrown with the parameter name.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Require3_A``3">
            <summary>
            Returns a method that requires the third parameter to be non-null. If the parameter is null, an exception is thrown with the parameter name.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Require_A``4">
            <summary>
            Returns a method that requires the first parameter to be non-null. If the parameter is null, an exception is thrown with the parameter name.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Require2_A``4">
            <summary>
            Returns a method that requires the second parameter to be non-null. If the parameter is null, an exception is thrown with the parameter name.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Require3_A``4">
            <summary>
            Returns a method that requires the third parameter to be non-null. If the parameter is null, an exception is thrown with the parameter name.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Require4_A``4">
            <summary>
            Returns a method that requires the fourth parameter to be non-null. If the parameter is null, an exception is thrown with the parameter name.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Require_F``2">
            <summary>
            Returns a method that requires the first parameter to be non-null. If the parameter is null, an exception is thrown with the parameter name.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Require_F``3">
            <summary>
            Returns a method that requires the first parameter to be non-null. If the parameter is null, an exception is thrown with the parameter name.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Require2_F``3">
            <summary>
            Returns a method that requires the second parameter to be non-null. If the parameter is null, an exception is thrown with the parameter name.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Require_F``4">
            <summary>
            Returns a method that requires the first parameter to be non-null. If the parameter is null, an exception is thrown with the parameter name.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Require2_F``4">
            <summary>
            Returns a method that requires the second parameter to be non-null. If the parameter is null, an exception is thrown with the parameter name.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Require3_F``4">
            <summary>
            Returns a method that requires the third parameter to be non-null. If the parameter is null, an exception is thrown with the parameter name.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Require_F``5">
            <summary>
            Returns a method that requires the first parameter to be non-null. If the parameter is null, an exception is thrown with the parameter name.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Require2_F``5">
            <summary>
            Returns a method that requires the second parameter to be non-null. If the parameter is null, an exception is thrown with the parameter name.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Require3_F``5">
            <summary>
            Returns a method that requires the third parameter to be non-null. If the parameter is null, an exception is thrown with the parameter name.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Require4_F``5">
            <summary>
            Returns a method that requires the fourth parameter to be non-null. If the parameter is null, an exception is thrown with the parameter name.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_RequireAll_A``2">
            <summary>
            Returns a method that requires all parameters to be non-null. If any parameter is null, an exception is thrown with the parameter name.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_RequireAll_A``3">
            <summary>
            Returns a method that requires all parameters to be non-null. If any parameter is null, an exception is thrown with the parameter name.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_RequireAll_A``4">
            <summary>
            Returns a method that requires all parameters to be non-null. If any parameter is null, an exception is thrown with the parameter name.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_RequireAll_F``3">
            <summary>
            Returns a method that requires all parameters to be non-null. If any parameter is null, an exception is thrown with the parameter name.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_RequireAll_F``4">
            <summary>
            Returns a method that requires all parameters to be non-null. If any parameter is null, an exception is thrown with the parameter name.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_RequireAll_F``5">
            <summary>
            Returns a method that requires all parameters to be non-null. If any parameter is null, an exception is thrown with the parameter name.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Yield_A``1">
            <summary>
            Takes an Action and returns a Func that returns the first parameter after the action is performed.
            </summary>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Yield_A``2">
            <summary>
            Takes an Action and returns a Func that returns the first parameter after the action is performed.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Yield2_A``2">
            <summary>
            Takes an Action and returns a Func that returns the second parameter after the action is performed.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Yield_A``3">
            <summary>
            Takes an Action and returns a Func that returns the first parameter after the action is performed.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Yield2_A``3">
            <summary>
            Takes an Action and returns a Func that returns the second parameter after the action is performed.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Yield3_A``3">
            <summary>
            Takes an Action and returns a Func that returns the third parameter after the action is performed.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Yield_A``4">
            <summary>
            Takes an Action and returns a Func that returns the first parameter after the action is performed.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Yield2_A``4">
            <summary>
            Takes an Action and returns a Func that returns the second parameter after the action is performed.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Yield3_A``4">
            <summary>
            Takes an Action and returns a Func that returns the third parameter after the action is performed.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Yield4_A``4">
            <summary>
            Takes an Action and returns a Func that returns the fourth parameter after the action is performed.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Yield_F``1">
            <summary>
            Takes an Action and returns a Func that returns the first parameter after the action is performed.
            </summary>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Yield_F``2">
            <summary>
            Takes an Action and returns a Func that returns the first parameter after the action is performed.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Yield2_F``2">
            <summary>
            Takes an Action and returns a Func that returns the second parameter after the action is performed.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Yield_F``3">
            <summary>
            Takes an Action and returns a Func that returns the first parameter after the action is performed.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Yield2_F``3">
            <summary>
            Takes an Action and returns a Func that returns the second parameter after the action is performed.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Yield3_F``3">
            <summary>
            Takes an Action and returns a Func that returns the third parameter after the action is performed.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Yield_F``4">
            <summary>
            Takes an Action and returns a Func that returns the first parameter after the action is performed.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Yield2_F``4">
            <summary>
            Takes an Action and returns a Func that returns the second parameter after the action is performed.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Yield3_F``4">
            <summary>
            Takes an Action and returns a Func that returns the third parameter after the action is performed.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Yield4_F``4">
            <summary>
            Takes an Action and returns a Func that returns the fourth parameter after the action is performed.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Execute_A">
            <summary>
            For a method Act that returns a method, Returns a method that executes the Method passed and its result.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Execute_A``1">
            <summary>
            For a method Act that returns a method, Returns a method that executes the Method passed and its result.
            </summary>
            <typeparam name="T1"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Execute_A``2">
            <summary>
            For a method Act that returns a method, Returns a method that executes the Method passed and its result.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Execute_A``3">
            <summary>
            For a method Act that returns a method, Returns a method that executes the Method passed and its result.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Execute_A``4">
            <summary>
            For a method Act that returns a method, Returns a method that executes the Method passed and its result.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Execute_F``1">
            <summary>
            For a method Act that returns a method, Returns a method that executes the Method passed and its result.
            </summary>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Execute_F``2">
            <summary>
            For a method Act that returns a method, Returns a method that executes the Method passed and its result.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Execute_F``3">
            <summary>
            For a method Act that returns a method, Returns a method that executes the Method passed and its result.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Execute_F``4">
            <summary>
            For a method Act that returns a method, Returns a method that executes the Method passed and its result.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Execute_F``5">
            <summary>
            For a method Act that returns a method, Returns a method that executes the Method passed and its result.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Cast_A``2">
            <summary>
            Returns a function that takes a Casts the paramater of the Action to U1
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="U1"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Cast_A``4">
            <summary>
            Returns a function that takes a Casts the paramaters of the Action to U1, U2
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U1"></typeparam>
            <typeparam name="U2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Cast_A``6">
            <summary>
            Returns a function that takes a Casts the paramaters of the Action to U1, U2, U3
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U1"></typeparam>
            <typeparam name="U2"></typeparam>
            <typeparam name="U3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Cast_A``8">
            <summary>
            Returns a function that takes a Casts the paramaters of the Action to U1, U2, U3, U4
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U1"></typeparam>
            <typeparam name="U2"></typeparam>
            <typeparam name="U3"></typeparam>
            <typeparam name="U4"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Cast_F``2">
            <summary>
            Returns a function that Casts the output of the Func to U2
            </summary>
            <typeparam name="U1"></typeparam>
            <typeparam name="U2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Cast_F``4">
            <summary>
            Returns a function that Casts the output of the Func to U2 and the input to T2
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="U1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Cast_F``6">
            <summary>
            Returns a function that Casts the output of the Func to U2 and the inputs to T3, T4
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U1"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Cast_F``8">
            <summary>
            Returns a function that Casts the output of the Func to U2 and the inputs to T4, T5, T6
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U1"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="U2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Cast_F``10">
            <summary>
            Returns a function that Casts the output of the Func to U2 and the inputs to T7, T8, T9
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U1"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="U2"></typeparam>
            <returns></returns>
        </member>
        <member name="F:LCore.Extensions.L.Logic.Then">
            <summary>
            Joins two methods together, performing one then another.
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Then_A">
            <summary>
            Joins multiple actions together, performing them in order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Then_A``1">
            <summary>
            Joins multiple actions together, performing them in order.
            </summary>
            <typeparam name="T1"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Then_A``2">
            <summary>
            Joins multiple methods together, performing them in order.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Then_A``3">
            <summary>
            Joins multiple actions together, performing them in order.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Then_A``4">
            <summary>
            Joins multiple methods together, performing them in order.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Then_A_F``1">
            <summary>
            Joins multiple methods together, performing them in order. The last operation in the list's result will be the final return value.
            </summary>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Then_A_F``2">
            <summary>
            Joins multiple methods together, performing them in order. The last operation in the list's result will be the final return value.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Then_A_F``3">
            <summary>
            Joins multiple methods together, performing them in order. The last operation in the list's result will be the final return value.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Then_A_F``4">
            <summary>
            Joins multiple methods together, performing them in order. The last operation in the list's result will be the final return value.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Then_A_F``5">
            <summary>
            Joins multiple methods together, performing them in order. The last operation in the list's result will be the final return value.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Then_F``1">
            <summary>
            Joins multiple methods together, performing them in order.
            </summary>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Then_F``2">
            <summary>
            Joins multiple methods together, performing them in order.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Then_F``3">
            <summary>
            Joins multiple methods together, performing them in order.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Then_F``4">
            <summary>
            Joins multiple methods together, performing them in order.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Then_F``5">
            <summary>
            Joins multiple methods together, performing them in order.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Then_F_F``1">
            <summary>
            Joins multiple methods together, performing them in order.
            </summary>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Then_F_F``2">
            <summary>
            Joins multiple methods together, performing them in order. The last operation in the list's result will be the final return value.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Then_F_F``3">
            <summary>
            Joins multiple methods together, performing them in order. The last operation in the list's result will be the final return value.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Then_F_F``4">
            <summary>
            Joins multiple methods together, performing them in order. The last operation in the list's result will be the final return value.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Then_F_F``5">
            <summary>
            Joins multiple methods together, performing them in order. The last operation in the list's result will be the final return value.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_ThenMissing_A``1">
            <summary>
            Returns a method that concatenates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored.
            </summary>
            <typeparam name="T1"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_ThenMissing_A``2">
            <summary>
            Returns a method that concatenates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_ThenMissing_A2``2">
            <summary>
            Returns a method that concatenates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_ThenMissing_A``3">
            <summary>
            Returns a method that concatenates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_ThenMissing_A2``3">
            <summary>
            Returns a method that concatenates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_ThenMissing_A3``3">
            <summary>
            Returns a method that concatenates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_ThenMissing_A``4">
            <summary>
            Returns a method that concatenates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_ThenMissing_A2``4">
            <summary>
            Returns a method that concatenates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_ThenMissing_A3``4">
            <summary>
            Returns a method that concatenates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_ThenMissing_A4``4">
            <summary>
            Returns a method that concatenates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_ThenMissing_A_F``2">
            <summary>
            Returns a method that concatenates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored. The last method in Acts will be the return value that is used.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_ThenMissing_A_F``3">
            <summary>
            Returns a method that concatenates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored. The last method in Acts will be the return value that is used.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_ThenMissing_A_F``4">
            <summary>
            Returns a method that concatenates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored. The last method in Acts will be the return value that is used.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_ThenMissing_A_F2``3">
            <summary>
            Returns a method that concatenates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored. The last method in Acts will be the return value that is used.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_ThenMissing_A_F3``4">
            <summary>
            Returns a method that concatenates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored. The last method in Acts will be the return value that is used.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_ThenMissing_A_F2``4">
            <summary>
            Returns a method that concatenates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored. The last method in Acts will be the return value that is used.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_ThenMissing_A_F``5">
            <summary>
            Returns a method that concatenates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored. The last method in Acts will be the return value that is used.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_ThenMissing_A_F2``5">
            <summary>
            Returns a method that concatenates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored. The last method in Acts will be the return value that is used.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_ThenMissing_A_F3``5">
            <summary>
            Returns a method that concatenates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored. The last method in Acts will be the return value that is used.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_ThenMissing_A_F4``5">
            <summary>
            Returns a method that concatenates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored. The last method in Acts will be the return value that is used.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_ThenMissing_F_A``2">
            <summary>
            Returns a method that concatenates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_ThenMissing_F_A``3">
            <summary>
            Returns a method that concatenates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_ThenMissing_F_A2``3">
            <summary>
            Returns a method that concatenates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_ThenMissing_F_A``4">
            <summary>
            Returns a method that concatenates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_ThenMissing_F_A2``4">
            <summary>
            Returns a method that concatenates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_ThenMissing_F_A3``4">
            <summary>
            Returns a method that concatenates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_ThenMissing_F_A``5">
            <summary>
            Returns a method that concatenates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_ThenMissing_F_A2``5">
            <summary>
            Returns a method that concatenates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_ThenMissing_F_A3``5">
            <summary>
            Returns a method that concatenates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_ThenMissing_F_A4``5">
            <summary>
            Returns a method that concatenates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_ThenMissing_F_F``2">
            <summary>
            Returns a method that Success In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored. The last method in Acts will be the return value that is used.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_ThenMissing_F_F``3">
            <summary>
            Returns a method that concatenates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored. The last method in Acts will be the return value that is used.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_ThenMissing_F_F2``3">
            <summary>
            Returns a method that concatenates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored. The last method in Acts will be the return value that is used.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_ThenMissing_F_F2``4">
            <summary>
            Returns a method that concatenates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored. The last method in Acts will be the return value that is used.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_ThenMissing_F_F3``4">
            <summary>
            Returns a method that concatenates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored. The last method in Acts will be the return value that is used.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_ThenMissing_F_F``4">
            <summary>
            Returns a method that concatenates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored. The last method in Acts will be the return value that is used.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_ThenMissing_F_F``5">
            <summary>
            Returns a method that concatenates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored. The last method in Acts will be the return value that is used.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_ThenMissing_F_F2``5">
            <summary>
            Returns a method that concatenates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored. The last method in Acts will be the return value that is used.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_ThenMissing_F_F3``5">
            <summary>
            Returns a method that concatenates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored. The last method in Acts will be the return value that is used.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_ThenMissing_F_F4``5">
            <summary>
            Returns a method that concatenates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored. The last method in Acts will be the return value that is used.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Merge">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Merge_A_F``1">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Merge_F_A``1">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Merge_F_A1``2">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Merge_F_A2``3">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Merge_F_A3``4">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Merge_F_A4``5">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Merge_F1_A``2">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Merge_F1_A1``3">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Merge_F1_A2``4">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Merge_F1_A3``5">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Merge_F2_A``3">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Merge_F2_A1``4">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Merge_F2_A2``5">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Merge_F3_A``4">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Merge_F3_A1``5">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Merge_F3_A``5">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Merge_F_F``1">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Merge_F_F1``2">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Merge_F_F2``3">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Merge_F_F3``4">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Merge_F_F4``5">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Merge_F1_F``2">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Merge_F1_F1``3">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Merge_F1_F2``4">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Merge_F1_F3``5">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Merge_F2_F``3">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Merge_F2_F1``4">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Merge_F2_F2``5">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Merge_F3_F``4">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Merge_F3_F1``5">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Merge_F4_F``5">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Supply_A``1">
            <summary>
            Returns a method with the first parameter removed. When the method is called, Obj will be supplied.
            </summary>
            <typeparam name="T1"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Supply_A``2">
            <summary>
            Returns a method with the first parameter removed. When the method is called, Obj will be supplied.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Supply_A2``2">
            <summary>
            Returns a method with the second parameter removed. When the method is called, Obj will be supplied.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Supply_A``3">
            <summary>
            Returns a method with the first parameter removed. When the method is called, Obj will be supplied.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Supply_A2``3">
            <summary>
            Returns a method with the second parameter removed. When the method is called, Obj will be supplied.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Supply_A3``3">
            <summary>
            Returns a method with the third parameter removed. When the method is called, Obj will be supplied.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Supply_A``4">
            <summary>
            Returns a method with the first parameter removed. When the method is called, Obj will be supplied.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Supply_A2``4">
            <summary>
            Returns a method with the second parameter removed. When the method is called, Obj will be supplied.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Supply_A3``4">
            <summary>
            Returns a method with the third parameter removed. When the method is called, Obj will be supplied.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Supply_A4``4">
            <summary>
            Returns a method with the fourth parameter removed. When the method is called, Obj will be supplied.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Supply_F``2">
            <summary>
            Returns a method with the first parameter removed. When the method is called, Obj will be supplied.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Supply_F``3">
            <summary>
            Returns a method with the first parameter removed. When the method is called, Obj will be supplied.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Supply_F2``3">
            <summary>
            Returns a method with the second parameter removed. When the method is called, Obj will be supplied.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Supply_F``4">
            <summary>
            Returns a method with the first parameter removed. When the method is called, Obj will be supplied.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Supply_F2``4">
            <summary>
            Returns a method with the second parameter removed. When the method is called, Obj will be supplied.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Supply_F3``4">
            <summary>
            Returns a method with the third parameter removed. When the method is called, Obj will be supplied.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Supply_F``5">
            <summary>
            Returns a method with the first parameter removed. When the method is called, Obj will be supplied.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Supply_F2``5">
            <summary>
            Returns a method with the second parameter removed. When the method is called, Obj will be supplied.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Supply_F3``5">
            <summary>
            Returns a method with the third parameter removed. When the method is called, Obj will be supplied.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.L_Supply_F4``5">
            <summary>
            Returns a method with the fourth parameter removed. When the method is called, Obj will be supplied.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Action``1">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Action``2">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Action``3">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Action``4">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Action``5">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Action``6">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Action``7">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Action``8">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Action``9">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Action``10">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Action``11">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Action``12">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Action``13">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Action``14">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Action``15">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Action``16">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Do``1">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Do``2">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Do``3">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Do``4">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Do``5">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Do``6">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Do``7">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Do``8">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Do``9">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Do``10">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Do``11">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Do``12">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Do``13">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Do``14">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Do``15">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Do``16">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Do``17">
            <summary>
            Creates an empty method using the specified Type Arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Action(System.Action)">
            <summary>
            Returns a method from a static or instance reference
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Action``1(System.Action{``0})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Action``2(System.Action{``0,``1})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Action``3(System.Action{``0,``1,``2})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Action``4(System.Action{``0,``1,``2,``3})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Action``5(System.Action{``0,``1,``2,``3,``4})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Action``6(System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Action``7(System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Action``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Action``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Action``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Action``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Action``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Action``13(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Action``14(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Action``15(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Action``16(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Function``1(System.Func{``0})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Function``2(System.Func{``0,``1})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Function``3(System.Func{``0,``1,``2})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Function``4(System.Func{``0,``1,``2,``3})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Function``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Function``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Function``7(System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Function``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Function``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Function``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Function``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Function``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Function``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Function``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Function``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Function``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Function``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>
            Returns a method from a static or instance reference
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Return``1">
            <summary>
            Returns a function that returns an empty object of Type U
            </summary>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Return``1(``0)">
            <summary>
            Returns a function that returns the supplied Object
            </summary>
            <typeparam name="U"></typeparam>
            <param name="In"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.Pass``1">
            <summary>
            Returns a function that takes a Typed value and returns it, performing no action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.L.Logic.New``1(System.Object[])">
            <summary>
            Retrieves a func that creates an object of type <typeparamref name="U" /> with the supplied parameters.
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.New``1">
            <summary>
            Retrieves a func that creates an object of type <typeparamref name="U" />.
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.New``2">
            <summary>
            Retrieves a func that creates an object of type <typeparamref name="U" />.
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.New``3">
            <summary>
            Retrieves a func that creates an object of type <typeparamref name="U" />.
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.New``4">
            <summary>
            Retrieves a func that creates an object of type <typeparamref name="U" />.
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Logic.New``5">
            <summary>
            Retrieves a func that creates an object of type <typeparamref name="U" />.
            </summary>
        </member>
        <member name="T:LCore.Extensions.L.Ary">
            <summary>
            Contains Array static methods and lambdas.
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.Ary.Array``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns>Returns a function that returns an empty T[]</returns>
        </member>
        <member name="M:LCore.Extensions.L.Ary.Array``1(``0[])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="In"></param>
            <returns>Returns a function that returns a T[] filled with arguments</returns>
        </member>
        <member name="T:LCore.Extensions.L.List">
            <summary>
            Contains Generic List static methods and lambdas.
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.List.NewList``2">
            <summary>
            Creates a new list of the specified type.
            Types supported: U[], List`<typeparamref name="U" />, String
            </summary>
        </member>
        <member name="M:LCore.Extensions.L.List.ToList``1">
            <summary>
            
            </summary>
            <returns>Returns a function that returns an empty List<typeparamref name="T" /></returns>
        </member>
        <member name="M:LCore.Extensions.L.List.ToList``1(``0[])">
            <summary>
            
            </summary>
            <returns>Returns a function that returns a List<typeparamref name="T" /> filled with arguments</returns>
        </member>
        <member name="T:LCore.Extensions.ComparableExt">
            <summary>
            Provides extension methods to IComparable objects.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ComparableExt.IsEqualTo(System.IComparable,System.IComparable)">
            <summary>
            Use this fluent extension method to compare IComparable equality.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ComparableExt.IsNotEqualTo(System.IComparable,System.IComparable)">
            <summary>
            Use this fluent extension method to compare IComparable inequality.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ComparableExt.IsLessThan(System.IComparable,System.IComparable)">
            <summary>
            Use this fluent extension method to compare one IComparable to another.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ComparableExt.IsLessThanOrEqual(System.IComparable,System.IComparable)">
            <summary>
            Use this fluent extension method to compare one IComparable to another.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ComparableExt.IsGreaterThan(System.IComparable,System.IComparable)">
            <summary>
            Use this fluent extension method to compare one IComparable to another.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ComparableExt.IsGreaterThanOrEqual(System.IComparable,System.IComparable)">
            <summary>
            Use this fluent extension method to compare one IComparable to another.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ComparableExt.Max``1(``0,``0[])">
            <summary>
            Returns the largest of <paramref name="In" /> and all items in <paramref name="Others" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.ComparableExt.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.IComparable})">
            <summary>
            Returns the Item which causes <paramref name="Comparer"/> to return the greatest IComparable value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ComparableExt.Min``1(``0,``0[])">
            <summary>
            Returns the smallest of <paramref name="In" /> and all items in <paramref name="Others" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.ComparableExt.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.IComparable})">
            <summary>
            Returns the Item which causes <paramref name="Comparer"/> to return the smallest IComparable value.
            </summary>
        </member>
        <member name="T:LCore.Extensions.ReflectionExt">
            <summary>
            Provides extension methods for reflection classes:
            Type, MemberInfo, MethodInfo, PropertyInfo, FieldInfo
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.AlsoBaseTypes(System.Type)">
            <summary>
            Returns a list of the provided type <paramref name="In" /> as well as all of <paramref name="In" />'s base types.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.BaseTypes(System.Type)">
            <summary>
            Returns a list of all of <paramref name="In" />'s base types.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.CanBeNull(System.Reflection.ParameterInfo)">
            <summary>
            Determines if a ParameterInfo can be passed a null value.
            This includes: Object types, nullable value types, and optional parameters.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.FindMethod(System.Type,System.String,System.Type[])">
            <summary>
            Finds a method by name, searching the Type <paramref name="In" /> as well as all
            base types.
            Optionally include a Type[] <paramref name="Arguments" /> to specify the method arguments.
            </summary>
            <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name and specified parameters. </exception>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.FindMethod``1(System.Type,System.String)">
            <summary>
            Finds a method by name, searching the Type <paramref name="In" /> as well as all
            base types.
            Supply Type parameters to locate a method by its parameter types.
            </summary>
            <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name and specified parameters. </exception>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.FindMethod``2(System.Type,System.String)">
            <summary>
            Finds a method by name, searching the Type <paramref name="In" /> as well as all
            base types.
            Supply Type parameters to locate a method by its parameter types.
            </summary>
            <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name and specified parameters. </exception>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.FindMethod``3(System.Type,System.String)">
            <summary>
            Finds a method by name, searching the Type <paramref name="In" /> as well as all
            base types.
            Supply Type parameters to locate a method by its parameter types.
            </summary>
            <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name and specified parameters. </exception>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.FindMethod``4(System.Type,System.String)">
            <summary>
            Finds a method by name, searching the Type <paramref name="In" /> as well as all
            base types.
            Supply Type parameters to locate a method by its parameter types.
            </summary>
            <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name and specified parameters. </exception>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.FullyQualifiedName(System.Reflection.MemberInfo)">
            <summary>
            Returns the fully qualified name for a member
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.FullyQualifiedName(System.Reflection.ParameterInfo)">
            <summary>
            Returns the fully qualified name for a ParameterInfo
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.GetAssembly(System.Reflection.MemberInfo)">
            <summary>
            Returns a reference to the Assembly the given <paramref name="Member"/> was
            defined.
            If Member is null or the Declaring Type can't be determined, null is returned.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.GetAttribute``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Returns an attribute of type <typeparamref name="T" /> if it exists.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.GetAttribute``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            Returns an attribute of type <typeparamref name="T" /> if it exists.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.GetAttributes``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            Returns all attributes of type <typeparamref name="T" />.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.GetAttributeTypeName(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Returns the name of the attribute type.
            </summary>
            <exception cref="T:System.ArgumentException">Unsupported / unknown attribute provider is passed.</exception>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.GetComparer(System.Reflection.MemberInfo)">
            <summary>
            Returns a ComparableComparer to compare comparable types.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.GetComparer``1(System.Reflection.MemberInfo)">
            <summary>
            Returns a ComparableComparer to compare comparable types.
            Returns a strongly typed IComparer<typeparamref name="T" /> if you know the type you're comparing.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.GetExtensionMethods(System.Type)">
            <summary>
            Returns all Extension methods declared on Type <paramref name="In" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.GetMemberType(System.Reflection.MemberInfo)">
            <summary>
            Returns the FieldType of the field, PropertyType of the property, 
            or ReturnType of the method.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.GetNamespace(System.Reflection.MemberInfo)">
            <summary>
            Returns the namespace the given Member is declared, if applicable.
            Otherwise returns an empty string "".
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.GetNestedNames(System.Type)">
            <summary>
            Returns a '.'-separated series of class names if <paramref name="Type"/> is a nested type.
            Otherwise just the name of <paramref name="Type"/> will be returned.
            If <paramref name="Type"/> is null, an empty string ("") will be returned .
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.GetSubClass(System.Type,System.String)">
            <summary>
            Gets a subclass from a type <paramref name="In" /> or any of its base classes.
            Subclass from a descendant will be used before an ancestor subclasses.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.GetSubClasses(System.Type)">
            <summary>
            Gets a subclasses from a type <paramref name="In" /> or any of its base classes.
            Subclasses from a descendant will be used before an ancestor subclasses.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.GetFriendlyTypeName(System.Type)">
            <summary>
            Returns a friendly name for a type including generic type arguments.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.GetValue(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Returns the value from a specific object.
            If the field is not found an Exception will be thrown.
            </summary>
            <exception cref="T:System.ArgumentException">If the MemberInfo <paramref name="In" /> cannot be found on <paramref name="Obj" />.</exception>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.GetValues``1(System.Type,System.Object,System.Boolean)">
            <summary>
            Returns a list of all member values, optionally include subclasses.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.GetValues``1(System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo},System.Object,System.Boolean)">
            <summary>
            Returns a list of object values from a list of members.
            Optionally, set <paramref name="Instantiate" /> to true to instantiate null members.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.GetTypes``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a list of the types of all elements within <paramref name="In" />.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.GetTypes``1(``0[])">
            <summary>
            Returns an array of the types of all elements within <paramref name="In" />.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.HasAttribute``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Returns whether a member has a certain attribute type <typeparamref name="T" />.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.HasAttribute``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            Returns whether a member has a certain attribute type <typeparamref name="T" />.
            Optionally, look on base type members for the attribute.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.HasAttribute(System.Reflection.ICustomAttributeProvider,System.Type,System.Boolean)">
            <summary>
            Returns whether a member has a certain attribute type <paramref name="AttributeProvider" />.
            Optionally, look on base type members for the attribute.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.HasInterface(System.Type,System.Type)">
            <summary>
            Returns whether or not a given type <paramref name="In" /> implements an interface.
            Optionally, IncludeBaseTypes can be set to false to only look within top-level classes.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.HasInterface``1(System.Type)">
            <summary>
            Returns whether or not a given type <paramref name="In" /> implements an interface.
            Optionally, IncludeBaseTypes can be set to false to only look within top-level classes.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.HasIndexGetter``2(System.Type)">
            <summary>
            Determines if a Type <paramref name="Type"/> has an Indexer
            of the specified type: <paramref name="Type"/>[<typeparamref name="TKey"/>] == <typeparamref name="TValue"/>
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.HasIndexGetter``1(System.Type)">
            <summary>
            Determines if a Type <paramref name="Type"/> has an Indexer
            of the specified type: <paramref name="Type"/>[<typeparamref name="TKey"/>] == object
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.HasIndexSetter``2(System.Type)">
            <summary>
            Determines if a Type <paramref name="Type"/> has an Indexer
            of the specified type: <paramref name="Type"/>[<typeparamref name="TKey"/>] == <typeparamref name="TValue"/>
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.HasIndexSetter``1(System.Type)">
            <summary>
            Determines if a Type <paramref name="Type"/> has an Indexer
            of the specified type: <paramref name="Type"/>[<typeparamref name="TKey"/>] == object
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.HasSetter(System.Reflection.MemberInfo)">
            <summary>
            Returns whether a MemberInfo has a setter.
            </summary>
            <exception cref="T:System.ArgumentException">If an unknown MemberInfo type is passed.</exception>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.IndexGetter``2(System.Type)">
            <summary>
            Returns an Indexer of the specified type, if a getter is available.
            <paramref name="Type"/>[<typeparamref name="TKey"/>] == <typeparamref name="TValue"/>
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.IndexGetter``1(System.Type)">
            <summary>
            Returns an Indexer of the specified type, if a getter is available.
            <paramref name="Type"/>[<typeparamref name="TKey"/>] == object
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.IndexSetter``2(System.Type)">
            <summary>
            Returns an Indexer of the specified type, if a setter is available.
            <paramref name="Type"/>[<typeparamref name="TKey"/>] == <typeparamref name="TValue"/>
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.IndexSetter``1(System.Type)">
            <summary>
            Returns an Indexer of the specified type, if a setter is available.
            <paramref name="Type"/>[<typeparamref name="TKey"/>] == object
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.InstantiateValues``1(System.Type,System.Object,System.Boolean)">
            <summary>
            Instantiates values of properties for an object.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.InstantiateValues``1(System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo},System.Object)">
            <summary>
            Instantiates values of specific properties for an object.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.IsExtensionMethod(System.Reflection.MethodInfo)">
            <summary>
            Returns whether a MethodInfo is an extension method or not.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.IsNullable(System.Type)">
            <summary>
            Determines if <paramref name="Type"/> is a nullable type.
            Ex: int?, bool?, (Nullable[int], Nullable[bool])
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.IsOperator(System.Reflection.MethodInfo)">
            <summary>
            Determines if a MethodInfo is an operator (+,-,*,/,implicit cast, explicit cast).
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.IsType``1(System.Object)">
            <summary>
            Returns whether object <paramref name="In" /> is type <typeparamref name="T" /> or a subclass of <typeparamref name="T" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.IsType(System.Object,System.Type)">
            <summary>
            Returns whether object <paramref name="In" /> is type <paramref name="Type" /> or a subclass of <paramref name="Type" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.IsType(System.Type,System.Type)">
            <summary>
            Returns whether type <paramref name="In" /> is type <paramref name="Type" /> or a subclass of <paramref name="Type" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.IsType``1(System.Type)">
            <summary>
            Returns whether type <paramref name="In" /> is type <typeparamref name="T" /> or a subclass of <typeparamref name="T" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.IsStatic(System.Type)">
            <summary>
            Returns whether a Type is static or not.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.MembersOfType(System.Type,System.Type,System.Boolean)">
            <summary>
            Return all members of type <paramref name="In" /> who expose type <paramref name="Type" />.
            Optionally, scan base classes.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.MemberType(System.Reflection.MemberInfo)">
            <summary>
            Returns the type of the member.
            Uses the return value if <paramref name="In" /> is a MethodInfo.
            </summary>
            <exception cref="T:System.ArgumentException">If an unknown MemberInfo type is passed.</exception>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.New``1(System.Type,System.Object[])">
            <summary>
            Creates a new <typeparamref name="T" /> object. Optionally, pass in <paramref name="Arguments" /> to the constructor.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.New(System.Type,System.Object[],System.Type)">
            <summary>
            Creates a new object. Optionally, pass in <paramref name="Arguments" /> to the constructor.
            If the object type is uses a generic type, you need to supply it using <paramref name="GenericType" />
            </summary>
            <exception cref="T:System.InvalidOperationException">The object could not be created, constructor was not found.</exception>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.NewRandom(System.Type,System.Object,System.Object)">
            <summary>
            Creates a new random object for many simple types.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.SetValue(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>
            Sets the member value on <paramref name="Obj" />.
            </summary>
            <param name="In"></param>
            <param name="Obj"></param>
            <param name="Value"></param>
            <exception cref="T:System.ArgumentException">If the MemberInfo <paramref name="In" /> was not found on Obj.</exception>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.ToInvocationSignature(System.Reflection.MethodInfo,System.Boolean)">
            <summary>
            Returns a friendly invocation signature representing the MethodInfo.
            Ex: MethodInfo.ToInvocationSignature() => string
                string.Sub(int, int) => string
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.TypeEquals(System.Type,System.Type)">
            <summary>
            Returns whether the two types are equal by comparing their Fully Qualified Names.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.WithAttribute``2(System.Collections.Generic.IEnumerable{``1},System.Boolean)">
            <summary>
            Filters an IEnumerable`MemberInfo, excluding any members with given 
            attribute <typeparamref name="TAttribute" />.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.WithAttribute``1(System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo},System.Boolean)">
            <summary>
            Filters an IEnumerable`MemberInfo, including any members with given 
            attribute <typeparamref name="T" />.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.WithAttribute(System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo},System.Type,System.Boolean)">
            <summary>
            Filters an IEnumerable`MemberInfo, including any members with given <paramref name="AttributeType" />.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.WithoutAttribute``2(System.Collections.Generic.IEnumerable{``1},System.Boolean)">
            <summary>
            Filters an IEnumerable`MemberInfo, excluding any members with given 
            attribute <typeparamref name="TAttribute" />.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.WithoutAttribute``1(System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo},System.Boolean)">
            <summary>
            Filters an IEnumerable`MemberInfo, excluding any members with given 
            attribute <typeparamref name="T" />.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.WithoutAttribute(System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo},System.Type,System.Boolean)">
            <summary>
            Filters an IEnumerable`MemberInfo, excluding any members with given 
            attribute <paramref name="AttributeType" />.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.ToParameterSignature(System.Reflection.MethodInfo)">
            <summary>
            Gets a method's parameter signature.
            Ex: (Func`1&lt;String%gt;, Int32) =&gt; Action
                (String, String)
                (String, String) =&gt; Boolean
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.GetGenericName(System.Type)">
            <summary>
            Gets a Type's name formatted properly with generic parameters.
            Ex: List&lt;String&gt;
                Func&lt;Action&lt;Int32&gt;, IEnumerable&lt;Object&gt;&gt;
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.IsPropertyGetterOrSetter(System.Reflection.MethodInfo)">
            <summary>
            Determines if a MethodInfo is a getter or setter method attached to a property.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.IsDeclaredMember(System.Reflection.MemberInfo)">
            <summary>
            Returns true if a member is declared on the type it was retrieved from,
            False if it was inherited from a base class.
            
            <see cref="M:LCore.Extensions.ReflectionExt.IsInheritedMember(System.Reflection.MemberInfo)"/>
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.IsInheritedMember(System.Reflection.MemberInfo)">
            <summary>
            Returns true if a member was inherited from a base class,
            False if it is declared on the type it was retrieved from.
            
            <see cref="M:LCore.Extensions.ReflectionExt.IsDeclaredMember(System.Reflection.MemberInfo)"/>
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.IsTestAssembly(System.Reflection.Assembly)">
            <summary>
            Determines if an Assembly is a test assembly, 
            by checking if the assembly has the word "test" or "tests" in the name.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.GetRootPath(System.Reflection.Assembly)">
            <summary>
            Returns the root folder for an assembly, if you have access to its codebase
            </summary>
        </member>
        <member name="M:LCore.Extensions.ReflectionExt.FindClassFile(System.Type)">
            <summary>
            Finds a class's source file, if the file name matches the Type name
            </summary>
        </member>
        <member name="T:LCore.Extensions.NumberExt">
            <summary>
            Provides extensions for number types:
            int, long, short, float, double, etc.
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.AddEach(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            Adds <paramref name="AddNum" /> to each item in the list <paramref name="In" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Abs(System.Int32)">
            <summary>
            Returns the absolute value of <paramref name="In" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Abs(System.UInt32)">
            <summary>
            Returns the absolute value of <paramref name="In" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Abs(System.Int64)">
            <summary>
            Returns the absolute value of <paramref name="In" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Abs(System.UInt64)">
            <summary>
            Returns the absolute value of <paramref name="In" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Abs(System.Int16)">
            <summary>
            Returns the absolute value of <paramref name="In" />
            </summary>99
            <exception cref="T:System.OverflowException"><paramref name="In" /> equals <see cref="F:System.Int16.MinValue" />. </exception>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Abs(System.UInt16)">
            <summary>
            Returns the absolute value of <paramref name="In" />
            </summary>99
        </member>
        <member name="M:LCore.Extensions.NumberExt.Abs(System.Double)">
            <summary>
            Returns the absolute value of <paramref name="In" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Abs(System.Single)">
            <summary>
            Returns the absolute value of <paramref name="In" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Abs(System.SByte)">
            <summary>
            Returns the absolute value of <paramref name="In" />
            </summary>
            <exception cref="T:System.OverflowException"><paramref name="In" /> equals <see cref="F:System.SByte.MinValue" />. </exception>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Abs(System.Byte)">
            <summary>
            Returns the absolute value of <paramref name="In" />
            </summary>
            <exception cref="T:System.OverflowException"><paramref name="In" /> equals <see cref="F:System.SByte.MinValue" />. </exception>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Abs(System.Decimal)">
            <summary>
            Returns the absolute value of <paramref name="In" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.AsPercent(System.Single)">
            <summary>
            Returns the float <paramref name="In" />, multiplied by 100 and converted to an int.
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.AsPercent(System.Double)">
            <summary>
            Returns the double <paramref name="In" />, multiplied by 100 and converted to an int.
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Average(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Returns the average of all numbers in the source.
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Average(System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            Returns the average of all numbers in the source.
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Average(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Returns the average of all numbers in the source.
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Average(System.Collections.Generic.IEnumerable{System.UInt64})">
            <summary>
            Returns the average of all numbers in the source.
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Average(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Returns the average of all numbers in the source.
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Average(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns the average of all numbers in the source.
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.ConvertToBestMatch(LCore.Numbers.Number)">
            <summary>
            Converts <paramref name="Number"/> to the most restrictive number type possible
            without losing any precision.
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.DecimalPlaces(System.Int32)">
            <summary>
            Returns the number of decimal places used for the provided number.
            For non-floating point types this value is always 0.
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.DecimalPlaces(System.Int16)">
            <summary>
            Returns the number of decimal places used for the provided number.
            For non-floating point types this value is always 0.
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.DecimalPlaces(System.Int64)">
            <summary>
            Returns the number of decimal places used for the provided number.
            For non-floating point types this value is always 0.
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.DecimalPlaces(System.UInt32)">
            <summary>
            Returns the number of decimal places used for the provided number.
            For non-floating point types this value is always 0.
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.DecimalPlaces(System.UInt16)">
            <summary>
            Returns the number of decimal places used for the provided number.
            For non-floating point types this value is always 0.
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.DecimalPlaces(System.UInt64)">
            <summary>
            Returns the number of decimal places used for the provided number.
            For non-floating point types this value is always 0.
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.DecimalPlaces(System.Char)">
            <summary>
            Returns the number of decimal places used for the provided number.
            For non-floating point types this value is always 0.
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.DecimalPlaces(System.Byte)">
            <summary>
            Returns the number of decimal places used for the provided number.
            For non-floating point types this value is always 0.
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.DecimalPlaces(System.SByte)">
            <summary>
            Returns the number of decimal places used for the provided number.
            For non-floating point types this value is always 0.
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.DecimalPlaces(System.Decimal)">
            <summary>
            Returns the number of decimal places used for the provided number.
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.DecimalPlaces(System.Double)">
            <summary>
            Returns the number of decimal places used for the provided number.
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.DecimalPlaces(System.Single)">
            <summary>
            Returns the number of decimal places used for the provided number.
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Floor(System.Single)">
            <summary>
            Returns the floor of the float <paramref name="In" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Floor(System.Single,System.Int32)">
            <summary>
            Returns the floor of the float <paramref name="In" />.
            <paramref name="Decimals" /> must be at least 0.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Decimals" /> was less than 0.</exception>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Floor(System.Double)">
            <summary>
            Returns the floor of the double <paramref name="In" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Floor(System.Double,System.Int32)">
            <summary>
            Returns the floor of the float <paramref name="In" />.
            <paramref name="Decimals" /> must be at least 0.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Decimals" /> was less than 0.</exception>
        </member>
        <member name="M:LCore.Extensions.NumberExt.IsEven(System.Int32)">
            <summary>
            Returns whether the supplied number is Even
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.IsEven(System.Int64)">
            <summary>
            Returns whether the supplied number is Even
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.IsEven(System.Int16)">
            <summary>
            Returns whether the supplied number is Even
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.IsEven(System.UInt32)">
            <summary>
            Returns whether the supplied number is Even
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.IsEven(System.UInt64)">
            <summary>
            Returns whether the supplied number is Even
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.IsEven(System.Byte)">
            <summary>
            Returns whether the supplied number is Even
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.IsEven(System.SByte)">
            <summary>
            Returns whether the supplied number is Even
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.PercentageOf(System.Single,System.Single)">
            <summary>
            Returns an int, representing a percent (<paramref name="In" /> / <paramref name="Total" />).
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Total" /> was equal to 0.</exception>
        </member>
        <member name="M:LCore.Extensions.NumberExt.PercentageOf(System.Double,System.Double)">
            <summary>
            Returns an int, representing a percent (<paramref name="In" /> / <paramref name="Total" />).
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Total" /> was equal to 0.</exception>
        </member>
        <member name="M:LCore.Extensions.NumberExt.PercentageOf(System.Int32,System.Int32)">
            <summary>
            Returns an int, representing a percent (<paramref name="In" /> / <paramref name="Total" />).
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Total" /> was equal to than 0.</exception>
        </member>
        <member name="M:LCore.Extensions.NumberExt.PercentageOf(System.UInt32,System.UInt32)">
            <summary>
            Returns an int, representing a percent (<paramref name="In" /> / <paramref name="Total" />).
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Total" /> was equal to than 0.</exception>
        </member>
        <member name="M:LCore.Extensions.NumberExt.PercentageOf(System.Int16,System.Int16)">
            <summary>
            Returns an int, representing a percent (<paramref name="In" /> / <paramref name="Total" />).
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Total" /> was equal to 0.</exception>
        </member>
        <member name="M:LCore.Extensions.NumberExt.PercentageOf(System.Int64,System.Int64)">
            <summary>
            Returns an int, representing a percent (<paramref name="In" /> / <paramref name="Total" />).
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Total" /> was equal to 0.</exception>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Pow(System.Double,System.Double)">
            <summary>
            Raise <paramref name="Double"/> to the power of <paramref name="Power"/>.
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Pow(System.Int32,System.Double)">
            <summary>
            Raise <paramref name="Int"/> to the power of <paramref name="Power"/>.
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Pow(System.UInt32,System.Double)">
            <summary>
            Raise <paramref name="Int"/> to the power of <paramref name="Power"/>.
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Pow(System.Int16,System.Double)">
            <summary>
            Raise <paramref name="Short"/> to the power of <paramref name="Power"/>.
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Pow(System.UInt16,System.Double)">
            <summary>
            Raise <paramref name="UShort"/> to the power of <paramref name="Power"/>.
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Pow(System.Int64,System.Double)">
            <summary>
            Raise <paramref name="Long"/> to the power of <paramref name="Power"/>.
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Pow(System.UInt64,System.Double)">
            <summary>
            Raise <paramref name="Long"/> to the power of <paramref name="Power"/>.
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Pow(System.SByte,System.Double)">
            <summary>
            Raise <paramref name="Long"/> to the power of <paramref name="Power"/>.
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Pow(System.Byte,System.Double)">
            <summary>
            Raise <paramref name="Byte"/> to the power of <paramref name="Power"/>.
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Round(System.Single)">
            <summary>
            Returns the rounded integer of the float <paramref name="In" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Round(System.Single,System.Int32)">
            <summary>
            Returns the rounded integer of the float <paramref name="In" />
            <paramref name="Decimals" /> must be at least 0.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Decimals was less than 0.</exception>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Round(System.Double)">
            <summary>
            Returns the rounded integer of the double <paramref name="In" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Round(System.Double,System.Int32)">
            <summary>
            Returns the rounded integer of the double <paramref name="In" />
            <paramref name="Decimals" /> must be at least 0.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Decimals was less than 0.</exception>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Round(System.Decimal)">
            <summary>
            Returns the rounded integer of the float <paramref name="In" />
            </summary>
            <exception cref="T:System.OverflowException">The result is outside the range of a <see cref="T:System.Decimal" />.</exception>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Round(System.Decimal,System.Int32)">
            <summary>
            Returns the rounded integer of the float <paramref name="In" />
            <paramref name="DecimalPlaces" /> must be at least 0.
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Sqrt(System.Int32)">
            <summary>
            Returns the square root of the supplied number
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Sqrt(System.Int64)">
            <summary>
            Returns the square root of the supplied number
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Sqrt(System.Int16)">
            <summary>
            Returns the square root of the supplied number
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Sqrt(System.Double)">
            <summary>
            Returns the square root of the supplied number
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Sqrt(System.Single)">
            <summary>
            Returns the square root of the supplied number
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Sqrt(System.UInt32)">
            <summary>
            Returns the square root of the supplied number
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Sqrt(System.UInt64)">
            <summary>
            Returns the square root of the supplied number
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Sqrt(System.UInt16)">
            <summary>
            Returns the square root of the supplied number
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Sqrt(System.Byte)">
            <summary>
            Returns the square root of the supplied number
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Sqrt(System.SByte)">
            <summary>
            Returns the square root of the supplied number
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Sqrt(System.Decimal)">
            <summary>
            Returns the square root of the supplied number
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.SubtractEach(System.Collections.Generic.List{System.Int32},System.Int32)">
            <summary>
            Subtracts <paramref name="SubtractNum" /> to each item in the list <paramref name="In" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Returns the sum of all numbers in the source list.
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Sum(System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            Returns the sum of all numbers in the source list.
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Returns the sum of all numbers in the source list.
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Sum(System.Collections.Generic.IEnumerable{System.UInt64})">
            <summary>
            Returns the sum of all numbers in the source list.
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Sum(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Returns the sum of all numbers in the source list.
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Sum(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns the sum of all numbers in the source list.
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.To(System.Int32,System.Int32)">
            <summary>
            Creates an array of increasing or decreasing numbers 
            starting at <paramref name="From" /> and progressing until <paramref name="To" />.
            Array length will be |<paramref name="From" />-<paramref name="To" />|.
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.To(System.UInt32,System.UInt32)">
            <summary>
            Creates an array of increasing or decreasing numbers 
            starting at <paramref name="From" /> and progressing until <paramref name="To" />.
            Array length will be |<paramref name="From" />-<paramref name="To" />|.
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Wrap``1(System.Nullable{``0})">
            <summary>
            Wraps a number in a Number subclass, 
            allowing you to perform comparisons and operations across
            types.
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Wrap``1(``0)">
            <summary>
            Wraps a number in a Number subclass, 
            allowing you to perform comparisons and operations across
            types.
            </summary>
        </member>
        <member name="M:LCore.Extensions.NumberExt.Wrap(System.String)">
            <summary>
            Wraps a string in a Number subclass, 
            allowing you to perform comparisons and operations across
            types.
            </summary>
        </member>
        <member name="T:LCore.Extensions.IPersistAttribute">
            <summary>
            Base type of ISubClassPersistentAttribute and ITopLevelAttribute.
            Used to indicate that default persistence has been set:
            ISubClassPersistentAttribute: true
            ITopLevelAttribute: false
            </summary>
        </member>
        <member name="T:LCore.Extensions.ISubClassPersistentAttribute">
            <summary>
            Tag an Attribute with the ITopLevelAttribute interface and 
            L will, by default, scan all parent classes for your attribute type.
            Used within *.GetAttribute, *.GetAttributes, and *.HasAttribute.
            </summary>
        </member>
        <member name="T:LCore.Extensions.ITopLevelAttribute">
            <summary>
            Tag an Attribute with the ITopLevelAttribute interface and 
            L will, by default, only scan top level classes for your attribute type.
            Used within *.GetAttribute, *.GetAttributes, and *.HasAttribute.
            </summary>
        </member>
        <member name="T:LCore.Extensions.Logic_Extension_Explode">
            <summary>
            Logic method explosion extension methods.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``3(System.Func{``0,``2},System.Func{``1,``2})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``4(System.Func{``0,``3},System.Func{``1,``2,``3})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``5(System.Func{``0,``4},System.Func{``1,``2,``3,``4})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``3(System.Func{``0,``1,``2},System.Func{``2})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``4(System.Func{``0,``1,``3},System.Func{``2,``3})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``5(System.Func{``0,``1,``4},System.Func{``2,``3,``4})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``4(System.Func{``0,``1,``2,``3},System.Func{``3})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``5(System.Func{``0,``1,``2,``4},System.Func{``3,``4})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``5(System.Func{``0,``1,``2,``3,``4},System.Func{``4})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Supply``1(System.Action{``0},``0)">
            <summary>
            Returns a method with the first parameter removed. When the method is called, Obj will be supplied.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Supply``2(System.Action{``0,``1},``0)">
            <summary>
            Returns a method with the first parameter removed. When the method is called, Obj will be supplied.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Supply2``2(System.Action{``0,``1},``1)">
            <summary>
            Returns a method with the second parameter removed. When the method is called, Obj will be supplied.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Supply``3(System.Action{``0,``1,``2},``0)">
            <summary>
            Returns a method with the first parameter removed. When the method is called, Obj will be supplied.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Supply2``3(System.Action{``0,``1,``2},``1)">
            <summary>
            Returns a method with the second parameter removed. When the method is called, Obj will be supplied.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Supply3``3(System.Action{``0,``1,``2},``2)">
            <summary>
            Returns a method with the third parameter removed. When the method is called, Obj will be supplied.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Supply``4(System.Action{``0,``1,``2,``3},``0)">
            <summary>
            Returns a method with the first parameter removed. When the method is called, Obj will be supplied.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Supply2``4(System.Action{``0,``1,``2,``3},``1)">
            <summary>
            Returns a method with the second parameter removed. When the method is called, Obj will be supplied.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Supply3``4(System.Action{``0,``1,``2,``3},``2)">
            <summary>
            Returns a method with the third parameter removed. When the method is called, Obj will be supplied.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Supply4``4(System.Action{``0,``1,``2,``3},``3)">
            <summary>
            Returns a method with the fourth parameter removed. When the method is called, Obj will be supplied.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Supply``2(System.Func{``0,``1},``0)">
            <summary>
            Returns a method with the first parameter removed. When the method is called, Obj will be supplied.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Supply``3(System.Func{``0,``1,``2},``0)">
            <summary>
            Returns a method with the first parameter removed. When the method is called, Obj will be supplied.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Supply2``3(System.Func{``0,``1,``2},``1)">
            <summary>
            Returns a method with the second parameter removed. When the method is called, Obj will be supplied.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Supply``4(System.Func{``0,``1,``2,``3},``0)">
            <summary>
            Returns a method with the first parameter removed. When the method is called, Obj will be supplied.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Supply2``4(System.Func{``0,``1,``2,``3},``1)">
            <summary>
            Returns a method with the second parameter removed. When the method is called, Obj will be supplied.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Supply3``4(System.Func{``0,``1,``2,``3},``2)">
            <summary>
            Returns a method with the third parameter removed. When the method is called, Obj will be supplied.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Supply``5(System.Func{``0,``1,``2,``3,``4},``0)">
            <summary>
            Returns a method with the first parameter removed. When the method is called, Obj will be supplied.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Supply2``5(System.Func{``0,``1,``2,``3,``4},``1)">
            <summary>
            Returns a method with the second parameter removed. When the method is called, Obj will be supplied.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Supply3``5(System.Func{``0,``1,``2,``3,``4},``2)">
            <summary>
            Returns a method with the third parameter removed. When the method is called, Obj will be supplied.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Supply4``5(System.Func{``0,``1,``2,``3,``4},``3)">
            <summary>
            Returns a method with the fourth parameter removed. When the method is called, Obj will be supplied.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``3(System.Func{``0,``1,``2},System.Action{``0}[])">
            <summary>
            Returns a method that concatonates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``3(System.Func{``0,``1,``2},System.Action[])">
            <summary>
            Returns a method that concatonates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``4(System.Func{``0,``1,``2,``3},System.Action{``0,``1}[])">
            <summary>
            Returns a method that concatonates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``4(System.Func{``0,``1,``2,``3},System.Action{``0}[])">
            <summary>
            Returns a method that concatonates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``4(System.Func{``0,``1,``2,``3},System.Action[])">
            <summary>
            Returns a method that concatonates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``5(System.Func{``0,``1,``2,``3,``4},System.Action{``0,``1,``2}[])">
            <summary>
            Returns a method that concatonates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``5(System.Func{``0,``1,``2,``3,``4},System.Action{``0,``1}[])">
            <summary>
            Returns a method that concatonates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``5(System.Func{``0,``1,``2,``3,``4},System.Action{``0}[])">
            <summary>
            Returns a method that concatonates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``5(System.Func{``0,``1,``2,``3,``4},System.Action[])">
            <summary>
            Returns a method that concatonates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``2(System.Func{``0,``1},System.Func{``1}[])">
            <summary>
            Returns a method that concatonates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored. The last method in Acts will be the return value that is used.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``3(System.Func{``0,``1,``2},System.Func{``0,``2}[])">
            <summary>
            Returns a method that concatonates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored. The last method in Acts will be the return value that is used.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``3(System.Func{``0,``1,``2},System.Func{``2}[])">
            <summary>
            Returns a method that concatonates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored. The last method in Acts will be the return value that is used.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``4(System.Func{``0,``1,``2,``3},System.Func{``0,``3}[])">
            <summary>
            Returns a method that concatonates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored. The last method in Acts will be the return value that is used.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``4(System.Func{``0,``1,``2,``3},System.Func{``3}[])">
            <summary>
            Returns a method that concatonates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored. The last method in Acts will be the return value that is used.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``4(System.Func{``0,``1,``2,``3},System.Func{``0,``1,``3}[])">
            <summary>
            Returns a method that concatonates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored. The last method in Acts will be the return value that is used.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``5(System.Func{``0,``1,``2,``3,``4},System.Func{``0,``1,``2,``4}[])">
            <summary>
            Returns a method that concatonates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored. The last method in Acts will be the return value that is used.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``5(System.Func{``0,``1,``2,``3,``4},System.Func{``0,``1,``4}[])">
            <summary>
            Returns a method that concatonates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored. The last method in Acts will be the return value that is used.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``5(System.Func{``0,``1,``2,``3,``4},System.Func{``0,``4}[])">
            <summary>
            Returns a method that concatonates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored. The last method in Acts will be the return value that is used.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``5(System.Func{``0,``1,``2,``3,``4},System.Func{``4}[])">
            <summary>
            Returns a method that concatonates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored. The last method in Acts will be the return value that is used.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``1(System.Action,System.Func{``0})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Func{``10})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.Func{``11})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``13(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},System.Func{``12})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``14(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},System.Func{``13})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``15(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},System.Func{``14})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``16(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},System.Func{``15})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``17(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},System.Func{``16})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``7(System.Action{``0,``1,``2,``3,``4,``5},System.Func{``6})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``8(System.Action{``0,``1,``2,``3,``4,``5},System.Func{``6,``7})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``9(System.Action{``0,``1,``2,``3,``4,``5},System.Func{``6,``7,``8})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``10(System.Action{``0,``1,``2,``3,``4,``5},System.Func{``6,``7,``8,``9})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``8(System.Action{``0,``1,``2,``3,``4,``5,``6},System.Func{``7})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``9(System.Action{``0,``1,``2,``3,``4,``5,``6},System.Func{``7,``8})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``10(System.Action{``0,``1,``2,``3,``4,``5,``6},System.Func{``7,``8,``9})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},System.Func{``8})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},System.Func{``8,``9})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Func{``9})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``4(System.Action{``0,``1,``2},System.Func{``3})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``5(System.Action{``0,``1,``2},System.Func{``3,``4})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``6(System.Action{``0,``1,``2},System.Func{``3,``4,``5})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``7(System.Action{``0,``1,``2},System.Func{``3,``4,``5,``6})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``8(System.Action{``0,``1,``2},System.Func{``3,``4,``5,``6,``7})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``9(System.Action{``0,``1,``2},System.Func{``3,``4,``5,``6,``7,``8})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``10(System.Action{``0,``1,``2},System.Func{``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``5(System.Action{``0,``1,``2,``3},System.Func{``4})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``6(System.Action{``0,``1,``2,``3},System.Func{``4,``5})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``7(System.Action{``0,``1,``2,``3},System.Func{``4,``5,``6})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``8(System.Action{``0,``1,``2,``3},System.Func{``4,``5,``6,``7})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``9(System.Action{``0,``1,``2,``3},System.Func{``4,``5,``6,``7,``8})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``10(System.Action{``0,``1,``2,``3},System.Func{``4,``5,``6,``7,``8,``9})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``6(System.Action{``0,``1,``2,``3,``4},System.Func{``5})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``7(System.Action{``0,``1,``2,``3,``4},System.Func{``5,``6})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``8(System.Action{``0,``1,``2,``3,``4},System.Func{``5,``6,``7})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``9(System.Action{``0,``1,``2,``3,``4},System.Func{``5,``6,``7,``8})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``10(System.Action{``0,``1,``2,``3,``4},System.Func{``5,``6,``7,``8,``9})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``2(System.Action,System.Func{``0,``1})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``3(System.Action,System.Func{``0,``1,``2})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``4(System.Action,System.Func{``0,``1,``2,``3})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``5(System.Action,System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``6(System.Action,System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``7(System.Action,System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``8(System.Action,System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``9(System.Action,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``10(System.Action,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``11(System.Action,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``12(System.Action,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``13(System.Action,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``14(System.Action,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``15(System.Action,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``16(System.Action,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``17(System.Action,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``2(System.Action{``0},System.Func{``1})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``3(System.Action{``0},System.Func{``1,``2})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``4(System.Action{``0},System.Func{``1,``2,``3})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``5(System.Action{``0},System.Func{``1,``2,``3,``4})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``6(System.Action{``0},System.Func{``1,``2,``3,``4,``5})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``7(System.Action{``0},System.Func{``1,``2,``3,``4,``5,``6})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``8(System.Action{``0},System.Func{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``9(System.Action{``0},System.Func{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``10(System.Action{``0},System.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``3(System.Action{``0,``1},System.Func{``2})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``4(System.Action{``0,``1},System.Func{``2,``3})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``5(System.Action{``0,``1},System.Func{``2,``3,``4})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``6(System.Action{``0,``1},System.Func{``2,``3,``4,``5})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``7(System.Action{``0,``1},System.Func{``2,``3,``4,``5,``6})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``8(System.Action{``0,``1},System.Func{``2,``3,``4,``5,``6,``7})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``9(System.Action{``0,``1},System.Func{``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``10(System.Action{``0,``1},System.Func{``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``1(System.Func{``0},System.Action)">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``2(System.Func{``1},System.Action{``0})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``3(System.Func{``2},System.Action{``0,``1})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``4(System.Func{``3},System.Action{``0,``1,``2})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``5(System.Func{``4},System.Action{``0,``1,``2,``3})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``2(System.Func{``0,``1},System.Action)">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``3(System.Func{``0,``2},System.Action{``1})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``4(System.Func{``0,``3},System.Action{``1,``2})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``5(System.Func{``0,``4},System.Action{``1,``2,``3})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``3(System.Func{``0,``1,``2},System.Action)">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``4(System.Func{``0,``1,``3},System.Action{``2})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``5(System.Func{``0,``1,``4},System.Action{``2,``3})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``4(System.Func{``0,``1,``2,``3},System.Action)">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``5(System.Func{``0,``1,``2,``4},System.Action{``3})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``5(System.Func{``0,``1,``2,``3,``4},System.Action)">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``1(System.Func{``0},System.Func{``0})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``2(System.Func{``1},System.Func{``0,``1})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``3(System.Func{``2},System.Func{``0,``1,``2})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``4(System.Func{``3},System.Func{``0,``1,``2,``3})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``5(System.Func{``4},System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``2(System.Func{``0,``1},System.Func{``1})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then(System.Action,System.Action[])">
            <summary>
            Joins multiple actions together, performing them in order.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``1(System.Action{``0},System.Action{``0}[])">
            <summary>
            Joins multiple actions together, performing them in order.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``2(System.Action{``0,``1},System.Action{``0,``1}[])">
            <summary>
            Joins multiple actions together, performing them in order.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``3(System.Action{``0,``1,``2},System.Action{``0,``1,``2}[])">
            <summary>
            Joins multiple actions together, performing them in order.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``4(System.Action{``0,``1,``2,``3},System.Action{``0,``1,``2,``3}[])">
            <summary>
            Joins multiple actions together, performing them in order.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``1(System.Action,System.Func{``0}[])">
            <summary>
            Joins multiple actions together, performing them in order.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``2(System.Action{``0},System.Func{``0,``1}[])">
            <summary>
            Joins multiple actions together, performing them in order.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``3(System.Action{``0,``1},System.Func{``0,``1,``2}[])">
            <summary>
            Joins multiple actions together, performing them in order.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``4(System.Action{``0,``1,``2},System.Func{``0,``1,``2,``3}[])">
            <summary>
            Joins multiple actions together, performing them in order.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``5(System.Action{``0,``1,``2,``3},System.Func{``0,``1,``2,``3,``4}[])">
            <summary>
            Joins multiple actions together, performing them in order.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``1(System.Func{``0},System.Action[])">
            <summary>
            Joins multiple actions together, performing them in order.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``2(System.Func{``0,``1},System.Action{``0}[])">
            <summary>
            Joins multiple actions together, performing them in order.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``3(System.Func{``0,``1,``2},System.Action{``0,``1}[])">
            <summary>
            Joins multiple actions together, performing them in order.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``4(System.Func{``0,``1,``2,``3},System.Action{``0,``1,``2}[])">
            <summary>
            Joins multiple actions together, performing them in order.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``5(System.Func{``0,``1,``2,``3,``4},System.Action{``0,``1,``2,``3}[])">
            <summary>
            Joins multiple actions together, performing them in order.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``1(System.Func{``0},System.Func{``0}[])">
            <summary>
            Joins multiple actions together, performing them in order.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``2(System.Func{``0,``1},System.Func{``0,``1}[])">
            <summary>
            Joins multiple actions together, performing them in order.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``3(System.Func{``0,``1,``2},System.Func{``0,``1,``2}[])">
            <summary>
            Joins multiple actions together, performing them in order.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``4(System.Func{``0,``1,``2,``3},System.Func{``0,``1,``2,``3}[])">
            <summary>
            Joins multiple actions together, performing them in order.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``5(System.Func{``0,``1,``2,``3,``4},System.Func{``0,``1,``2,``3,``4}[])">
            <summary>
            Joins multiple actions together, performing them in order.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``1(System.Action{``0},System.Action[])">
            <summary>
            Returns a method that concatonates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``2(System.Action{``0,``1},System.Action{``0}[])">
            <summary>
            Returns a method that concatonates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``2(System.Action{``0,``1},System.Action[])">
            <summary>
            Returns a method that concatonates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``3(System.Action{``0,``1,``2},System.Action{``0,``1}[])">
            <summary>
            Returns a method that concatonates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``3(System.Action{``0,``1,``2},System.Action{``0}[])">
            <summary>
            Returns a method that concatonates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``3(System.Action{``0,``1,``2},System.Action[])">
            <summary>
            Returns a method that concatonates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``4(System.Action{``0,``1,``2,``3},System.Action{``0,``1,``2}[])">
            <summary>
            Returns a method that concatonates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``4(System.Action{``0,``1,``2,``3},System.Action{``0,``1}[])">
            <summary>
            Returns a method that concatonates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``4(System.Action{``0,``1,``2,``3},System.Action{``0}[])">
            <summary>
            Returns a method that concatonates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``4(System.Action{``0,``1,``2,``3},System.Action[])">
            <summary>
            Returns a method that concatonates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``2(System.Action{``0},System.Func{``1}[])">
            <summary>
            Returns a method that concatonates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored. The last method in Acts will be the return value that is used.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``3(System.Action{``0,``1},System.Func{``0,``2}[])">
            <summary>
            Returns a method that concatonates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored. The last method in Acts will be the return value that is used.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``4(System.Action{``0,``1,``2},System.Func{``0,``1,``3}[])">
            <summary>
            Returns a method that concatonates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored. The last method in Acts will be the return value that is used.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``3(System.Action{``0,``1},System.Func{``2}[])">
            <summary>
            Returns a method that concatonates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored. The last method in Acts will be the return value that is used.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``4(System.Action{``0,``1,``2},System.Func{``3}[])">
            <summary>
            Returns a method that concatonates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored. The last method in Acts will be the return value that is used.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``4(System.Action{``0,``1,``2},System.Func{``0,``3}[])">
            <summary>
            Returns a method that concatonates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored. The last method in Acts will be the return value that is used.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``5(System.Action{``0,``1,``2,``3},System.Func{``0,``1,``2,``4}[])">
            <summary>
            Returns a method that concatonates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored. The last method in Acts will be the return value that is used.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``5(System.Action{``0,``1,``2,``3},System.Func{``0,``1,``4}[])">
            <summary>
            Returns a method that concatonates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored. The last method in Acts will be the return value that is used.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``5(System.Action{``0,``1,``2,``3},System.Func{``0,``4}[])">
            <summary>
            Returns a method that concatonates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored. The last method in Acts will be the return value that is used.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``5(System.Action{``0,``1,``2,``3},System.Func{``4}[])">
            <summary>
            Returns a method that concatonates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored. The last method in Acts will be the return value that is used.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then``2(System.Func{``0,``1},System.Action[])">
            <summary>
            Returns a method that concatonates In with Acts. Parameters are shared. Any missing parameters in In that are missing from Acts are ignored.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Yield2``3(System.Func{``0,``2,``1,``2})">
            <summary>
            Takes an Action and returns a Func that returns the second parameter after the action is performed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Yield3``3(System.Func{``0,``1,``2,``2})">
            <summary>
            Takes an Action and returns a Func that returns the third parameter after the action is performed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Yield``4(System.Func{``3,``0,``1,``2,``3})">
            <summary>
            Takes an Action and returns a Func that returns the first parameter after the action is performed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Yield2``4(System.Func{``0,``3,``1,``2,``3})">
            <summary>
            Takes an Action and returns a Func that returns the second parameter after the action is performed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Yield3``4(System.Func{``0,``1,``3,``2,``3})">
            <summary>
            Takes an Action and returns a Func that returns the third parameter after the action is performed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Yield4``4(System.Func{``0,``1,``2,``3,``3})">
            <summary>
            Takes an Action and returns a Func that returns the fourth parameter after the action is performed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Execute(System.Func{System.Action})">
            <summary>
            For a method Act that returns a method, Returns a method that executes the Method passed and its result.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Execute``1(System.Func{System.Action{``0}})">
            <summary>
            For a method Act that returns a method, Returns a method that executes the Method passed and its result.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Execute``2(System.Func{System.Action{``0,``1}})">
            <summary>
            For a method Act that returns a method, Returns a method that executes the Method passed and its result.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Execute``3(System.Func{System.Action{``0,``1,``2}})">
            <summary>
            For a method Act that returns a method, Returns a method that executes the Method passed and its result.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Execute``4(System.Func{System.Action{``0,``1,``2,``3}})">
            <summary>
            For a method Act that returns a method, Returns a method that executes the Method passed and its result.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Execute``1(System.Func{System.Func{``0}})">
            <summary>
            For a method Act that returns a method, Returns a method that executes the Method passed and its result.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Execute``2(System.Func{System.Func{``0,``1}})">
            <summary>
            For a method Act that returns a method, Returns a method that executes the Method passed and its result.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Execute``3(System.Func{System.Func{``0,``1,``2}})">
            <summary>
            For a method Act that returns a method, Returns a method that executes the Method passed and its result.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Execute``4(System.Func{System.Func{``0,``1,``2,``3}})">
            <summary>
            For a method Act that returns a method, Returns a method that executes the Method passed and its result.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Execute``5(System.Func{System.Func{``0,``1,``2,``3,``4}})">
            <summary>
            For a method Act that returns a method, Returns a method that executes the Method passed and its result.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Defaults``4(System.Func{``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            If the arguments passed are null or empty, the Default values are used instead.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Defaults``5(System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            If the arguments passed are null or empty, the Default values are used instead.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Require``1(System.Action{``0},System.String)">
            <summary>
            Returns a function that requires the first parameter to be non-null. If the parameter is null, an exception is thrown with the parameter name.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Require``2(System.Action{``0,``1},System.String)">
            <summary>
            Returns a function that requires the first parameter to be non-null. If the parameter is null, an exception is thrown with the parameter name.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Require2``2(System.Action{``0,``1},System.String)">
            <summary>
            Returns a function that requires the first parameter to be non-null. If the parameter is null, an exception is thrown with the parameter name.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Require``3(System.Action{``0,``1,``2},System.String)">
            <summary>
            Returns a function that requires the first parameter to be non-null. If the parameter is null, an exception is thrown with the parameter name.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Require2``3(System.Action{``0,``1,``2},System.String)">
            <summary>
            Returns a function that requires the first parameter to be non-null. If the parameter is null, an exception is thrown with the parameter name.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Require3``3(System.Action{``0,``1,``2},System.String)">
            <summary>
            Returns a function that requires the first parameter to be non-null. If the parameter is null, an exception is thrown with the parameter name.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Require``4(System.Action{``0,``1,``2,``3},System.String)">
            <summary>
            Returns a function that requires the first parameter to be non-null. If the parameter is null, an exception is thrown with the parameter name.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Require2``4(System.Action{``0,``1,``2,``3},System.String)">
            <summary>
            Returns a function that requires the first parameter to be non-null. If the parameter is null, an exception is thrown with the parameter name.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Require3``4(System.Action{``0,``1,``2,``3},System.String)">
            <summary>
            Returns a function that requires the first parameter to be non-null. If the parameter is null, an exception is thrown with the parameter name.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Require4``4(System.Action{``0,``1,``2,``3},System.String)">
            <summary>
            Returns a function that requires the first parameter to be non-null. If the parameter is null, an exception is thrown with the parameter name.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Require``2(System.Func{``0,``1},System.String)">
            <summary>
            Returns a function that requires the first parameter to be non-null. If the parameter is null, an exception is thrown with the parameter name.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Require``3(System.Func{``0,``1,``2},System.String)">
            <summary>
            Returns a function that requires the first parameter to be non-null. If the parameter is null, an exception is thrown with the parameter name.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Require2``3(System.Func{``0,``1,``2},System.String)">
            <summary>
            Returns a function that requires the first parameter to be non-null. If the parameter is null, an exception is thrown with the parameter name.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Require``4(System.Func{``0,``1,``2,``3},System.String)">
            <summary>
            Returns a function that requires the first parameter to be non-null. If the parameter is null, an exception is thrown with the parameter name.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Require2``4(System.Func{``0,``1,``2,``3},System.String)">
            <summary>
            Returns a function that requires the first parameter to be non-null. If the parameter is null, an exception is thrown with the parameter name.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Require3``4(System.Func{``0,``1,``2,``3},System.String)">
            <summary>
            Returns a function that requires the first parameter to be non-null. If the parameter is null, an exception is thrown with the parameter name.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Require``5(System.Func{``0,``1,``2,``3,``4},System.String)">
            <summary>
            Returns a function that requires the first parameter to be non-null. If the parameter is null, an exception is thrown with the parameter name.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Require2``5(System.Func{``0,``1,``2,``3,``4},System.String)">
            <summary>
            Returns a function that requires the first parameter to be non-null. If the parameter is null, an exception is thrown with the parameter name.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Require3``5(System.Func{``0,``1,``2,``3,``4},System.String)">
            <summary>
            Returns a function that requires the first parameter to be non-null. If the parameter is null, an exception is thrown with the parameter name.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Require4``5(System.Func{``0,``1,``2,``3,``4},System.String)">
            <summary>
            Returns a function that requires the first parameter to be non-null. If the parameter is null, an exception is thrown with the parameter name.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.RequireAll``2(System.Action{``0,``1},System.String,System.String)">
            <summary>
            Returns a function that requires all parameters to be non-null. If any parameter is null, an exception is thrown with the parameter name.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.RequireAll``3(System.Action{``0,``1,``2},System.String,System.String,System.String)">
            <summary>
            Returns a function that requires all parameters to be non-null. If any parameter is null, an exception is thrown with the parameter name.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.RequireAll``4(System.Action{``0,``1,``2,``3},System.String,System.String,System.String,System.String)">
            <summary>
            Returns a function that requires all parameters to be non-null. If any parameter is null, an exception is thrown with the parameter name.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.RequireAll``3(System.Func{``0,``1,``2},System.String,System.String)">
            <summary>
            Returns a function that requires all parameters to be non-null. If any parameter is null, an exception is thrown with the parameter name.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.RequireAll``4(System.Func{``0,``1,``2,``3},System.String,System.String,System.String)">
            <summary>
            Returns a function that requires all parameters to be non-null. If any parameter is null, an exception is thrown with the parameter name.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.RequireAll``5(System.Func{``0,``1,``2,``3,``4},System.String,System.String,System.String,System.String)">
            <summary>
            Returns a function that requires all parameters to be non-null. If any parameter is null, an exception is thrown with the parameter name.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Yield``1(System.Action{``0})">
            <summary>
            Takes an Action and returns a Func that returns the first parameter after the action is performed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Yield``2(System.Action{``1,``0})">
            <summary>
            Takes an Action and returns a Func that returns the first parameter after the action is performed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Yield2``2(System.Action{``0,``1})">
            <summary>
            Takes an Action and returns a Func that returns the second parameter after the action is performed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Yield``3(System.Action{``2,``0,``1})">
            <summary>
            Takes an Action and returns a Func that returns the first parameter after the action is performed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Yield2``3(System.Action{``0,``2,``1})">
            <summary>
            Takes an Action and returns a Func that returns the second parameter after the action is performed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Yield3``3(System.Action{``0,``1,``2})">
            <summary>
            Takes an Action and returns a Func that returns the third parameter after the action is performed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Yield``4(System.Action{``3,``0,``1,``2})">
            <summary>
            Takes an Action and returns a Func that returns the first parameter after the action is performed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Yield2``4(System.Action{``0,``3,``1,``2})">
            <summary>
            Takes an Action and returns a Func that returns the second parameter after the action is performed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Yield3``4(System.Action{``0,``1,``3,``2})">
            <summary>
            Takes an Action and returns a Func that returns the third parameter after the action is performed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Yield4``4(System.Action{``0,``1,``2,``3})">
            <summary>
            Takes an Action and returns a Func that returns the fourth parameter after the action is performed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Yield``1(System.Func{``0,``0})">
            <summary>
            Takes an Action and returns a Func that returns the first parameter after the action is performed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Yield``2(System.Func{``1,``0,``1})">
            <summary>
            Takes an Action and returns a Func that returns the first parameter after the action is performed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Yield2``2(System.Func{``0,``1,``1})">
            <summary>
            Takes an Action and returns a Func that returns the second parameter after the action is performed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Yield``3(System.Func{``2,``0,``1,``2})">
            <summary>
            Takes an Action and returns a Func that returns the first parameter after the action is performed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Return``5(System.Action{``0,``1,``2,``3},``4)">
            <summary>
            Returns a function that converts an action to a Func, returning the specified value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Return``1(System.Func{``0},``0)">
            <summary>
            Returns a function that Overrides the return value of In with the specified value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Return``2(System.Func{``0,``1},``1)">
            <summary>
            Returns a function that converts an action to a Func, returning the specified value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Return``3(System.Func{``0,``1,``2},``2)">
            <summary>
            Returns a function that converts an action to a Func, returning the specified value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Return``4(System.Func{``0,``1,``2,``3},``3)">
            <summary>
            Returns a function that converts an action to a Func, returning the specified value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Return``5(System.Func{``0,``1,``2,``3,``4},``4)">
            <summary>
            Returns a function that converts an action to a Func, returning the specified value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Rotate``2(System.Action{``0,``1})">
            <summary>
            Returns a function that rotates the list of parameters to the right.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Rotate``3(System.Action{``0,``1,``2})">
            <summary>
            Returns a function that rotates the list of parameters to the right.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Rotate``4(System.Action{``0,``1,``2,``3})">
            <summary>
            Returns a function that rotates the list of parameters to the right.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Rotate``3(System.Func{``0,``1,``2})">
            <summary>
            Returns a function that rotates the list of parameters to the right.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Rotate``4(System.Func{``0,``1,``2,``3})">
            <summary>
            Returns a function that rotates the list of parameters to the right.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Rotate``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Returns a function that rotates the list of parameters to the right.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.RotateBack``2(System.Action{``0,``1})">
            <summary>
            Returns a function that rotates the list of parameters to the left.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Default``1(System.Action{``0},``0)">
            <summary>
            If the first argument passed is null or empty, the Default value is used instead.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Default``2(System.Action{``0,``1},``0)">
            <summary>
            If the first argument passed is null or empty, the Default value is used instead.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Default2``2(System.Action{``0,``1},``1)">
            <summary>
            If the second argument passed is null or empty, the Default value is used instead.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Default``3(System.Action{``0,``1,``2},``0)">
            <summary>
            If the first argument passed is null or empty, the Default value is used instead.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Default2``3(System.Action{``0,``1,``2},``1)">
            <summary>
            If the second argument passed is null or empty, the Default value is used instead.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Default3``3(System.Action{``0,``1,``2},``2)">
            <summary>
            If the third argument passed is null or empty, the Default value is used instead.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Default``4(System.Action{``0,``1,``2,``3},``0)">
            <summary>
            If the first argument passed is null or empty, the Default value is used instead.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Default2``4(System.Action{``0,``1,``2,``3},``1)">
            <summary>
            If the second argument passed is null or empty, the Default value is used instead.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Default3``4(System.Action{``0,``1,``2,``3},``2)">
            <summary>
            If the third argument passed is null or empty, the Default value is used instead.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Default4``4(System.Action{``0,``1,``2,``3},``3)">
            <summary>
            If the fourth argument passed is null or empty, the Default value is used instead.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Default``2(System.Func{``0,``1},``0)">
            <summary>
            If the first argument passed is null or empty, the Default value is used instead.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Default``3(System.Func{``0,``1,``2},``0)">
            <summary>
            If the first argument passed is null or empty, the Default value is used instead.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Default2``3(System.Func{``0,``1,``2},``1)">
            <summary>
            If the second argument passed is null or empty, the Default value is used instead.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Default``4(System.Func{``0,``1,``2,``3},``0)">
            <summary>
            If the first argument passed is null or empty, the Default value is used instead.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Default2``4(System.Func{``0,``1,``2,``3},``1)">
            <summary>
            If the second argument passed is null or empty, the Default value is used instead.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Default3``4(System.Func{``0,``1,``2,``3},``2)">
            <summary>
            If the third argument passed is null or empty, the Default value is used instead.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Default``5(System.Func{``0,``1,``2,``3,``4},``0)">
            <summary>
            If the first argument passed is null or empty, the Default value is used instead.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Default2``5(System.Func{``0,``1,``2,``3,``4},``1)">
            <summary>
            If the second argument passed is null or empty, the Default value is used instead.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Default3``5(System.Func{``0,``1,``2,``3,``4},``2)">
            <summary>
            If the third argument passed is null or empty, the Default value is used instead.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Default4``5(System.Func{``0,``1,``2,``3,``4},``3)">
            <summary>
            If the fourth argument passed is null or empty, the Default value is used instead.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Defaults``2(System.Action{``0,``1},``0,``1)">
            <summary>
            If the arguments passed are null or empty, the Default values are used instead.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Defaults``3(System.Action{``0,``1,``2},``0,``1,``2)">
            <summary>
            If the arguments passed are null or empty, the Default values are used instead.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Defaults``4(System.Action{``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            If the arguments passed are null or empty, the Default values are used instead.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Defaults``3(System.Func{``0,``1,``2},``0,``1)">
            <summary>
            If the arguments passed are null or empty, the Default values are used instead.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Loop``1(System.Action{``0})">
            <summary>
            Loop takes an action and returns a loop function, that takes an index and returns true to continue.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Loop``2(System.Action{``0,``1})">
            <summary>
            Loop takes an action and returns a loop function, that takes an index and returns true to continue.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Loop``3(System.Action{``0,``1,``2})">
            <summary>
            Loop takes an action and returns a loop function, that takes an index and returns true to continue.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.To(System.Int32,System.Int32,System.Action)">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.To``15(System.Int32,System.Int32,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.To``16(System.Int32,System.Int32,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.To``1(System.Int32,System.Int32,System.Action{``0})">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.To``2(System.Int32,System.Int32,System.Action{``0,``1})">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.To``3(System.Int32,System.Int32,System.Action{``0,``1,``2})">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.To``4(System.Int32,System.Int32,System.Action{``0,``1,``2,``3})">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.To``5(System.Int32,System.Int32,System.Action{``0,``1,``2,``3,``4})">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.To``6(System.Int32,System.Int32,System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.To``7(System.Int32,System.Int32,System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.To``8(System.Int32,System.Int32,System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.To``9(System.Int32,System.Int32,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.To``10(System.Int32,System.Int32,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.To``11(System.Int32,System.Int32,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.To``12(System.Int32,System.Int32,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.To``13(System.Int32,System.Int32,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.To``14(System.Int32,System.Int32,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.To(System.Int32,System.Int32,System.Action{System.Int32})">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.For(System.Int32,System.Int32,System.Func{System.Int32,System.Boolean})">
            <summary>
            Loops an Action that takes an index and returns false to break out of the loop. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.For``1(System.Int32,System.Int32,System.Func{System.Int32,``0,System.Boolean})">
            <summary>
            Loops an Action that takes an index and returns false to break out of the loop. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.For``2(System.Int32,System.Int32,System.Func{System.Int32,``0,``1,System.Boolean})">
            <summary>
            Loops an Action that takes an index and returns false to break out of the loop. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.For``3(System.Int32,System.Int32,System.Func{System.Int32,``0,``1,``2,System.Boolean})">
            <summary>
            Loops an Action that takes an index and returns false to break out of the loop. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.For``4(System.Int32,System.Int32,System.Func{System.Int32,``0,``1,``2,``3,System.Boolean})">
            <summary>
            Loops an Action that takes an index and returns false to break out of the loop. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.For``5(System.Int32,System.Int32,System.Func{System.Int32,``0,``1,``2,``3,``4,System.Boolean})">
            <summary>
            Loops an Action that takes an index and returns false to break out of the loop. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.For``6(System.Int32,System.Int32,System.Func{System.Int32,``0,``1,``2,``3,``4,``5,System.Boolean})">
            <summary>
            Loops an Action that takes an index and returns false to break out of the loop. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.For``7(System.Int32,System.Int32,System.Func{System.Int32,``0,``1,``2,``3,``4,``5,``6,System.Boolean})">
            <summary>
            Loops an Action that takes an index and returns false to break out of the loop. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.For``8(System.Int32,System.Int32,System.Func{System.Int32,``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean})">
            <summary>
            Loops an Action that takes an index and returns false to break out of the loop. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.For``9(System.Int32,System.Int32,System.Func{System.Int32,``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean})">
            <summary>
            Loops an Action that takes an index and returns false to break out of the loop. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.For``10(System.Int32,System.Int32,System.Func{System.Int32,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Boolean})">
            <summary>
            Loops an Action that takes an index and returns false to break out of the loop. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.For``11(System.Int32,System.Int32,System.Func{System.Int32,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Boolean})">
            <summary>
            Loops an Action that takes an index and returns false to break out of the loop. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.For``12(System.Int32,System.Int32,System.Func{System.Int32,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Boolean})">
            <summary>
            Loops an Action that takes an index and returns false to break out of the loop. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.For``13(System.Int32,System.Int32,System.Func{System.Int32,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Boolean})">
            <summary>
            Loops an Action that takes an index and returns false to break out of the loop. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.For``14(System.Int32,System.Int32,System.Func{System.Int32,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Boolean})">
            <summary>
            Loops an Action that takes an index and returns false to break out of the loop. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.For``15(System.Int32,System.Int32,System.Func{System.Int32,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Boolean})">
            <summary>
            Loops an Action that takes an index and returns false to break out of the loop. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Do``1(System.Func{``0})">
            <summary>
            Returns an Action from the supplied Func. The return value is discarded.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Do``2(System.Func{``0,``1})">
            <summary>
            Returns an Action from the supplied Func. The return value is discarded.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Do``3(System.Func{``0,``1,``2})">
            <summary>
            Returns an Action from the supplied Func. The return value is discarded.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Do``4(System.Func{``0,``1,``2,``3})">
            <summary>
            Returns an Action from the supplied Func. The return value is discarded.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Do``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Returns an Action from the supplied Func. The return value is discarded.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Do``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            Returns an Action from the supplied Func. The return value is discarded.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Do``7(System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Returns an Action from the supplied Func. The return value is discarded.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Do``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Returns an Action from the supplied Func. The return value is discarded.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Do``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Returns an Action from the supplied Func. The return value is discarded.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Do``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Returns an Action from the supplied Func. The return value is discarded.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Do``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Returns an Action from the supplied Func. The return value is discarded.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Do``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Returns an Action from the supplied Func. The return value is discarded.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Do``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Returns an Action from the supplied Func. The return value is discarded.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Do``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Returns an Action from the supplied Func. The return value is discarded.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Do``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Returns an Action from the supplied Func. The return value is discarded.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Do``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Returns an Action from the supplied Func. The return value is discarded.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Do``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>
            Returns an Action from the supplied Func. The return value is discarded.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Cache``1(System.Func{``0},System.String)">
            <summary>
            Caches the results of In using a Unique CacheID, combined with the string representation of all parameters.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Cache``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.String)">
            <summary>
            Caches the results of In using a Unique CacheID, combined with the string representation of all parameters.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Cache``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},System.String)">
            <summary>
            Caches the results of In using a Unique CacheID, combined with the string representation of all parameters.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Cache``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},System.String)">
            <summary>
            Caches the results of In using a Unique CacheID, combined with the string representation of all parameters.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Cache``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},System.String)">
            <summary>
            Caches the results of In using a Unique CacheID, combined with the string representation of all parameters.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Cache``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},System.String)">
            <summary>
            Caches the results of In using a Unique CacheID, combined with the string representation of all parameters.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Cache``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},System.String)">
            <summary>
            Caches the results of In using a Unique CacheID, combined with the string representation of all parameters.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Cache``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16},System.String)">
            <summary>
            Caches the results of In using a Unique CacheID, combined with the string representation of all parameters.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Cache``2(System.Func{``0,``1},System.String)">
            <summary>
            Caches the results of In using a Unique CacheID, combined with the string representation of all parameters.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Cache``3(System.Func{``0,``1,``2},System.String)">
            <summary>
            Caches the results of In using a Unique CacheID, combined with the string representation of all parameters.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Cache``4(System.Func{``0,``1,``2,``3},System.String)">
            <summary>
            Caches the results of In using a Unique CacheID, combined with the string representation of all parameters.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Cache``5(System.Func{``0,``1,``2,``3,``4},System.String)">
            <summary>
            Caches the results of In using a Unique CacheID, combined with the string representation of all parameters.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Cache``6(System.Func{``0,``1,``2,``3,``4,``5},System.String)">
            <summary>
            Caches the results of In using a Unique CacheID, combined with the string representation of all parameters.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Cache``7(System.Func{``0,``1,``2,``3,``4,``5,``6},System.String)">
            <summary>
            Caches the results of In using a Unique CacheID, combined with the string representation of all parameters.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Cache``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.String)">
            <summary>
            Caches the results of In using a Unique CacheID, combined with the string representation of all parameters.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Cache``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.String)">
            <summary>
            Caches the results of In using a Unique CacheID, combined with the string representation of all parameters.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Cache``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.String)">
            <summary>
            Caches the results of In using a Unique CacheID, combined with the string representation of all parameters.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``1(System.Action{``0},System.Func{``0})">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``2(System.Action{``0,``1},System.Func{``0})">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``3(System.Action{``0,``1,``2},System.Func{``0})">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``4(System.Action{``0,``1,``2,``3},System.Func{``0})">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``5(System.Action{``0,``1,``2,``3,``4},System.Func{``0})">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``6(System.Action{``0,``1,``2,``3,``4,``5},System.Func{``0})">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``7(System.Action{``0,``1,``2,``3,``4,``5,``6},System.Func{``0})">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},System.Func{``0})">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Func{``0})">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Func{``0})">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.Func{``0})">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},System.Func{``0})">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``13(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},System.Func{``0})">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``14(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},System.Func{``0})">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``15(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},System.Func{``0})">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``16(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},System.Func{``0})">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``2(System.Func{``0,``1},System.Func{``0})">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``3(System.Func{``0,``1,``2},System.Func{``0})">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``4(System.Func{``0,``1,``2,``3},System.Func{``0})">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``5(System.Func{``0,``1,``2,``3,``4},System.Func{``0})">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``6(System.Func{``0,``1,``2,``3,``4,``5},System.Func{``0})">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``7(System.Func{``0,``1,``2,``3,``4,``5,``6},System.Func{``0})">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Func{``0})">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Func{``0})">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Func{``0})">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.Func{``0})">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},System.Func{``0})">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},System.Func{``0})">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},System.Func{``0})">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},System.Func{``0})">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},System.Func{``0})">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16},System.Func{``0})">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``1(System.Action{``0},``0)">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``7(System.Action{``0,``1,``2,``3,``4,``5,``6},``0)">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},``0)">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0)">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0)">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0)">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0)">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``13(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0)">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``14(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``0)">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``15(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``0)">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``16(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``0)">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``2(System.Action{``0,``1},``0)">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``3(System.Action{``0,``1,``2},``0)">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``4(System.Action{``0,``1,``2,``3},``0)">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``5(System.Action{``0,``1,``2,``3,``4},``0)">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``6(System.Action{``0,``1,``2,``3,``4,``5},``0)">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``2(System.Func{``0,``1},``0)">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``3(System.Func{``0,``1,``2},``0)">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``4(System.Func{``0,``1,``2,``3},``0)">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``5(System.Func{``0,``1,``2,``3,``4},``0)">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``6(System.Func{``0,``1,``2,``3,``4,``5},``0)">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``7(System.Func{``0,``1,``2,``3,``4,``5,``6},``0)">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},``0)">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0)">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0)">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0)">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0)">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0)">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``0)">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``0)">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``0)">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16},``0)">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set2``2(System.Action{``0,``1},``1)">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set2``3(System.Action{``0,``1,``2},``1)">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set2``4(System.Action{``0,``1,``2,``3},``1)">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set2``5(System.Action{``0,``1,``2,``3,``4},``1)">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set2``6(System.Action{``0,``1,``2,``3,``4,``5},``1)">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set2``7(System.Action{``0,``1,``2,``3,``4,``5,``6},``1)">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set2``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},``1)">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set2``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},``1)">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set2``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``1)">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set2``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``1)">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set2``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``1)">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set2``13(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``1)">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set2``14(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``1)">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set2``15(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``1)">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set2``16(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``1)">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set2``3(System.Func{``0,``1,``2},``1)">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set2``7(System.Func{``0,``1,``2,``3,``4,``5,``6},``1)">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set2``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},``1)">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set2``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},``1)">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set2``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``1)">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set2``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``1)">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set2``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``1)">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set2``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``1)">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set2``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``1)">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set2``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``1)">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set2``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``1)">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set2``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16},``1)">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set2``4(System.Func{``0,``1,``2,``3},``1)">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set2``5(System.Func{``0,``1,``2,``3,``4},``1)">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set2``6(System.Func{``0,``1,``2,``3,``4,``5},``1)">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set3``3(System.Action{``0,``1,``2},``2)">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set3``4(System.Action{``0,``1,``2,``3},``2)">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set3``5(System.Action{``0,``1,``2,``3,``4},``2)">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set3``6(System.Action{``0,``1,``2,``3,``4,``5},``2)">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set3``7(System.Action{``0,``1,``2,``3,``4,``5,``6},``2)">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set3``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},``2)">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set3``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},``2)">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set3``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``2)">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set3``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``2)">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set3``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``2)">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set3``13(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``2)">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set3``14(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``2)">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set3``15(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``2)">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set3``16(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``2)">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set3``4(System.Func{``0,``1,``2,``3},``2)">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set3``5(System.Func{``0,``1,``2,``3,``4},``2)">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set3``6(System.Func{``0,``1,``2,``3,``4,``5},``2)">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set3``7(System.Func{``0,``1,``2,``3,``4,``5,``6},``2)">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set3``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},``2)">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set3``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},``2)">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set3``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``2)">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set3``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``2)">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set3``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``2)">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set3``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``2)">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set3``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``2)">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set3``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``2)">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set3``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``2)">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set3``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16},``2)">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set4``4(System.Action{``0,``1,``2,``3},``3)">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set4``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``3)">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set4``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``3)">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set4``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``3)">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set4``13(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``3)">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set4``14(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``3)">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set4``15(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``3)">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set4``16(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``3)">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set4``5(System.Action{``0,``1,``2,``3,``4},``3)">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set4``6(System.Action{``0,``1,``2,``3,``4,``5},``3)">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set4``7(System.Action{``0,``1,``2,``3,``4,``5,``6},``3)">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set4``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},``3)">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set4``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},``3)">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set4``5(System.Func{``0,``1,``2,``3,``4},``3)">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set4``6(System.Func{``0,``1,``2,``3,``4,``5},``3)">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set4``7(System.Func{``0,``1,``2,``3,``4,``5,``6},``3)">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set4``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},``3)">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set4``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},``3)">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set4``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``3)">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set4``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``3)">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set4``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``3)">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set4``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``3)">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set4``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``3)">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set4``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``3)">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set4``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``3)">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Set4``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16},``3)">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Return``1(System.Action,``0)">
            <summary>
            Returns a function that converts an action to a Func, returning the specified value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Return``2(System.Action{``0},``1)">
            <summary>
            Returns a function that converts an action to a Func, returning the specified value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Return``3(System.Action{``0,``1},``2)">
            <summary>
            Returns a function that converts an action to a Func, returning the specified value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Return``4(System.Action{``0,``1,``2},``3)">
            <summary>
            Returns a function that converts an action to a Func, returning the specified value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.If(System.Func{System.Boolean},System.Action)">
            <summary>
            Logical If Statement. If the condition passed is true, the action passed is executed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.If``1(System.Func{``0,System.Boolean},System.Action{``0})">
            <summary>
            Logical If Statement. If the condition passed is true, the action passed is executed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.If``2(System.Func{``0,``1,System.Boolean},System.Action{``0,``1})">
            <summary>
            Logical If Statement. If the condition passed is true, the action passed is executed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.If``3(System.Func{``0,``1,``2,System.Boolean},System.Action{``0,``1,``2})">
            <summary>
            Logical If Statement. If the condition passed is true, the action passed is executed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.If``4(System.Func{``0,``1,``2,``3,System.Boolean},System.Action{``0,``1,``2,``3})">
            <summary>
            Logical If Statement. If the condition passed is true, the action passed is executed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.If``1(System.Func{System.Boolean},System.Func{``0})">
            <summary>
            Logical If Statement. If the condition passed is true, the action passed is executed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.If``2(System.Func{``0,System.Boolean},System.Func{``0,``1})">
            <summary>
            Logical If Statement. If the condition passed is true, the action passed is executed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.If``3(System.Func{``0,``1,System.Boolean},System.Func{``0,``1,``2})">
            <summary>
            Logical If Statement. If the condition passed is true, the action passed is executed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.If``4(System.Func{``0,``1,``2,System.Boolean},System.Func{``0,``1,``2,``3})">
            <summary>
            Logical If Statement. If the condition passed is true, the action passed is executed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.If``5(System.Func{``0,``1,``2,``3,System.Boolean},System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Logical If Statement. If the condition passed is true, the action passed is executed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.IfElse(System.Func{System.Boolean},System.Action,System.Action)">
            <summary>
            Logical If Else Statment. If the condition passed is true, the first action passed is executed. Otherwise, the second action is executed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.IfElse``1(System.Func{``0,System.Boolean},System.Action{``0},System.Action{``0})">
            <summary>
            Logical If Else Statment. If the condition passed is true, the first action passed is executed. Otherwise, the second action is executed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.IfElse``2(System.Func{``0,``1,System.Boolean},System.Action{``0,``1},System.Action{``0,``1})">
            <summary>
            Logical If Else Statment. If the condition passed is true, the first action passed is executed. Otherwise, the second action is executed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.IfElse``3(System.Func{``0,``1,``2,System.Boolean},System.Action{``0,``1,``2},System.Action{``0,``1,``2})">
            <summary>
            Logical If Else Statment. If the condition passed is true, the first action passed is executed. Otherwise, the second action is executed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.IfElse``4(System.Func{``0,``1,``2,``3,System.Boolean},System.Action{``0,``1,``2,``3},System.Action{``0,``1,``2,``3})">
            <summary>
            Logical If Else Statment. If the condition passed is true, the first action passed is executed. Otherwise, the second action is executed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.DoWhile(System.Action,System.Func{System.Boolean})">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.DoWhile``1(System.Action{``0},System.Func{``0,System.Boolean})">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.DoWhile``2(System.Action{``0,``1},System.Func{``0,``1,System.Boolean})">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.DoWhile``3(System.Action{``0,``1,``2},System.Func{``0,``1,``2,System.Boolean})">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.DoWhile``4(System.Action{``0,``1,``2,``3},System.Func{``0,``1,``2,``3,System.Boolean})">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.DoWhile``5(System.Action{``0,``1,``2,``3,``4},System.Func{``0,``1,``2,``3,``4,System.Boolean})">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.DoWhile``6(System.Action{``0,``1,``2,``3,``4,``5},System.Func{``0,``1,``2,``3,``4,``5,System.Boolean})">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.DoWhile``7(System.Action{``0,``1,``2,``3,``4,``5,``6},System.Func{``0,``1,``2,``3,``4,``5,``6,System.Boolean})">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.DoWhile``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean})">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.DoWhile``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean})">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.DoWhile``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Boolean})">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.DoWhile``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Boolean})">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.DoWhile``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Boolean})">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.DoWhile``13(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Boolean})">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.DoWhile``14(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Boolean})">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.DoWhile``15(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Boolean})">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.DoWhile``16(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Boolean})">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Until``1(System.Func{``0},System.Func{System.Boolean})">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Until``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean})">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Until``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean})">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Until``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Boolean})">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Until``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Boolean})">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Until``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Boolean})">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Until``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Boolean})">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Until``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Boolean})">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Until``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Boolean})">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Until``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Boolean})">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Until``2(System.Func{``0,``1},System.Func{``0,System.Boolean})">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Until``3(System.Func{``0,``1,``2},System.Func{``0,``1,System.Boolean})">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Until``4(System.Func{``0,``1,``2,``3},System.Func{``0,``1,``2,System.Boolean})">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Until``5(System.Func{``0,``1,``2,``3,``4},System.Func{``0,``1,``2,``3,System.Boolean})">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Until``6(System.Func{``0,``1,``2,``3,``4,``5},System.Func{``0,``1,``2,``3,``4,System.Boolean})">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Until``7(System.Func{``0,``1,``2,``3,``4,``5,``6},System.Func{``0,``1,``2,``3,``4,``5,System.Boolean})">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Until``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Func{``0,``1,``2,``3,``4,``5,``6,System.Boolean})">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.DoUntil``1(System.Func{``0},System.Func{System.Boolean})">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.DoUntil``2(System.Func{``0,``1},System.Func{``0,System.Boolean})">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.DoUntil``3(System.Func{``0,``1,``2},System.Func{``0,``1,System.Boolean})">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.DoUntil``4(System.Func{``0,``1,``2,``3},System.Func{``0,``1,``2,System.Boolean})">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.DoUntil``5(System.Func{``0,``1,``2,``3,``4},System.Func{``0,``1,``2,``3,System.Boolean})">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.DoUntil``6(System.Func{``0,``1,``2,``3,``4,``5},System.Func{``0,``1,``2,``3,``4,System.Boolean})">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.DoUntil``7(System.Func{``0,``1,``2,``3,``4,``5,``6},System.Func{``0,``1,``2,``3,``4,``5,System.Boolean})">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.DoUntil``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Func{``0,``1,``2,``3,``4,``5,``6,System.Boolean})">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.DoUntil``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean})">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.DoUntil``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean})">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.DoUntil``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Boolean})">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.DoUntil``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Boolean})">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.DoUntil``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Boolean})">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.DoUntil``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Boolean})">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.DoUntil``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Boolean})">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.DoUntil``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Boolean})">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.DoUntil``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Boolean})">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Repeat(System.Action,System.UInt32)">
            <summary>
            Returns an action that is repeated a number of times.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Repeat(System.Action,System.Int32)">
            <summary>
            Returns an action that is repeated a number of times.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.WhileI``1(System.Action{System.Int32,``0},System.Func{System.Int32,``0,System.Boolean})">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.WhileI``2(System.Action{System.Int32,``0,``1},System.Func{System.Int32,``0,``1,System.Boolean})">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.WhileI``3(System.Action{System.Int32,``0,``1,``2},System.Func{System.Int32,``0,``1,``2,System.Boolean})">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.UntilI``1(System.Func{System.Int32,``0},System.Func{System.Int32,System.Boolean})">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.UntilI``2(System.Func{System.Int32,``0,``1},System.Func{System.Int32,``0,System.Boolean})">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.UntilI``3(System.Func{System.Int32,``0,``1,``2},System.Func{System.Int32,``0,``1,System.Boolean})">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.UntilI``4(System.Func{System.Int32,``0,``1,``2,``3},System.Func{System.Int32,``0,``1,``2,System.Boolean})">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.DoWhileI(System.Action{System.Int32},System.Func{System.Int32,System.Boolean})">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.DoWhileI``1(System.Action{System.Int32,``0},System.Func{System.Int32,``0,System.Boolean})">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.DoWhileI``2(System.Action{System.Int32,``0,``1},System.Func{System.Int32,``0,``1,System.Boolean})">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.DoWhileI``3(System.Action{System.Int32,``0,``1,``2},System.Func{System.Int32,``0,``1,``2,System.Boolean})">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.DoUntilI``1(System.Func{System.Int32,``0},System.Func{System.Int32,System.Boolean})">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.DoUntilI``2(System.Func{System.Int32,``0,``1},System.Func{System.Int32,``0,System.Boolean})">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.DoUntilI``3(System.Func{System.Int32,``0,``1,``2},System.Func{System.Int32,``0,``1,System.Boolean})">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.DoUntilI``4(System.Func{System.Int32,``0,``1,``2,``3},System.Func{System.Int32,``0,``1,``2,System.Boolean})">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Collect``1(System.Func{``0},System.UInt32)">
            <summary>
            Returns a Func that collects the result of In into a List`<typeparamref name="U" />. 
            The Func will be run <paramref><name>Count</name></paramref> times and there will be that many items in the resulting List`<typeparamref name="U" />.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Collect``2(System.Func{``0,``1},System.UInt32)">
            <summary>
            Returns a Func that collects the result of In into a List`<typeparamref name="U" />. 
            The Func will be run <paramref><name>Count</name></paramref> times and there will be that many items in the resulting List`<typeparamref name="U" />.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Collect``3(System.Func{``0,``1,``2},System.UInt32)">
            <summary>
            Returns a Func that collects the result of In into a List`<typeparamref name="U" />. 
            The Func will be run <paramref><name>Count</name></paramref> times and there will be that many items in the resulting List`<typeparamref name="U" />.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Collect``4(System.Func{``0,``1,``2,``3},System.UInt32)">
            <summary>
            Returns a Func that collects the result of In into a List`<typeparamref name="U" />. 
            The Func will be run <paramref><name>Count</name></paramref> times and there will be that many items in the resulting List`<typeparamref name="U" />.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Collect``5(System.Func{``0,``1,``2,``3,``4},System.UInt32)">
            <summary>
            Returns a Func that collects the result of In into a List`<typeparamref name="U" />. 
            The Func will be run <paramref><name>Count</name></paramref> times and there will be that many items in the resulting List`<typeparamref name="U" />.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Loop(System.Action)">
            <summary>
            Loop takes an action and returns a loop function, that takes an index and returns true to continue.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.While(System.Action,System.Func{System.Boolean})">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
            <exception cref="T:System.Exception">Exceptions thrown by parameters are not caught.</exception>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.While``1(System.Action{``0},System.Func{``0,System.Boolean})">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.While``2(System.Action{``0,``1},System.Func{``0,``1,System.Boolean})">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.While``3(System.Action{``0,``1,``2},System.Func{``0,``1,``2,System.Boolean})">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.While``4(System.Action{``0,``1,``2,``3},System.Func{``0,``1,``2,``3,System.Boolean})">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.While``5(System.Action{``0,``1,``2,``3,``4},System.Func{``0,``1,``2,``3,``4,System.Boolean})">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.While``6(System.Action{``0,``1,``2,``3,``4,``5},System.Func{``0,``1,``2,``3,``4,``5,System.Boolean})">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.While``7(System.Action{``0,``1,``2,``3,``4,``5,``6},System.Func{``0,``1,``2,``3,``4,``5,``6,System.Boolean})">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.While``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean})">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.While``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean})">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.While``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Boolean})">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.While``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Boolean})">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.While``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Boolean})">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.While``13(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Boolean})">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.While``14(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Boolean})">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.While``15(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Boolean})">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.While``16(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Boolean})">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.WhileI(System.Action{System.Int32},System.Func{System.Int32,System.Boolean})">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
            <exception cref="T:System.Exception">Exceptions thrown by parameters are not caught.</exception>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Then(System.Action,System.Action)">
            <summary>
            Joins two methods together, performing one then another.
            </summary>
            <exception cref="T:System.Exception">Exceptions thrown by parameters are not caught.</exception>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge(System.Action,System.Action)">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.Action)">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},System.Action)">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``13(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},System.Action)">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``14(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},System.Action)">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``15(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},System.Action)">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``16(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},System.Action)">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``6(System.Action{``0,``1,``2,``3,``4,``5},System.Action)">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``7(System.Action{``0,``1,``2,``3,``4,``5},System.Action{``6})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``8(System.Action{``0,``1,``2,``3,``4,``5},System.Action{``6,``7})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``9(System.Action{``0,``1,``2,``3,``4,``5},System.Action{``6,``7,``8})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``7(System.Action{``0,``1,``2,``3,``4,``5,``6},System.Action)">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``8(System.Action{``0,``1,``2,``3,``4,``5,``6},System.Action{``7})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``9(System.Action{``0,``1,``2,``3,``4,``5,``6},System.Action{``7,``8})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},System.Action)">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},System.Action{``8})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Action)">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Action)">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``3(System.Action{``0,``1,``2},System.Action)">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``4(System.Action{``0,``1,``2},System.Action{``3})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``5(System.Action{``0,``1,``2},System.Action{``3,``4})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``6(System.Action{``0,``1,``2},System.Action{``3,``4,``5})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``7(System.Action{``0,``1,``2},System.Action{``3,``4,``5,``6})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``8(System.Action{``0,``1,``2},System.Action{``3,``4,``5,``6,``7})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``9(System.Action{``0,``1,``2},System.Action{``3,``4,``5,``6,``7,``8})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``4(System.Action{``0,``1,``2,``3},System.Action)">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``5(System.Action{``0,``1,``2,``3},System.Action{``4})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``6(System.Action{``0,``1,``2,``3},System.Action{``4,``5})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``7(System.Action{``0,``1,``2,``3},System.Action{``4,``5,``6})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``8(System.Action{``0,``1,``2,``3},System.Action{``4,``5,``6,``7})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``9(System.Action{``0,``1,``2,``3},System.Action{``4,``5,``6,``7,``8})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``5(System.Action{``0,``1,``2,``3,``4},System.Action)">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``6(System.Action{``0,``1,``2,``3,``4},System.Action{``5})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``7(System.Action{``0,``1,``2,``3,``4},System.Action{``5,``6})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``8(System.Action{``0,``1,``2,``3,``4},System.Action{``5,``6,``7})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``9(System.Action{``0,``1,``2,``3,``4},System.Action{``5,``6,``7,``8})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``2(System.Action,System.Action{``0,``1})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``3(System.Action,System.Action{``0,``1,``2})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``4(System.Action,System.Action{``0,``1,``2,``3})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``5(System.Action,System.Action{``0,``1,``2,``3,``4})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``6(System.Action,System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``7(System.Action,System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``8(System.Action,System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``9(System.Action,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``10(System.Action,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``11(System.Action,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``12(System.Action,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``13(System.Action,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``14(System.Action,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``15(System.Action,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``16(System.Action,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``1(System.Action{``0},System.Action)">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``2(System.Action{``0},System.Action{``1})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``3(System.Action{``0},System.Action{``1,``2})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``4(System.Action{``0},System.Action{``1,``2,``3})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``5(System.Action{``0},System.Action{``1,``2,``3,``4})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``6(System.Action{``0},System.Action{``1,``2,``3,``4,``5})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``7(System.Action{``0},System.Action{``1,``2,``3,``4,``5,``6})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``8(System.Action{``0},System.Action{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``9(System.Action{``0},System.Action{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``2(System.Action{``0,``1},System.Action)">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``3(System.Action{``0,``1},System.Action{``2})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``4(System.Action{``0,``1},System.Action{``2,``3})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``5(System.Action{``0,``1},System.Action{``2,``3,``4})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``6(System.Action{``0,``1},System.Action{``2,``3,``4,``5})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``7(System.Action{``0,``1},System.Action{``2,``3,``4,``5,``6})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``8(System.Action{``0,``1},System.Action{``2,``3,``4,``5,``6,``7})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``9(System.Action{``0,``1},System.Action{``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Logic_Extension_Explode.Merge``1(System.Action,System.Action{``0})">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="T:LCore.Extensions.LX_Explode">
            <summary>
            Logical function explosion static methods.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F``1">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F1``2">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F2``3">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F3``4">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F4``5">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F5``6">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F6``7">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F7``8">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F8``9">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F9``10">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F10``11">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F11``12">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F12``13">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F13``14">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F14``15">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F15``16">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F16``17">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_Fx1``2">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F1x1``2">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F2x1``3">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F3x1``4">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F4x1``5">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F5x1``6">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F6x1``7">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F7x1``8">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F8x1``9">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F9x1``10">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F10x1``11">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F11x1``12">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F12x1``13">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F13x1``14">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F14x1``15">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F15x1``16">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F16x1``17">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_Fx2``3">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F3x2``4">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F4x2``5">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F5x2``6">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F6x2``7">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F7x2``8">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F8x2``9">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F9x2``10">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F10x2``11">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F11x2``12">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F12x2``13">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F13x2``14">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F14x2``15">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F15x2``16">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F16x2``17">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_Fx3``4">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F4x3``5">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F5x3``6">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F6x3``7">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F7x3``8">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F8x3``9">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F9x3``10">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F10x3``11">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F11x3``12">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F12x3``13">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F13x3``14">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F14x3``15">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F15x3``16">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F16x3``17">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_Fx4``5">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F5x4``6">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F6x4``7">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F7x4``8">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F8x4``9">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F9x4``10">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F10x4``11">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F11x4``12">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F12x4``13">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F13x4``14">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F14x4``15">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F15x4``16">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F16x4``17">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_Fx5``6">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F6x5``7">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F7x5``8">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F8x5``9">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F9x5``10">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F10x5``11">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F11x5``12">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F12x5``13">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F13x5``14">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F14x5``15">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F15x5``16">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F16x5``17">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_Fx6``7">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F7x6``8">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F8x6``9">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F9x6``10">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F10x6``11">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F11x6``12">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F12x6``13">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F13x6``14">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F14x6``15">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F15x6``16">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F16x6``17">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_Fx7``8">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F8x7``9">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F9x7``10">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F10x7``11">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F11x7``12">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F12x7``13">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F13x7``14">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F14x7``15">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F15x7``16">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F16x7``17">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_Fx8``9">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F9x8``10">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F10x8``11">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F11x8``12">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F12x8``13">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F13x8``14">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F14x8``15">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F15x8``16">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F16x8``17">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_Fx9``10">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F10x9``11">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F11x9``12">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F12x9``13">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F13x9``14">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F14x9``15">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F15x9``16">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F16x9``17">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_Fx10``11">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F11x10``12">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F12x10``13">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F13x10``14">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F14x10``15">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F15x10``16">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F16x10``17">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_Fx11``12">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F12x11``13">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F13x11``14">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F14x11``15">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F15x11``16">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F16x11``17">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_Fx12``13">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F13x12``14">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F14x12``15">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F15x12``16">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F16x12``17">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_Fx13``14">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F14x13``15">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F15x13``16">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F16x13``17">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_Fx14``15">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F15x14``16">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F16x14``17">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_Fx15``16">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_F16x15``17">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge_A_Fx16``17">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_To``1">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_To2``2">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_To3``3">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_To4``4">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_To5``5">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_To6``6">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_To7``7">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_To8``8">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_To9``9">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_To10``10">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_To11``11">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_To12``12">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_To13``13">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_To14``14">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_To15``15">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_To16``16">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_ToI``1">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_ToI2``2">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_ToI3``3">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_ToI4``4">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_ToI5``5">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_ToI6``6">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_ToI7``7">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_ToI8``8">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_ToI9``9">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_ToI10``10">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_ToI11``11">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_ToI12``12">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_ToI13``13">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_ToI14``14">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_ToI15``15">
            <summary>
            Loops an Action from a to b. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_For``1">
            <summary>
            Loops an Action that takes an index and returns false to break out of the loop. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_For2``2">
            <summary>
            Loops an Action that takes an index and returns false to break out of the loop. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_For3``3">
            <summary>
            Loops an Action that takes an index and returns false to break out of the loop. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_For4``4">
            <summary>
            Loops an Action that takes an index and returns false to break out of the loop. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_For5``5">
            <summary>
            Loops an Action that takes an index and returns false to break out of the loop. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_For6``6">
            <summary>
            Loops an Action that takes an index and returns false to break out of the loop. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_For7``7">
            <summary>
            Loops an Action that takes an index and returns false to break out of the loop. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_For8``8">
            <summary>
            Loops an Action that takes an index and returns false to break out of the loop. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_For9``9">
            <summary>
            Loops an Action that takes an index and returns false to break out of the loop. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_For10``10">
            <summary>
            Loops an Action that takes an index and returns false to break out of the loop. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_For11``11">
            <summary>
            Loops an Action that takes an index and returns false to break out of the loop. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_For12``12">
            <summary>
            Loops an Action that takes an index and returns false to break out of the loop. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_For13``13">
            <summary>
            Loops an Action that takes an index and returns false to break out of the loop. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_For14``14">
            <summary>
            Loops an Action that takes an index and returns false to break out of the loop. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_For15``15">
            <summary>
            Loops an Action that takes an index and returns false to break out of the loop. a and b can be any integers.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Do``2">
            <summary>
            Returns an Action from the supplied Func. The return value is discarded.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Do2``3">
            <summary>
            Returns an Action from the supplied Func. The return value is discarded.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Do3``4">
            <summary>
            Returns an Action from the supplied Func. The return value is discarded.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Do4``5">
            <summary>
            Returns an Action from the supplied Func. The return value is discarded.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Do5``6">
            <summary>
            Returns an Action from the supplied Func. The return value is discarded.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Do6``7">
            <summary>
            Returns an Action from the supplied Func. The return value is discarded.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Do7``8">
            <summary>
            Returns an Action from the supplied Func. The return value is discarded.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Do8``9">
            <summary>
            Returns an Action from the supplied Func. The return value is discarded.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Do9``10">
            <summary>
            Returns an Action from the supplied Func. The return value is discarded.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Do10``11">
            <summary>
            Returns an Action from the supplied Func. The return value is discarded.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Do11``12">
            <summary>
            Returns an Action from the supplied Func. The return value is discarded.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Do12``13">
            <summary>
            Returns an Action from the supplied Func. The return value is discarded.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Do13``14">
            <summary>
            Returns an Action from the supplied Func. The return value is discarded.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Do14``15">
            <summary>
            Returns an Action from the supplied Func. The return value is discarded.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Do15``16">
            <summary>
            Returns an Action from the supplied Func. The return value is discarded.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Do16``17">
            <summary>
            Returns an Action from the supplied Func. The return value is discarded.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Cache``2">
            <summary>
            Caches the results of In using a Unique CacheID, combined with the string representation of all parameters.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Cache2``3">
            <summary>
            Caches the results of In using a Unique CacheID, combined with the string representation of all parameters.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Cache3``4">
            <summary>
            Caches the results of In using a Unique CacheID, combined with the string representation of all parameters.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Cache4``5">
            <summary>
            Caches the results of In using a Unique CacheID, combined with the string representation of all parameters.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Cache5``6">
            <summary>
            Caches the results of In using a Unique CacheID, combined with the string representation of all parameters.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Cache6``7">
            <summary>
            Caches the results of In using a Unique CacheID, combined with the string representation of all parameters.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Cache7``8">
            <summary>
            Caches the results of In using a Unique CacheID, combined with the string representation of all parameters.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Cache8``9">
            <summary>
            Caches the results of In using a Unique CacheID, combined with the string representation of all parameters.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Cache9``10">
            <summary>
            Caches the results of In using a Unique CacheID, combined with the string representation of all parameters.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Cache10``11">
            <summary>
            Caches the results of In using a Unique CacheID, combined with the string representation of all parameters.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Cache11``12">
            <summary>
            Caches the results of In using a Unique CacheID, combined with the string representation of all parameters.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Cache12``13">
            <summary>
            Caches the results of In using a Unique CacheID, combined with the string representation of all parameters.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Cache13``14">
            <summary>
            Caches the results of In using a Unique CacheID, combined with the string representation of all parameters.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Cache14``15">
            <summary>
            Caches the results of In using a Unique CacheID, combined with the string representation of all parameters.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Cache15``16">
            <summary>
            Caches the results of In using a Unique CacheID, combined with the string representation of all parameters.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Cache16``17">
            <summary>
            Caches the results of In using a Unique CacheID, combined with the string representation of all parameters.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_SetFunc_A2``2">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_SetFunc_A3``3">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_SetFunc_A4``4">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_SetFunc_A5``5">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_SetFunc_A6``6">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_SetFunc_A7``7">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_SetFunc_A8``8">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_SetFunc_A9``9">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_SetFunc_A10``10">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_SetFunc_A11``11">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_SetFunc_A12``12">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_SetFunc_A13``13">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_SetFunc_A14``14">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_SetFunc_A15``15">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_SetFunc_A16``16">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_SetFunc_F2``3">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_SetFunc_F3``4">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_SetFunc_F4``5">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_SetFunc_F5``6">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_SetFunc_F6``7">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_SetFunc_F7``8">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_SetFunc_F8``9">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_SetFunc_F9``10">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_SetFunc_F10``11">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_SetFunc_F11``12">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_SetFunc_F12``13">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_SetFunc_F13``14">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_SetFunc_F14``15">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_SetFunc_F15``16">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_SetFunc_F16``17">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with the result of In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set_A2``2">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set_A3``3">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set_A4``4">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set_A5``5">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set_A6``6">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set_A7``7">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set_A8``8">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set_A9``9">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set_A10``10">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set_A11``11">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set_A12``12">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set_A13``13">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set_A14``14">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set_A15``15">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set_A16``16">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set_F2``3">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set_F3``4">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set_F4``5">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set_F5``6">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set_F6``7">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set_F7``8">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set_F8``9">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set_F9``10">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set_F10``11">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set_F11``12">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set_F12``13">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set_F13``14">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set_F14``15">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set_F15``16">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set_F16``17">
            <summary>
            Returns a function that sets (overrides) the first parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set2_A3``3">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set2_A4``4">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set2_A5``5">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set2_A6``6">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set2_A7``7">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set2_A8``8">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set2_A9``9">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set2_A10``10">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set2_A11``11">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set2_A12``12">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set2_A13``13">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set2_A14``14">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set2_A15``15">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set2_A16``16">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set2_F3``4">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set2_F4``5">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set2_F5``6">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set2_F6``7">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set2_F7``8">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set2_F8``9">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set2_F9``10">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set2_F10``11">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set2_F11``12">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set2_F12``13">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set2_F13``14">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set2_F14``15">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set2_F15``16">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set2_F16``17">
            <summary>
            Returns a function that sets (overrides) the second parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set3_A4``4">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set3_A5``5">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set3_A6``6">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set3_A7``7">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set3_A8``8">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set3_A9``9">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set3_A10``10">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set3_A11``11">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set3_A12``12">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set3_A13``13">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set3_A14``14">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set3_A15``15">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set3_A16``16">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set3_F4``5">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set3_F5``6">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set3_F6``7">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set3_F7``8">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set3_F8``9">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set3_F9``10">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set3_F10``11">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set3_F11``12">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set3_F12``13">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set3_F13``14">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set3_F14``15">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set3_F15``16">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set3_F16``17">
            <summary>
            Returns a function that sets (overrides) the third parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set4_A5``5">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set4_A6``6">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set4_A7``7">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set4_A8``8">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set4_A9``9">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set4_A10``10">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set4_A11``11">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set4_A12``12">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set4_A13``13">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set4_A14``14">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set4_A15``15">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set4_A16``16">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set4_F5``6">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set4_F6``7">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set4_F7``8">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set4_F8``9">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set4_F9``10">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set4_F10``11">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set4_F11``12">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set4_F12``13">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set4_F13``14">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set4_F14``15">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set4_F15``16">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Set4_F16``17">
            <summary>
            Returns a function that sets (overrides) the fourth parameter in Func with In
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_DoWhile``1">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_DoWhile2``2">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_DoWhile3``3">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_DoWhile4``4">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_DoWhile5``5">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_DoWhile6``6">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_DoWhile7``7">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_DoWhile8``8">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_DoWhile9``9">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_DoWhile10``10">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_DoWhile11``11">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_DoWhile12``12">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_DoWhile13``13">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_DoWhile14``14">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_DoWhile15``15">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_DoWhile16``16">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Until``2">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Until2``3">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Until3``4">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Until4``5">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Until5``6">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Until6``7">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Until7``8">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Until8``9">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Until9``10">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Until10``11">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Until11``12">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Until12``13">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Until13``14">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Until14``15">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Until15``16">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Until16``17">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_DoUntil``2">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_DoUntil2``3">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_DoUntil3``4">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_DoUntil4``5">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_DoUntil5``6">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_DoUntil6``7">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_DoUntil7``8">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_DoUntil8``9">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_DoUntil9``10">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_DoUntil10``11">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_DoUntil11``12">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_DoUntil12``13">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_DoUntil13``14">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_DoUntil14``15">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_DoUntil15``16">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_DoUntil16``17">
            <summary>
            Takes Func In and returns a Func that is performed until Break evaluates to true, or In returns a non-null value. This value will be the method's return value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_While``1">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_While2``2">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_While3``3">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_While4``4">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_While5``5">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_While6``6">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_While7``7">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_While8``8">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_While9``9">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_While10``10">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_While11``11">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_While12``12">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_While13``13">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_While14``14">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_While15``15">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_While16``16">
            <summary>
            Takes action In and returns an action that is performed for as long as Continue evaluates to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge1``1">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge2``2">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge3``3">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge4``4">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge5``5">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge6``6">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge7``7">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge8``8">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge9``9">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge10``10">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge11``11">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge12``12">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge13``13">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge14``14">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge15``15">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge16``16">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Mergex1``1">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge1x1``1">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge2x1``2">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge3x1``3">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge4x1``4">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge5x1``5">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge6x1``6">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge7x1``7">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge8x1``8">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge9x1``9">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge10x1``10">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge11x1``11">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge12x1``12">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge13x1``13">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge14x1``14">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge15x1``15">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge16x1``16">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Mergex2``2">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge3x2``3">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge4x2``4">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge5x2``5">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge6x2``6">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge7x2``7">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge8x2``8">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge9x2``9">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge10x2``10">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge11x2``11">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge12x2``12">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge13x2``13">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge14x2``14">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge15x2``15">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge16x2``16">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Mergex3``3">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge4x3``4">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge5x3``5">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge6x3``6">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge7x3``7">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge8x3``8">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge9x3``9">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge10x3``10">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge11x3``11">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge12x3``12">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge13x3``13">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge14x3``14">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge15x3``15">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge16x3``16">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Mergex4``4">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge5x4``5">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge6x4``6">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge7x4``7">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge8x4``8">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge9x4``9">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge10x4``10">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge11x4``11">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge12x4``12">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge13x4``13">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge14x4``14">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge15x4``15">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge16x4``16">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Mergex5``5">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge6x5``6">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge7x5``7">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge8x5``8">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge9x5``9">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge10x5``10">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge11x5``11">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge12x5``12">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge13x5``13">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge14x5``14">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge15x5``15">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge16x5``16">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Mergex6``6">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge7x6``7">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge8x6``8">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge9x6``9">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge10x6``10">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge11x6``11">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge12x6``12">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge13x6``13">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge14x6``14">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge15x6``15">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge16x6``16">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Mergex7``7">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge8x7``8">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge9x7``9">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge10x7``10">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge11x7``11">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge12x7``12">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge13x7``13">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge14x7``14">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge15x7``15">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge16x7``16">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Mergex8``8">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge9x8``9">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge10x8``10">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge11x8``11">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge12x8``12">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge13x8``13">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge14x8``14">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge15x8``15">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge16x8``16">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Mergex9``9">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge10x9``10">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge11x9``11">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge12x9``12">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge13x9``13">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge14x9``14">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge15x9``15">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge16x9``16">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Mergex10``10">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge11x10``11">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge12x10``12">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge13x10``13">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge14x10``14">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge15x10``15">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge16x10``16">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Mergex11``11">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge12x11``12">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge13x11``13">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge14x11``14">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge15x11``15">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge16x11``16">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Mergex12``12">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge13x12``13">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge14x12``14">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge15x12``15">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge16x12``16">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Mergex13``13">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge14x13``14">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge15x13``15">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge16x13``16">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Mergex14``14">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge15x14``15">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge16x14``16">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Mergex15``15">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Merge16x15``16">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LX_Explode.L_Mergex16``16">
            <summary>
            Returns a function that Performs In, then Merge. Parameter lists are merged.
            </summary>
        </member>
        <member name="T:LCore.Extensions.CommentExt">
            <summary>
            Extensions to Type and MemberInfo classes to allow seamless 
            gathering of XML comments directly from source code.
            
            For the project you're analyzing you MUST check the 
            XML documentation option in Project Properties -> Build Tab
            </summary>
        </member>
        <member name="M:LCore.Extensions.CommentExt.GetComments(System.Reflection.MemberInfo)">
            <summary>
            Returns an ICodeComment object representing the XML comments
            for a particular MemberInfo (Method, Property, or Field)
            if comments exist. Null otherwise.
            </summary>
            <param name="In">The MemberInfo to read comments</param>
            <returns>An ICodeComment object if comments exist. Null otherwise.</returns>
        </member>
        <member name="T:LCore.Extensions.EnumExt">
            <summary>
            Provides extensions to allow for conversion and utility of Enum types.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumExt.ParseEnum``1(System.String)">
            <summary>
            Takes a String and returns and Enum of Type T.
            This method will fail if the String is null, empty, or does not match a value of the enum.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumExt.ParseEnum(System.String,System.Type)">
            <summary>
            Takes a String and returns and Enum of Type <paramref name="Type" />.
            This method will fail if the String is null, empty, 
            or does not match a value of the enum.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumExt.ParseEnum``1(System.Enum)">
            <summary>
            Takes an Enum of any type and converts it to an enum of the specified type T.
            This method will fail if the source enum is null or the String value of the source enum is not found in type T.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumExt.ParseEnum_FriendlyName(System.String,System.Type)">
            <summary>
            Returns the friendly name of the value of an enum type.
            Add a friendly name by adding a FriendlyNameAttribute
            to the Enum element.
            
            If the enum friendly name is not found, null will be returned.
            </summary> 
        </member>
        <member name="M:LCore.Extensions.EnumExt.GetFriendlyName(System.Enum)">
            <summary>
            Returns the friendly name of the value of an enum type.
            Add a friendly name by adding a FriendlyNameAttribute
            to the Enum element.
            </summary> 
        </member>
        <member name="T:LCore.Extensions.LoopExt">
            <summary>
            Provides extensions for looping
            </summary>
        </member>
        <member name="M:LCore.Extensions.LoopExt.To``1(System.Int32,System.Int32,System.Func{``0})">
            <summary>
            Loops from In to To, performing Func. The results of Func are returned in a List`<typeparamref name="U" />.
            </summary>
            <typeparam name="U"></typeparam>
            <param name="In"></param>
            <param name="To"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LoopExt.To``1(System.Int32,System.Int32,System.Func{System.Int32,``0})">
            <summary>
            Loops from In to To, performing Func. The results of Func are returned in a List`<typeparamref name="T" />.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="In"></param>
            <param name="To"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="T:LCore.Extensions.ThreadExt">
            <summary>
            Provides extensions to methods to help with asynchronous actions and timing.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ThreadExt.Async(System.Action)">
            <summary>
            Performs an action or function asynchronously. 
            If a function is used, a callback can be supplied to retrieve the value. 
            If a time limit is supplied, the thread will be interrupted if it does not 
            complete within the time period.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ThreadExt.Async``1(System.Action{``0})">
            <summary>
            Performs an action or function asynchronously. 
            If a function is used, a callback can be supplied to retrieve the value. 
            If a time limit is supplied, the thread will be interrupted if it does not 
            complete within the time period.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ThreadExt.Async(System.Action,System.Threading.ThreadPriority)">
            <summary>
            Performs an action or function asynchronously. 
            If a function is used, a callback can be supplied to retrieve the value. 
            If a time limit is supplied, the thread will be interrupted if it does not 
            complete within the time period.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ThreadExt.Async``1(System.Action{``0},System.Threading.ThreadPriority)">
            <summary>
            Performs an action or function asynchronously. 
            If a function is used, a callback can be supplied to retrieve the value. 
            If a time limit is supplied, the thread will be interrupted if it does not 
            complete within the time period.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ThreadExt.Async(System.Action,System.TimeSpan,System.Threading.ThreadPriority)">
            <summary>
            Performs an action or function asynchronously. 
            If a function is used, a callback can be supplied to retrieve the value. 
            If a time limit is supplied, the thread will be interrupted if it does not 
            complete within the time period.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ThreadExt.Async``1(System.Action{``0},System.TimeSpan,System.Threading.ThreadPriority)">
            <summary>
            Performs an action or function asynchronously. 
            If a function is used, a callback can be supplied to retrieve the value. 
            If a time limit is supplied, the thread will be interrupted if it does not 
            complete within the time period.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ThreadExt.Async(System.Action,System.Int32,System.Threading.ThreadPriority)">
            <summary>
            Performs an action or function asynchronously. 
            If a function is used, a callback can be supplied to retrieve the value. 
            If a time limit is supplied, the thread will be interrupted if it does not 
            complete within the time period.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ThreadExt.Async``1(System.Action{``0},System.Int32,System.Threading.ThreadPriority)">
            <summary>
            Performs an action or function asynchronously. 
            If a function is used, a callback can be supplied to retrieve the value. 
            If a time limit is supplied, the thread will be interrupted if it does not 
            complete within the time period.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ThreadExt.Async(System.Action,System.UInt32,System.Threading.ThreadPriority)">
            <summary>
            Performs an action or function asynchronously. 
            If a function is used, a callback can be supplied to retrieve the value. 
            If a time limit is supplied, the thread will be interrupted if it does not 
            complete within the time period.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ThreadExt.Async``1(System.Action{``0},System.UInt32,System.Threading.ThreadPriority)">
            <summary>
            Performs an action or function asynchronously. 
            If a function is used, a callback can be supplied to retrieve the value. 
            If a time limit is supplied, the thread will be interrupted if it does not 
            complete within the time period.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ThreadExt.Async(System.Action,System.Int64,System.Threading.ThreadPriority)">
            <summary>
            Performs an action or function asynchronously. 
            If a function is used, a callback can be supplied to retrieve the value. 
            If a time limit is supplied, the thread will be interrupted if it does not 
            complete within the time period.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ThreadExt.Async``1(System.Action{``0},System.Int64,System.Threading.ThreadPriority)">
            <summary>
            Performs an action or function asynchronously. 
            If a function is used, a callback can be supplied to retrieve the value. 
            If a time limit is supplied, the thread will be interrupted if it does not 
            complete within the time period.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ThreadExt.Async(System.Action,System.UInt64,System.Threading.ThreadPriority)">
            <summary>
            Performs an action or function asynchronously. 
            If a function is used, a callback can be supplied to retrieve the value. 
            If a time limit is supplied, the thread will be interrupted if it does not 
            complete within the time period.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ThreadExt.Async``1(System.Action{``0},System.UInt64,System.Threading.ThreadPriority)">
            <summary>
            Performs an action or function asynchronously. 
            If a function is used, a callback can be supplied to retrieve the value. 
            If a time limit is supplied, the thread will be interrupted if it does not 
            complete within the time period.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ThreadExt.AsyncResult``1(System.Func{``0},System.Action{``0})">
            <summary>
            Performs an action or function asynchronously. 
            If a function is used, a callback can be supplied to retrieve the value. 
            If a time limit is supplied, the thread will be interrupted if it does not 
            complete within the time period.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ThreadExt.AsyncResult``2(System.Func{``0,``1},System.Action{``1})">
            <summary>
            Performs an action or function asynchronously. 
            If a function is used, a callback can be supplied to retrieve the value. 
            If a time limit is supplied, the thread will be interrupted if it does not 
            complete within the time period.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ThreadExt.AsyncResult``1(System.Func{``0},System.Action{``0},System.Threading.ThreadPriority)">
            <summary>
            Performs an action or function asynchronously. 
            If a function is used, a callback can be supplied to retrieve the value. 
            If a time limit is supplied, the thread will be interrupted if it does not 
            complete within the time period.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ThreadExt.AsyncResult``2(System.Func{``0,``1},System.Action{``1},System.Threading.ThreadPriority)">
            <summary>
            Performs an action or function asynchronously. 
            If a function is used, a callback can be supplied to retrieve the value. 
            If a time limit is supplied, the thread will be interrupted if it does not 
            complete within the time period.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ThreadExt.AsyncResult``1(System.Func{``0},System.Action{``0},System.TimeSpan,System.Threading.ThreadPriority)">
            <summary>
            Performs an action or function asynchronously. 
            If a function is used, a callback can be supplied to retrieve the value. 
            If a time limit is supplied, the thread will be interrupted if it does not 
            complete within the time period.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ThreadExt.AsyncResult``2(System.Func{``0,``1},System.Action{``1},System.TimeSpan,System.Threading.ThreadPriority)">
            <summary>
            Performs an action or function asynchronously. 
            If a function is used, a callback can be supplied to retrieve the value. 
            If a time limit is supplied, the thread will be interrupted if it does not 
            complete within the time period.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ThreadExt.AsyncResult``1(System.Func{``0},System.Action{``0},System.Int32,System.Threading.ThreadPriority)">
            <summary>
            Performs an action or function asynchronously. 
            If a function is used, a callback can be supplied to retrieve the value. 
            If a time limit is supplied, the thread will be interrupted if it does not 
            complete within the time period.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ThreadExt.AsyncResult``2(System.Func{``0,``1},System.Action{``1},System.Int32,System.Threading.ThreadPriority)">
            <summary>
            Performs an action or function asynchronously. 
            If a function is used, a callback can be supplied to retrieve the value. 
            If a time limit is supplied, the thread will be interrupted if it does not 
            complete within the time period.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ThreadExt.AsyncResult``1(System.Func{``0},System.Action{``0},System.UInt32,System.Threading.ThreadPriority)">
            <summary>
            Performs an action or function asynchronously. 
            If a function is used, a callback can be supplied to retrieve the value. 
            If a time limit is supplied, the thread will be interrupted if it does not 
            complete within the time period.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ThreadExt.AsyncResult``2(System.Func{``0,``1},System.Action{``1},System.UInt32,System.Threading.ThreadPriority)">
            <summary>
            Performs an action or function asynchronously. 
            If a function is used, a callback can be supplied to retrieve the value. 
            If a time limit is supplied, the thread will be interrupted if it does not 
            complete within the time period.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ThreadExt.AsyncResult``1(System.Func{``0},System.Action{``0},System.Int64,System.Threading.ThreadPriority)">
            <summary>
            Performs an action or function asynchronously. 
            If a function is used, a callback can be supplied to retrieve the value. 
            If a time limit is supplied, the thread will be interrupted if it does not 
            complete within the time period.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ThreadExt.AsyncResult``2(System.Func{``0,``1},System.Action{``1},System.Int64,System.Threading.ThreadPriority)">
            <summary>
            Performs an action or function asynchronously. 
            If a function is used, a callback can be supplied to retrieve the value. 
            If a time limit is supplied, the thread will be interrupted if it does not 
            complete within the time period.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ThreadExt.AsyncResult``1(System.Func{``0},System.Action{``0},System.UInt64,System.Threading.ThreadPriority)">
            <summary>
            Performs an action or function asynchronously. 
            If a function is used, a callback can be supplied to retrieve the value. 
            If a time limit is supplied, the thread will be interrupted if it does not 
            complete within the time period.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ThreadExt.AsyncResult``2(System.Func{``0,``1},System.Action{``1},System.UInt64,System.Threading.ThreadPriority)">
            <summary>
            Performs an action or function asynchronously. 
            If a function is used, a callback can be supplied to retrieve the value. 
            If a time limit is supplied, the thread will be interrupted if it does not 
            complete within the time period.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ThreadExt.CountExecutions(System.Action,System.UInt32)">
            <summary>
            Counts how many times <paramref name="In"/> can be performed in the given number of <paramref name="Milliseconds"/>
            </summary>
        </member>
        <member name="M:LCore.Extensions.ThreadExt.Profile(System.Action,System.UInt32)">
            <summary>
            Performs an action, reporting back the amount of time it took to complete
            </summary>
        </member>
        <member name="M:LCore.Extensions.ThreadExt.Profile``1(System.Func{``0},System.UInt32)">
            <summary>
            Performs a function, reporting back the amount of time it took to complete
            </summary>
        </member>
        <member name="M:LCore.Extensions.ThreadExt.Profile(System.Action,System.String)">
            <summary>
            Surrounds the method with logic that logs all execution times.
            Access the data using: L.Thread.MethodProfileCache
            </summary>
        </member>
        <member name="M:LCore.Extensions.ThreadExt.Profile``1(System.Action{``0},System.String)">
            <summary>
            Surrounds the method with logic that logs all execution times.
            Access the data using: L.Thread.MethodProfileCache
            </summary>
        </member>
        <member name="M:LCore.Extensions.ThreadExt.Profile``1(System.Func{``0},System.String)">
            <summary>
            Surrounds the method with logic that logs all execution times.
            Access the data using: L.Thread.MethodProfileCache
            </summary>
        </member>
        <member name="M:LCore.Extensions.ThreadExt.Profile``2(System.Func{``0,``1},System.String)">
            <summary>
            Surrounds the method with logic that logs all execution times.
            Access the data using: L.Thread.MethodProfileCache
            </summary>
        </member>
        <member name="T:LCore.Extensions.ExceptionExt">
            <summary>
            Provides extensions for method exception handling
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Try(System.Action)">
            <summary>
            Surrounds a method in a try, ignoring exceptions. If an action is used, the result is a Boolean of whether or not the method succeeded.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Try``1(System.Action{``0})">
            <summary>
            Surrounds a method in a try, ignoring exceptions. If an action is used, the result is a Boolean of whether or not the method succeeded.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Try``2(System.Action{``0,``1})">
            <summary>
            Surrounds a method in a try, ignoring exceptions. If an action is used, the result is a Boolean of whether or not the method succeeded.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Try``3(System.Action{``0,``1,``2})">
            <summary>
            Surrounds a method in a try, ignoring exceptions. If an action is used, the result is a Boolean of whether or not the method succeeded.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Try``4(System.Action{``0,``1,``2,``3})">
            <summary>
            Surrounds a method in a try, ignoring exceptions. If an action is used, the result is a Boolean of whether or not the method succeeded.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Try``1(System.Func{``0})">
            <summary>
            Surrounds a method in a try, ignoring exceptions. If an action is used, the result is a Boolean of whether or not the method succeeded.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Try``2(System.Func{``0,``1})">
            <summary>
            Surrounds a method in a try, ignoring exceptions. If an action is used, the result is a Boolean of whether or not the method succeeded.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Try``3(System.Func{``0,``1,``2})">
            <summary>
            Surrounds a method in a try, ignoring exceptions. If an action is used, the result is a Boolean of whether or not the method succeeded.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Try``4(System.Func{``0,``1,``2,``3})">
            <summary>
            Surrounds a method in a try, ignoring exceptions. If an action is used, the result is a Boolean of whether or not the method succeeded.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Try``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Surrounds a method in a try, ignoring exceptions. If an action is used, the result is a Boolean of whether or not the method succeeded.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Catch(System.Action,System.Action{System.Exception})">
            <summary>
            Catches exceptions of all types, using Exception as the base type.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Catch``1(System.Action{``0},System.Action{System.Exception})">
            <summary>
            Catches exceptions of all types, using Exception as the base type.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Catch``2(System.Action{``0,``1},System.Action{System.Exception})">
            <summary>
            Catches exceptions of all types, using Exception as the base type.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Catch``3(System.Action{``0,``1,``2},System.Action{System.Exception})">
            <summary>
            Catches exceptions of all types, using Exception as the base type.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Catch``4(System.Action{``0,``1,``2,``3},System.Action{System.Exception})">
            <summary>
            Catches exceptions of all types, using Exception as the base type.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Catch``1(System.Func{``0},System.Action{System.Exception})">
            <summary>
            Catches exceptions of all types, using Exception as the base type.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Catch``2(System.Func{``0,``1},System.Action{System.Exception})">
            <summary>
            Catches exceptions of all types, using Exception as the base type.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Catch``3(System.Func{``0,``1,``2},System.Action{System.Exception})">
            <summary>
            Catches exceptions of all types, using Exception as the base type.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Catch``4(System.Func{``0,``1,``2,``3},System.Action{System.Exception})">
            <summary>
            Catches exceptions of all types, using Exception as the base type.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Catch``5(System.Func{``0,``1,``2,``3,``4},System.Action{System.Exception})">
            <summary>
            Catches exceptions of all types, using Exception as the base type.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Catch``1(System.Action,System.Action{``0})">
            <summary>
            Catches exceptions of any type. Takes the error handler as an parameter.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Catch``2(System.Action{``0},System.Action{``1})">
            <summary>
            Catches exceptions of any type. Takes the error handler as an parameter.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Catch``3(System.Action{``0,``1},System.Action{``2})">
            <summary>
            Catches exceptions of any type. Takes the error handler as an parameter.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Catch``4(System.Action{``0,``1,``2},System.Action{``3})">
            <summary>
            Catches exceptions of any type. Takes the error handler as an parameter.
            </summary>
            <summary>
            Catches exceptions of any type. Takes the error handler as an parameter.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Catch``5(System.Action{``0,``1,``2,``3},System.Action{``4})">
            <summary>
            Catches exceptions of any type. Takes the error handler as an parameter.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Catch``2(System.Func{``0},System.Action{``1})">
            <summary>
            Catches exceptions of any type. Takes the error handler as an parameter.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Catch``3(System.Func{``0,``1},System.Action{``2})">
            <summary>
            Catches exceptions of any type. Takes the error handler as an parameter.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Catch``4(System.Func{``0,``1,``2},System.Action{``3})">
            <summary>
            Catches exceptions of any type. Takes the error handler as an parameter.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Catch``5(System.Func{``0,``1,``2,``3},System.Action{``4})">
            <summary>
            Catches exceptions of any type. Takes the error handler as an parameter.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Catch``6(System.Func{``0,``1,``2,``3,``4},System.Action{``5})">
            <summary>
            Catches exceptions of any type. Takes the error handler as an parameter.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Catch``2(System.Func{``0},System.Func{``1,``0})">
            <summary>
            Catches exceptions of any type. Takes the error handler as an parameter.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Catch``3(System.Func{``0,``1},System.Func{``2,``1})">
            <summary>
            Catches exceptions of any type. Takes the error handler as an parameter.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Catch``4(System.Func{``0,``1,``2},System.Func{``3,``2})">
            <summary>
            Catches exceptions of any type. Takes the error handler as an parameter.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Catch``5(System.Func{``0,``1,``2,``3},System.Func{``4,``3})">
            <summary>
            Catches exceptions of any type. Takes the error handler as an parameter.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Catch``6(System.Func{``0,``1,``2,``3,``4},System.Func{``5,``4})">
            <summary>
            Catches exceptions of any type. Takes the error handler as an parameter.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Catch``1(System.Action)">
            <summary>
            Catches exceptions of any type. No handler is passed, the error is ignored.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Catch``2(System.Action{``0})">
            <summary>
            Catches exceptions of any type. No handler is passed, the error is ignored.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Catch``3(System.Action{``0,``1})">
            <summary>
            Catches exceptions of any type. No handler is passed, the error is ignored.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Catch``4(System.Action{``0,``1,``2})">
            <summary>
            Catches exceptions of any type. No handler is passed, the error is ignored.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Catch``5(System.Action{``0,``1,``2,``3})">
            <summary>
            Catches exceptions of any type. No handler is passed, the error is ignored.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Catch``2(System.Func{``0})">
            <summary>
            Catches exceptions of any type. No handler is passed, the error is ignored.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Catch``3(System.Func{``0,``1})">
            <summary>
            Catches exceptions of any type. No handler is passed, the error is ignored.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Catch``4(System.Func{``0,``1,``2})">
            <summary>
            Catches exceptions of any type. No handler is passed, the error is ignored.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Catch``5(System.Func{``0,``1,``2,``3})">
            <summary>
            Catches exceptions of any type. No handler is passed, the error is ignored.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Catch``6(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Catches exceptions of any type. No handler is passed, the error is ignored.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Retry(System.Action,System.Int32)">
            <summary>
            Retries the action a specified number of times.
            The default number of  <paramref name="Tries" /> is 1. 
            The initial attempt is not counted, so the action 
            will be executed at most  <paramref name="Tries" /> + 1 times.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="Tries" /> is less than 1.</exception>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Retry``1(System.Action{``0},System.Int32)">
            <summary>
            Retries the action a specified number of times.
            The default number of  <paramref name="Tries" /> is 1. 
            The initial attempt is not counted, so the action 
            will be executed at most  <paramref name="Tries" /> + 1 times.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="Tries" /> is less than 1.</exception>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Retry``2(System.Action{``0,``1},System.Int32)">
            <summary>
            Retries the action a specified number of times.
            The default number of  <paramref name="Tries" /> is 1. 
            The initial attempt is not counted, so the action 
            will be executed at most  <paramref name="Tries" /> + 1 times.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="Tries" /> is less than 1.</exception>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Retry``3(System.Action{``0,``1,``2},System.Int32)">
            <summary>
            Retries the action a specified number of times.
            The default number of  <paramref name="Tries" /> is 1. 
            The initial attempt is not counted, so the action 
            will be executed at most  <paramref name="Tries" /> + 1 times.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="Tries" /> is less than 1.</exception>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Retry``4(System.Action{``0,``1,``2,``3},System.Int32)">
            <summary>
            Retries the action a specified number of times.
            The default number of  <paramref name="Tries" /> is 1. 
            The initial attempt is not counted, so the action 
            will be executed at most  <paramref name="Tries" /> + 1 times.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="Tries" /> is less than 1.</exception>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Retry``1(System.Func{``0},System.Int32)">
            <summary>
            Retries the function a specified number of times.
            The default number of  <paramref name="Tries" /> is 1.
            The initial attempt is not counted, so the function 
            will be executed at most  <paramref name="Tries" /> + 1 times.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="Tries" /> is less than 1.</exception>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Retry``2(System.Func{``0,``1},System.Int32)">
            <summary>
            Retries the function a specified number of times.
            The default number of  <paramref name="Tries" /> is 1.
            The initial attempt is not counted, so the function 
            will be executed at most  <paramref name="Tries" /> + 1 times.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="Tries" /> is less than 1.</exception>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Retry``3(System.Func{``0,``1,``2},System.Int32)">
            <summary>
            Retries the function a specified number of times.
            The default number of  <paramref name="Tries" /> is 1.
            The initial attempt is not counted, so the function 
            will be executed at most  <paramref name="Tries" /> + 1 times.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="Tries" /> is less than 1.</exception>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Retry``4(System.Func{``0,``1,``2,``3},System.Int32)">
            <summary>
            Retries the function a specified number of times.
            The default number of <paramref name="Tries" /> is 1.
            The initial attempt is not counted, so the function 
            will be executed at most <paramref name="Tries" /> + 1 times.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Tries" /> is less than 1.</exception>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Retry``5(System.Func{``0,``1,``2,``3,``4},System.Int32)">
            <summary>
            Retries the function a specified number of times.
            The default number of <paramref name="Tries" /> is 1.
            The initial attempt is not counted, so the function 
            will be executed at most <paramref name="Tries" /> + 1 times.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Tries" /> is less than 1.</exception>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Debug``1(System.Action{``0})">
            <summary>
            If an exception occurs while executing <paramref name="In" />, an exception is rethrown that includes detailed parameter data
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Debug``2(System.Action{``0,``1})">
            <summary>
            If an exception occurs while executing <paramref name="In" />, an exception is rethrown that includes detailed parameter data
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Debug``3(System.Action{``0,``1,``2})">
            <summary>
            If an exception occurs while executing <paramref name="In" />, an exception is rethrown that includes detailed parameter data
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Debug``4(System.Action{``0,``1,``2,``3})">
            <summary>
            If an exception occurs while executing <paramref name="In" />, an exception is rethrown that includes detailed parameter data
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Debug``2(System.Func{``0,``1})">
            <summary>
            If an exception occurs while executing <paramref name="In" />, an exception is rethrown that includes detailed parameter data
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Debug``3(System.Func{``0,``1,``2})">
            <summary>
            If an exception occurs while executing <paramref name="In" />, an exception is rethrown that includes detailed parameter data
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Debug``4(System.Func{``0,``1,``2,``3})">
            <summary>
            If an exception occurs while executing <paramref name="In" />, an exception is rethrown that includes detailed parameter data
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Debug``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            If an exception occurs while executing <paramref name="In" />, an exception is rethrown that includes detailed parameter data
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Fail(System.Action)">
            <summary>
            Appends an empty exception to the current method.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Fail``1(System.Action{``0})">
            <summary>
            Appends an empty exception to the current method.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Fail``2(System.Action{``0,``1})">
            <summary>
            Appends an empty exception to the current method.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Fail``3(System.Action{``0,``1,``2})">
            <summary>
            Appends an empty exception to the current method.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Fail``4(System.Action{``0,``1,``2,``3})">
            <summary>
            Appends an empty exception to the current method.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Fail``1(System.Func{``0})">
            <summary>
            Appends an empty exception to the current method.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Fail``2(System.Func{``0,``1})">
            <summary>
            Appends an empty exception to the current method.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Fail``3(System.Func{``0,``1,``2})">
            <summary>
            Appends an empty exception to the current method.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Fail``4(System.Func{``0,``1,``2,``3})">
            <summary>
            Appends an empty exception to the current method.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Fail``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Appends an empty exception to the current method.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Throw(System.Action,System.String)">
            <summary>
            Appends an exception to the current method, with a message.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Throw``1(System.Action{``0},System.String)">
            <summary>
            Appends an exception to the current method, with a message.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Throw``2(System.Action{``0,``1},System.String)">
            <summary>
            Appends an exception to the current method, with a message.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Throw``3(System.Action{``0,``1,``2},System.String)">
            <summary>
            Appends an exception to the current method, with a message.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Throw``4(System.Action{``0,``1,``2,``3},System.String)">
            <summary>
            Appends an exception to the current method, with a message.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Throw``1(System.Func{``0},System.String)">
            <summary>
            Appends an exception to the current method, with a message.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Throw``2(System.Func{``0,``1},System.String)">
            <summary>
            Appends an exception to the current method, with a message.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Throw``3(System.Func{``0,``1,``2},System.String)">
            <summary>
            Appends an exception to the current method, with a message.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Throw``4(System.Func{``0,``1,``2,``3},System.String)">
            <summary>
            Appends an exception to the current method, with a message.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Throw``5(System.Func{``0,``1,``2,``3,``4},System.String)">
            <summary>
            Appends an exception to the current method, with a message.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Report``1(System.Action,System.String,``0)">
            <summary>
            The returned action executes action <paramref name="In" /> and then throws an
            Exception with InnerException <paramref name="Ex" /> and Message <paramref name="Message" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Report``2(System.Action{``0},System.String,``1)">
            <summary>
            The returned action executes action <paramref name="In" /> and then throws an
            Exception with InnerException <paramref name="Ex" /> and Message <paramref name="Message" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Report``3(System.Action{``0,``1},System.String,``2)">
            <summary>
            The returned action executes action <paramref name="In" /> and then throws an
            Exception with InnerException <paramref name="Ex" /> and Message <paramref name="Message" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Report``4(System.Action{``0,``1,``2},System.String,``3)">
            <summary>
            The returned action executes action <paramref name="In" /> and then throws an
            Exception with InnerException <paramref name="Ex" /> and Message <paramref name="Message" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Report``5(System.Action{``0,``1,``2,``3},System.String,``4)">
            <summary>
            The returned action executes action <paramref name="In" /> and then throws an
            Exception with InnerException <paramref name="Ex" /> and Message <paramref name="Message" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Report``2(System.Func{``0},System.String,``1)">
            <summary>
            The returned action executes action <paramref name="In" /> and then throws an
            Exception with InnerException <paramref name="Ex" /> and Message <paramref name="Message" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Report``3(System.Func{``0,``1},System.String,``2)">
            <summary>
            The returned action executes action <paramref name="In" /> and then throws an
            Exception with InnerException <paramref name="Ex" /> and Message <paramref name="Message" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Report``4(System.Func{``0,``1,``2},System.String,``3)">
            <summary>
            The returned action executes action <paramref name="In" /> and then throws an
            Exception with InnerException <paramref name="Ex" /> and Message <paramref name="Message" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Report``5(System.Func{``0,``1,``2,``3},System.String,``4)">
            <summary>
            The returned action executes action <paramref name="In" /> and then throws an
            Exception with InnerException <paramref name="Ex" /> and Message <paramref name="Message" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Report``6(System.Func{``0,``1,``2,``3,``4},System.String,``5)">
            <summary>
            The returned action executes action <paramref name="In" /> and then throws an
            Exception with InnerException <paramref name="Ex" /> and Message <paramref name="Message" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Report``1(System.Action,``0)">
            <summary>
            The returned action executes action <paramref name="In" /> and then throws an
            Exception with InnerrException <paramref name="Ex" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Report``2(System.Action{``0},``1)">
            <summary>
            The returned action executes action <paramref name="In" /> and then throws an
            Exception with InnerrException <paramref name="Ex" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Report``3(System.Action{``0,``1},``2)">
            <summary>
            The returned action executes action <paramref name="In" /> and then throws an
            Exception with InnerrException <paramref name="Ex" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Report``4(System.Action{``0,``1,``2},``3)">
            <summary>
            The returned action executes action <paramref name="In" /> and then throws an
            Exception with InnerrException <paramref name="Ex" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Report``5(System.Action{``0,``1,``2,``3},``4)">
            <summary>
            The returned action executes action <paramref name="In" /> and then throws an
            Exception with InnerrException <paramref name="Ex" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Report``2(System.Func{``0},``1)">
            <summary>
            The returned action executes action <paramref name="In" /> and then throws an
            Exception with InnerrException <paramref name="Ex" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Report``3(System.Func{``0,``1},``2)">
            <summary>
            The returned action executes action <paramref name="In" /> and then throws an
            Exception with InnerrException <paramref name="Ex" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Report``4(System.Func{``0,``1,``2},``3)">
            <summary>
            The returned action executes action <paramref name="In" /> and then throws an
            Exception with InnerrException <paramref name="Ex" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Report``5(System.Func{``0,``1,``2,``3},``4)">
            <summary>
            The returned action executes action <paramref name="In" /> and then throws an
            Exception with InnerrException <paramref name="Ex" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Report``6(System.Func{``0,``1,``2,``3,``4},``5)">
            <summary>
            The returned action executes action <paramref name="In" /> and then throws an
            Exception with InnerrException <paramref name="Ex" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Handle(System.Action)">
            <summary>
            Handle catches all exceptions, directing them to the Default Exception Handler, which you should customize.
            Customize the default handler by setting: L.DefaultExceptionHandler = e => { ... };
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Handle``1(System.Action{``0})">
            <summary>
            Handle catches all exceptions, directing them to the Default Exception Handler, which you should customize.
            Customize the default handler by setting: L.DefaultExceptionHandler = e => { ... };
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Handle``2(System.Action{``0,``1})">
            <summary>
            Handle catches all exceptions, directing them to the Default Exception Handler, which you should customize.
            Customize the default handler by setting: L.DefaultExceptionHandler = e => { ... };
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Handle``3(System.Action{``0,``1,``2})">
            <summary>
            Handle catches all exceptions, directing them to the Default Exception Handler, which you should customize.
            Customize the default handler by setting: L.DefaultExceptionHandler = e => { ... };
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Handle``4(System.Action{``0,``1,``2,``3})">
            <summary>
            Handle catches all exceptions, directing them to the Default Exception Handler, which you should customize.
            Customize the default handler by setting: L.DefaultExceptionHandler = e => { ... };
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Handle``1(System.Func{``0})">
            <summary>
            Handle catches all exceptions, directing them to the Default Exception Handler, which you should customize.
            Customize the default handler by setting: L.DefaultExceptionHandler = e => { ... };
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Handle``2(System.Func{``0,``1})">
            <summary>
            Handle catches all exceptions, directing them to the Default Exception Handler, which you should customize.
            Customize the default handler by setting: L.DefaultExceptionHandler = e => { ... };
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Handle``3(System.Func{``0,``1,``2})">
            <summary>
            Handle catches all exceptions, directing them to the Default Exception Handler, which you should customize.
            Customize the default handler by setting: L.DefaultExceptionHandler = e => { ... };
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Handle``4(System.Func{``0,``1,``2,``3})">
            <summary>
            Handle catches all exceptions, directing them to the Default Exception Handler, which you should customize.
            Customize the default handler by setting: L.DefaultExceptionHandler = e => { ... };
            </summary>
        </member>
        <member name="M:LCore.Extensions.ExceptionExt.Handle``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Handle catches all exceptions, directing them to the Default Exception Handler, which you should customize.
            Customize the default handler by setting: L.DefaultExceptionHandler = e => { ... };
            </summary>
        </member>
        <member name="T:LCore.Extensions.ConvertibleExt">
            <summary>
            Provides extension methods to IConvertible objects.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ConvertibleExt.CanConvertTo``1(System.IConvertible)">
            <summary>
            Returns whether or not an IConvertible object <paramref name="In" /> can be, safely and without 
            any data loss, converted to type <typeparamref name="T" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.ConvertibleExt.CanConvertTo(System.IConvertible,System.Type)">
            <summary>
            Returns whether or not an IConvertible object <paramref name="In" /> can be, safely and without 
            any data loss, converted to type <paramref name="Type"/>
            </summary>
        </member>
        <member name="M:LCore.Extensions.ConvertibleExt.CanConvertToString(System.IConvertible)">
            <summary>
            Returns whether or not an IConvertible object <paramref name="In" /> can be, safely and without 
            any data loss, converted to a string.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ConvertibleExt.ConvertTo(System.IConvertible,System.Type)">
            <summary>
            Converts an IConvertible to type <paramref name="Type"/>, if it is capable.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ConvertibleExt.ConvertTo``1(System.IConvertible)">
            <summary>
            Converts an IConvertible to type <typeparamref name="T" />, if it is capable.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ConvertibleExt.ConvertToString(System.IConvertible)">
            <summary>
            Converts an IConvertible to a string, if it is capable.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ConvertibleExt.TryConvertTo``1(System.IConvertible)">
            <summary>
            Converts an IConvertible to type <typeparamref name="T" />, if it is capable.
            If <paramref name="In" /> cannot be converted, the source will be returned.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ConvertibleExt.TryConvertToString(System.IConvertible)">
            <summary>
            Converts an IConvertible to a string, if it is capable.
            If <paramref name="In" /> cannot be converted, the source will be returned.
            </summary>
        </member>
        <member name="T:LCore.Extensions.ObjectExt">
            <summary>
            Extensions to objects of all types.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ObjectExt.HasProperty(System.Object,System.String)">
            <summary>
            Returns whether a given object has a property with a specific name
            </summary>
            <returns>Whether a given object has a property with a specific name</returns>
        </member>
        <member name="M:LCore.Extensions.ObjectExt.GetPropertyValues``1(``0)">
            <summary>
            Retrieves a Dictionary of all public properties and values.
            If any public property throws an Exception, the Exception will 
            be included as the value for that Key.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ObjectExt.GetProperty(System.Object,System.String)">
            <summary>
            Returns the value of a specific property, if it exists.
            </summary>
            <returns>The value of a specific property, if it exists.</returns>
        </member>
        <member name="M:LCore.Extensions.ObjectExt.GetPropertyNames``1(``0)">
            <summary>
            Retrieves a list of all public property and field names for an object.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ObjectExt.SetProperty(System.Object,System.String,System.Object)">
            <summary>
            Sets the value of a specific property, if it exists.
            </summary>
        </member>
        <member name="M:LCore.Extensions.ObjectExt.Type``1(``0)">
            <summary>
            Returns the type of an object.
            </summary>
        </member>
        <member name="T:LCore.Extensions.Optional.ObjectExt">
            <summary>
            An optional, additional extension method class for all object types
            </summary>
        </member>
        <member name="M:LCore.Extensions.Optional.ObjectExt.CopyFieldsTo``1(``0,System.Object)">
            <summary>
            Copies all possible fields from <paramref name="In" /> to <paramref name="Obj" />.
            Matching field names are transferred to <paramref name="Obj" /> for fields and properties with public setters.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Optional.ObjectExt.CopyFieldsTo``1(``0,System.Object,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Copies all possible fields from <paramref name="In" /> to <paramref name="Obj" />.
            Matching field names are transferred to <paramref name="Obj" /> for fields and properties with public setters.
            
            Optionally you can supply a CustomMapper dictionary to map fields to new field names.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Optional.ObjectExt.CopyFieldsTo``1(``0,System.Object,System.Func{System.String,System.String})">
            <summary>
            Copies all possible fields from <paramref name="In" /> to <paramref name="Obj" />.
            Matching field names are transferred to <paramref name="Obj" /> for fields and properties with public setters.
            
            Optionally you can supply a CustomMapper function to map fields to new field names.
            </summary>
        </member>
        <member name="M:LCore.Extensions.Optional.ObjectExt.Details``1(``0,System.Boolean)">
            <summary>
            Returns a JSON-formatted string detailing the object and its public properties.
            Fields that return an error are hidden by defaults
            </summary>
            <typeparam name="T"></typeparam>
            <param name="In">Source object</param>
            <param name="ShowErrorFields">Hide fields that throw errors? Default is true.</param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.Optional.ObjectExt.FN_CreateArray``1(``0)">
            <summary>
            Returns a function that creates a new Array from parameters
            </summary>
        </member>
        <member name="M:LCore.Extensions.Optional.ObjectExt.FN_CreateArray``1(``0,System.Int32)">
            <summary>
            Returns a function that creates a new Array containing <paramref name="Count" /> instances of <paramref name="In" />
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="Count" /> is less than 0.</exception>
        </member>
        <member name="M:LCore.Extensions.Optional.ObjectExt.FN_CreateList``1(``0)">
            <summary>
            Returns a function that creates a new List from parameters
            </summary>
            <typeparam name="T"></typeparam>
            <param name="In"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.Optional.ObjectExt.FN_CreateList``1(``0,System.Int32)">
            <summary>
            Returns a function that creates a new List from parameters.
            If <paramref name="Count" /> is passed, the List will be filled with <paramref name="Count" /> instances of <paramref name="In" />
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="Count" /> is less than 0.</exception>
        </member>
        <member name="M:LCore.Extensions.Optional.ObjectExt.FN_Func``1(``0)">
            <summary>
            Retrieves a function that returns the input parameter
            </summary>
            <typeparam name="T"></typeparam>
            <param name="In">The parameter will be returned by the function</param>
            <returns>A function that returns the input parameter <paramref name="In" /></returns>
        </member>
        <member name="M:LCore.Extensions.Optional.ObjectExt.FN_If``1(``0)">
            <summary>
            Returns a function that returns true if the object supplied is equal to the Input parameter
            </summary>
            <typeparam name="T"></typeparam>
            <param name="In"></param>
            <returns>A function that returns true if the object supplied is equal to the Input parameter</returns>
        </member>
        <member name="M:LCore.Extensions.Optional.ObjectExt.InitProperties``1(System.Object,``0)">
            <summary>
            Initializes an object's properties of type <typeparamref name="T" /> to <paramref name="InitValue" /> or their default values.
            Only affects properties of type T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="In"></param>
            <param name="InitValue"></param>
            <exception cref="T:System.Reflection.TargetException">Throws an exception if the a property setter throws an exception.</exception>
            <exception cref="T:System.FieldAccessException">Throws an exception if the field cannot be accessed.</exception>
        </member>
        <member name="M:LCore.Extensions.Optional.ObjectExt.IsNull``1(``0)">
            <summary>
            Returns whether the supplied object is null, or equivalent to the default of its type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="In"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.Optional.ObjectExt.Objects_ToString(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Returns a string representation of a set of objects.
            </summary>
            <param name="In">The set of objects</param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.Optional.ObjectExt.SafeEquals(System.Object,System.Object)">
            <summary>
            Safely compare any two Objects whether either is null.
            </summary>
            <param name="In"></param>
            <param name="Obj"></param>
            <returns>True if the objects are equal otherwise false</returns>
        </member>
        <member name="M:LCore.Extensions.Optional.ObjectExt.SupplyTo``1(``0,System.Action{``0})">
            <summary>
            Supplies a parameter <paramref name="Obj" /> so it does not need to be included
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Obj">The parameter supplied</param>
            <param name="In">The action</param>
            <returns>An action with one less parameter input</returns>
        </member>
        <member name="M:LCore.Extensions.Optional.ObjectExt.SupplyTo``2(``0,System.Func{``0,``1})">
            <summary>
            Supplies a parameter <paramref name="Obj" /> so it does not need to be included
            Inserts the parameter #1 in func <paramref name="In" />.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="Obj">The parameter supplied</param>
            <param name="In">The action</param>
            <returns>A func with one less parameter input</returns>
        </member>
        <member name="M:LCore.Extensions.Optional.ObjectExt.ToS(System.Object)">
            <summary>
            Shorthand function to convert any object to a string.
            </summary>
            <param name="In">Object to be converted</param>
            <returns>A String representation of the object passed.</returns>
        </member>
        <member name="M:LCore.Extensions.Optional.ObjectExt.Traverse(System.Object,System.Func{System.Object,System.Object})">
            <summary>
            Traverses an object structure using a traverser function you supply <paramref name="Traverser" />
            </summary>
            <param name="In">Source object</param>
            <param name="Traverser">Traversing function</param>
        </member>
        <member name="M:LCore.Extensions.Optional.ObjectExt.Traverse``1(``0,System.Func{``0,``0})">
            <summary>
            Traverses an object structure using a traverser function you supply <paramref name="Traverser" />
            </summary>
            <typeparam name="T"></typeparam>
            <param name="In">Source object</param>
            <param name="Traverser">Traversing function</param>
        </member>
        <member name="T:LCore.Extensions.BooleanExt">
            <summary>
            Extends booleans, conditional statements, and bitwise logic.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.Not(System.Func{System.Boolean})">
            <summary>
            Inverts the output on a method returning a Boolean.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.Not``1(System.Func{``0,System.Boolean})">
            <summary>
            Inverts the output on a method returning a Boolean.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.Not``2(System.Func{``0,``1,System.Boolean})">
            <summary>
            Inverts the output on a method returning a Boolean.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.Not``3(System.Func{``0,``1,``2,System.Boolean})">
            <summary>
            Inverts the output on a method returning a Boolean.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.Not``4(System.Func{``0,``1,``2,``3,System.Boolean})">
            <summary>
            Inverts the output on a method returning a Boolean.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.If(System.Action,System.Func{System.Boolean})">
            <summary>
            Logical If Statement. If the <paramref name="Condition" /> passed is true, the action passed is executed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.If``1(System.Action,System.Func{``0,System.Boolean})">
            <summary>
            Logical If Statement. If the <paramref name="Condition" /> passed is true, the action passed is executed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.If``2(System.Action,System.Func{``0,``1,System.Boolean})">
            <summary>
            Logical If Statement. If the <paramref name="Condition" /> passed is true, the action passed is executed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.If``3(System.Action,System.Func{``0,``1,``2,System.Boolean})">
            <summary>
            Logical If Statement. If the <paramref name="Condition" /> passed is true, the action passed is executed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.If``4(System.Action,System.Func{``0,``1,``2,``3,System.Boolean})">
            <summary>
            Logical If Statement. If the <paramref name="Condition" /> passed is true, the action passed is executed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.If``1(System.Func{``0},System.Func{System.Boolean})">
            <summary>
            Logical If Statement. If the <paramref name="Condition" /> passed is true, the function passed is executed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.If``2(System.Func{``0},System.Func{``1,System.Boolean})">
            <summary>
            Logical If Statement. If the <paramref name="Condition" /> passed is true, the function passed is executed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.If``3(System.Func{``0},System.Func{``1,``2,System.Boolean})">
            <summary>
            Logical If Statement. If the <paramref name="Condition" /> passed is true, the function passed is executed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.If``4(System.Func{``0},System.Func{``1,``2,``3,System.Boolean})">
            <summary>
            Logical If Statement. If the <paramref name="Condition" /> passed is true, the function passed is executed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.If``5(System.Func{``0},System.Func{``1,``2,``3,``4,System.Boolean})">
            <summary>
            Logical If Statement. If the <paramref name="Condition" /> passed is true, the function passed is executed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.If(System.Action,System.Func{System.Boolean}[])">
            <summary>
            Surrounds the method with multiple condition methods.
            AND operation is applied if multiple conditions are passed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.If``1(System.Action,System.Func{``0,System.Boolean}[])">
            <summary>
            Surrounds the method with multiple condition methods.
            AND operation is applied if multiple conditions are passed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.If``2(System.Action,System.Func{``0,``1,System.Boolean}[])">
            <summary>
            Surrounds the method with multiple condition methods.
            AND operation is applied if multiple conditions are passed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.If``3(System.Action,System.Func{``0,``1,``2,System.Boolean}[])">
            <summary>
            Surrounds the method with multiple condition methods.
            AND operation is applied if multiple conditions are passed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.If``4(System.Action,System.Func{``0,``1,``2,``3,System.Boolean}[])">
            <summary>
            Surrounds the method with multiple condition methods.
            AND operation is applied if multiple conditions are passed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.If``1(System.Func{``0},System.Func{System.Boolean}[])">
            <summary>
            Surrounds the method with multiple condition methods.
            AND operation is applied if multiple conditions are passed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.If``2(System.Func{``0},System.Func{``1,System.Boolean}[])">
            <summary>
            Surrounds the method with multiple condition methods.
            AND operation is applied if multiple conditions are passed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.If``3(System.Func{``0},System.Func{``1,``2,System.Boolean}[])">
            <summary>
            Surrounds the method with multiple condition methods.
            AND operation is applied if multiple conditions are passed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.If``4(System.Func{``0},System.Func{``1,``2,``3,System.Boolean}[])">
            <summary>
            Surrounds the method with multiple condition methods.
            AND operation is applied if multiple conditions are passed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.If``5(System.Func{``0},System.Func{``1,``2,``3,``4,System.Boolean}[])">
            <summary>
            Surrounds the method with multiple condition methods.
            AND operation is applied if multiple conditions are passed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.ElseIf(System.Func{System.Boolean},System.Func{System.Boolean},System.Action)">
            <summary>
            Executes <paramref name="Act" /> if the result of <paramref name="In" /> is false and the result of <paramref name="Condition" /> is true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.ElseIf``1(System.Func{``0,System.Boolean},System.Func{``0,System.Boolean},System.Action{``0})">
            <summary>
            Executes <paramref name="Act" /> if the result of <paramref name="In" /> is false and the result of <paramref name="Condition" /> is true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.ElseIf``2(System.Func{``0,``1,System.Boolean},System.Func{``0,``1,System.Boolean},System.Action{``0,``1})">
            <summary>
            Executes <paramref name="Act" /> if the result of <paramref name="In" /> is false and the result of <paramref name="Condition" /> is true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.ElseIf``3(System.Func{``0,``1,``2,System.Boolean},System.Func{``0,``1,``2,System.Boolean},System.Action{``0,``1,``2})">
            <summary>
            Executes <paramref name="Act" /> if the result of <paramref name="In" /> is false and the result of <paramref name="Condition" /> is true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.ElseIf``4(System.Func{``0,``1,``2,``3,System.Boolean},System.Func{``0,``1,``2,``3,System.Boolean},System.Action{``0,``1,``2,``3})">
            <summary>
            Executes <paramref name="Act" /> if the result of <paramref name="In" /> is false and the result of <paramref name="Condition" /> is true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.ElseIf``1(System.Func{``0},System.Func{System.Boolean},System.Func{``0})">
            <summary>
            Executes <paramref name="Act" /> if the result of <paramref name="In" /> is false and the result of <paramref name="Condition" /> is true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.ElseIf``2(System.Func{``0,``1},System.Func{``0,System.Boolean},System.Func{``0,``1})">
            <summary>
            Executes <paramref name="Act" /> if the result of <paramref name="In" /> is false and the result of <paramref name="Condition" /> is true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.ElseIf``3(System.Func{``0,``1,``2},System.Func{``0,``1,System.Boolean},System.Func{``0,``1,``2})">
            <summary>
            Executes <paramref name="Act" /> if the result of <paramref name="In" /> is false and the result of <paramref name="Condition" /> is true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.ElseIf``4(System.Func{``0,``1,``2,``3},System.Func{``0,``1,``2,System.Boolean},System.Func{``0,``1,``2,``3})">
            <summary>
            Executes <paramref name="Act" /> if the result of <paramref name="In" /> is false and the result of <paramref name="Condition" /> is true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.ElseIf``5(System.Func{``0,``1,``2,``3,``4},System.Func{``0,``1,``2,``3,System.Boolean},System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Executes <paramref name="Act" /> if the result of <paramref name="In" /> is false and the result of <paramref name="Condition" /> is true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.Else(System.Func{System.Boolean},System.Action)">
            <summary>
            Executes <paramref name="Act" /> if the result of <paramref name="In" /> is false.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.Else``1(System.Func{``0,System.Boolean},System.Action{``0})">
            <summary>
            Executes <paramref name="Act" /> if the result of <paramref name="In" /> is false.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.Else``2(System.Func{``0,``1,System.Boolean},System.Action{``0,``1})">
            <summary>
            Executes <paramref name="Act" /> if the result of <paramref name="In" /> is false.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.Else``3(System.Func{``0,``1,``2,System.Boolean},System.Action{``0,``1,``2})">
            <summary>
            Executes <paramref name="Act" /> if the result of <paramref name="In" /> is false.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.Else``4(System.Func{``0,``1,``2,``3,System.Boolean},System.Action{``0,``1,``2,``3})">
            <summary>
            Executes <paramref name="Act" /> if the result of <paramref name="In" /> is false.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.Else``1(System.Func{``0},System.Func{``0})">
            <summary>
            Executes <paramref name="Act" /> if the result of <paramref name="In" /> is false.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.Else``2(System.Func{``0,``1},System.Func{``0,``1})">
            <summary>
            Executes <paramref name="Act" /> if the result of <paramref name="In" /> is false.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.Else``3(System.Func{``0,``1,``2},System.Func{``0,``1,``2})">
            <summary>
            Executes <paramref name="Act" /> if the result of <paramref name="In" /> is false.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.Else``4(System.Func{``0,``1,``2,``3},System.Func{``0,``1,``2,``3})">
            <summary>
            Executes <paramref name="Act" /> if the result of <paramref name="In" /> is false.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.Else``5(System.Func{``0,``1,``2,``3,``4},System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Executes <paramref name="Act" /> if the result of <paramref name="In" /> is false.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.Else``1(System.Func{``0},``0)">
            <summary>
            Returns <paramref name="Result" /> if the result of <paramref name="In" /> is false.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.Else``2(System.Func{``0,``1},``1)">
            <summary>
            Returns <paramref name="Result" /> if the result of <paramref name="In" /> is false.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.Else``3(System.Func{``0,``1,``2},``2)">
            <summary>
            Returns <paramref name="Result" /> if the result of <paramref name="In" /> is false.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.Else``4(System.Func{``0,``1,``2,``3},``3)">
            <summary>
            Returns <paramref name="Result" /> if the result of <paramref name="In" /> is false.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.Else``5(System.Func{``0,``1,``2,``3,``4},``4)">
            <summary>
            Returns <paramref name="Result" /> if the result of <paramref name="In" /> is false.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.Unless(System.Action,System.Func{System.Boolean}[])">
            <summary>
            Surrounds the method with multiple condition methods.
            OR operation is applied if multiple conditions are passed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.Unless``1(System.Action,System.Func{``0,System.Boolean}[])">
            <summary>
            Surrounds the method with multiple condition methods.
            OR operation is applied if multiple conditions are passed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.Unless``2(System.Action,System.Func{``0,``1,System.Boolean}[])">
            <summary>
            Surrounds the method with multiple condition methods.
            OR operation is applied if multiple conditions are passed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.Unless``3(System.Action,System.Func{``0,``1,``2,System.Boolean}[])">
            <summary>
            Surrounds the method with multiple condition methods.
            OR operation is applied if multiple conditions are passed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.Unless``4(System.Action,System.Func{``0,``1,``2,``3,System.Boolean}[])">
            <summary>
            Surrounds the method with multiple condition methods.
            OR operation is applied if multiple conditions are passed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.Unless``1(System.Func{``0},System.Func{System.Boolean}[])">
            <summary>
            Surrounds the method with multiple condition methods.
            OR operation is applied if multiple conditions are passed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.Unless``2(System.Func{``0},System.Func{``1,System.Boolean}[])">
            <summary>
            Surrounds the method with multiple condition methods.
            OR operation is applied if multiple conditions are passed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.Unless``3(System.Func{``0},System.Func{``1,``2,System.Boolean}[])">
            <summary>
            Surrounds the method with multiple condition methods.
            OR operation is applied if multiple conditions are passed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.Unless``4(System.Func{``0},System.Func{``1,``2,``3,System.Boolean}[])">
            <summary>
            Surrounds the method with multiple condition methods.
            OR operation is applied if multiple conditions are passed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.Unless``5(System.Func{``0},System.Func{``1,``2,``3,``4,System.Boolean}[])">
            <summary>
            Surrounds the method with multiple condition methods.
            OR operation is applied if multiple conditions are passed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.And(System.Collections.Generic.IEnumerable{System.Func{System.Boolean}})">
            <summary>
            Combines the conditions using the AND operation.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.And``1(System.Collections.Generic.IEnumerable{System.Func{``0,System.Boolean}})">
            <summary>
            Combines the conditions using the AND operation.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.And``2(System.Collections.Generic.IEnumerable{System.Func{``0,``1,System.Boolean}})">
            <summary>
            Combines the conditions using the AND operation.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.And``3(System.Collections.Generic.IEnumerable{System.Func{``0,``1,``2,System.Boolean}})">
            <summary>
            Combines the conditions using the AND operation.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.And``4(System.Collections.Generic.IEnumerable{System.Func{``0,``1,``2,``3,System.Boolean}})">
            <summary>
            Combines the conditions using the AND operation.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.Or(System.Collections.Generic.IEnumerable{System.Func{System.Boolean}})">
            <summary>
            Combines the conditions using the OR operation.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.Or``1(System.Collections.Generic.IEnumerable{System.Func{``0,System.Boolean}})">
            <summary>
            Combines the conditions using the OR operation.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.Or``2(System.Collections.Generic.IEnumerable{System.Func{``0,``1,System.Boolean}})">
            <summary>
            Combines the conditions using the OR operation.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.Or``3(System.Collections.Generic.IEnumerable{System.Func{``0,``1,``2,System.Boolean}})">
            <summary>
            Combines the conditions using the OR operation.
            </summary>
        </member>
        <member name="M:LCore.Extensions.BooleanExt.Or``4(System.Collections.Generic.IEnumerable{System.Func{``0,``1,``2,``3,System.Boolean}})">
            <summary>
            Combines the conditions using the OR operation.
            </summary>
        </member>
        <member name="T:LCore.Extensions.DictionaryExt">
            <summary>
            Provides extensions for the Dictionary class.
            </summary>
        </member>
        <member name="M:LCore.Extensions.DictionaryExt.Flatten``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Flatten a Dictionary into a List of Tuples
            </summary>
        </member>
        <member name="M:LCore.Extensions.DictionaryExt.Flatten``2(System.Collections.Generic.Dictionary{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Flatten a Dictionary into a List of Tuples
            </summary>
        </member>
        <member name="M:LCore.Extensions.DictionaryExt.Flatten``3(System.Collections.Generic.Dictionary{``0,System.Collections.Generic.Dictionary{``1,``2}})">
            <summary>
            Flatten a multi-level Dictionary into a List of Tuples
            </summary>
        </member>
        <member name="M:LCore.Extensions.DictionaryExt.Flatten``3(System.Collections.Generic.Dictionary{``0,System.Collections.Generic.Dictionary{``1,System.Collections.Generic.IEnumerable{``2}}})">
            <summary>
            Flatten a multi-level Dictionary into a List of Tuples
            </summary>
        </member>
        <member name="M:LCore.Extensions.DictionaryExt.Flatten``4(System.Collections.Generic.Dictionary{``0,System.Collections.Generic.Dictionary{``1,System.Collections.Generic.Dictionary{``2,``3}}})">
            <summary>
            Flatten a multi-level Dictionary into a List of Tuples
            </summary>
        </member>
        <member name="M:LCore.Extensions.DictionaryExt.Flatten``4(System.Collections.Generic.Dictionary{``0,System.Collections.Generic.Dictionary{``1,System.Collections.Generic.Dictionary{``2,System.Collections.Generic.IEnumerable{``3}}}})">
            <summary>
            Flatten a multi-level Dictionary into a List of Tuples
            </summary>
        </member>
        <member name="M:LCore.Extensions.DictionaryExt.Flatten``5(System.Collections.Generic.Dictionary{``0,System.Collections.Generic.Dictionary{``1,System.Collections.Generic.Dictionary{``2,System.Collections.Generic.Dictionary{``3,``4}}}})">
            <summary>
            Flatten a multi-level Dictionary into a List of Tuples
            </summary>
        </member>
        <member name="M:LCore.Extensions.DictionaryExt.Flatten``5(System.Collections.Generic.Dictionary{``0,System.Collections.Generic.Dictionary{``1,System.Collections.Generic.Dictionary{``2,System.Collections.Generic.Dictionary{``3,System.Collections.Generic.IEnumerable{``4}}}}})">
            <summary>
            Flatten a multi-level Dictionary into a List of Tuples
            </summary>
        </member>
        <member name="M:LCore.Extensions.DictionaryExt.Flatten``6(System.Collections.Generic.Dictionary{``0,System.Collections.Generic.Dictionary{``1,System.Collections.Generic.Dictionary{``2,System.Collections.Generic.Dictionary{``3,System.Collections.Generic.Dictionary{``4,``5}}}}})">
            <summary>
            Flatten a multi-level Dictionary into a List of Tuples
            </summary>
        </member>
        <member name="M:LCore.Extensions.DictionaryExt.Flatten``6(System.Collections.Generic.Dictionary{``0,System.Collections.Generic.Dictionary{``1,System.Collections.Generic.Dictionary{``2,System.Collections.Generic.Dictionary{``3,System.Collections.Generic.Dictionary{``4,System.Collections.Generic.IEnumerable{``5}}}}}})">
            <summary>
            Flatten a multi-level Dictionary into a List of Tuples
            </summary>
        </member>
        <member name="M:LCore.Extensions.DictionaryExt.Flatten``7(System.Collections.Generic.Dictionary{``0,System.Collections.Generic.Dictionary{``1,System.Collections.Generic.Dictionary{``2,System.Collections.Generic.Dictionary{``3,System.Collections.Generic.Dictionary{``4,System.Collections.Generic.Dictionary{``5,``6}}}}}})">
            <summary>
            Flatten a multi-level Dictionary into a List of Tuples
            </summary>
        </member>
        <member name="M:LCore.Extensions.DictionaryExt.Flatten``7(System.Collections.Generic.Dictionary{``0,System.Collections.Generic.Dictionary{``1,System.Collections.Generic.Dictionary{``2,System.Collections.Generic.Dictionary{``3,System.Collections.Generic.Dictionary{``4,System.Collections.Generic.Dictionary{``5,System.Collections.Generic.IEnumerable{``6}}}}}}})">
            <summary>
            Flatten a multi-level Dictionary into a List of Tuples
            </summary>
        </member>
        <member name="M:LCore.Extensions.DictionaryExt.Flatten``8(System.Collections.Generic.Dictionary{``0,System.Collections.Generic.Dictionary{``1,System.Collections.Generic.Dictionary{``2,System.Collections.Generic.Dictionary{``3,System.Collections.Generic.Dictionary{``4,System.Collections.Generic.Dictionary{``5,System.Collections.Generic.Dictionary{``6,``7}}}}}}})">
            <summary>
            Flatten a multi-level Dictionary into a List of Tuples
            </summary>
        </member>
        <member name="M:LCore.Extensions.DictionaryExt.Flatten``8(System.Collections.Generic.Dictionary{``0,System.Collections.Generic.Dictionary{``1,System.Collections.Generic.Dictionary{``2,System.Collections.Generic.Dictionary{``3,System.Collections.Generic.Dictionary{``4,System.Collections.Generic.Dictionary{``5,System.Collections.Generic.Dictionary{``6,System.Collections.Generic.IEnumerable{``7}}}}}}}})">
            <summary>
            Flatten a multi-level Dictionary into a List of Tuples
            </summary>
        </member>
        <member name="M:LCore.Extensions.DictionaryExt.Flip``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Flips the Keys and Values in a Dictionary.
            If duplicate Values are found in the source Dictionary, only the first will 
            be included in the result.
            </summary>
        </member>
        <member name="M:LCore.Extensions.DictionaryExt.Merge``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1},System.Func{System.Collections.Generic.KeyValuePair{``0,``1},System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Merges two dictionaries.
            If conflicts occur, they are passed to <paramref name="Conflict" />.
            <paramref name="Conflict" /> is responsible for returning a KeyValuePair with a new name to try.
            To leave an item out, return a KeyValuePair with a null key.
            </summary>
        </member>
        <member name="M:LCore.Extensions.DictionaryExt.AddRange``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Safely adds one dictionary to another.
            If keys from <paramref name="Add" /> already exist in <paramref name="In" />, they will not be added
            </summary>
        </member>
        <member name="M:LCore.Extensions.DictionaryExt.GetAllValues``3(System.Collections.Generic.Dictionary{``0,``2})">
            <summary>
            Returns all values from a dictionary with IEnumerable values.
            </summary>
        </member>
        <member name="M:LCore.Extensions.DictionaryExt.SafeAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Safely adds an item to a dictionary.
            If the dictionary is null or the item exists already, nothing is added.
            </summary>
        </member>
        <member name="M:LCore.Extensions.DictionaryExt.SafeSet``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Safely sets a value for a dictionary item.
            If the item doesn't exist it is added.
            If it does exist it gets updated.
            </summary>
        </member>
        <member name="M:LCore.Extensions.DictionaryExt.SafeGet``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Safely gets an item from a dictionary if it exists.
            </summary>
        </member>
        <member name="M:LCore.Extensions.DictionaryExt.SafeRemove``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary>
            Safely removes an item from a dictionary if it exists.
            </summary>
        </member>
        <member name="M:LCore.Extensions.DictionaryExt.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}})">
            <summary>
            Convert a generic Tuple to a dictionary lookup.
            Lookup is performed in the order of the Tuple items.
            </summary>
        </member>
        <member name="M:LCore.Extensions.DictionaryExt.ToDictionary``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2}})">
            <summary>
            Convert a generic Tuple to a dictionary lookup.
            Lookup is performed in the order of the Tuple items.
            </summary>
        </member>
        <member name="M:LCore.Extensions.DictionaryExt.ToDictionary``4(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3}})">
            <summary>
            Convert a generic Tuple to a dictionary lookup.
            Lookup is performed in the order of the Tuple items.
            </summary>
        </member>
        <member name="M:LCore.Extensions.DictionaryExt.ToDictionary``5(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4}})">
            <summary>
            Convert a generic Tuple to a dictionary lookup.
            Lookup is performed in the order of the Tuple items.
            </summary>
        </member>
        <member name="M:LCore.Extensions.DictionaryExt.ToDictionary``6(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5}})">
            <summary>
            Convert a generic Tuple to a dictionary lookup.
            Lookup is performed in the order of the Tuple items.
            </summary>
        </member>
        <member name="M:LCore.Extensions.DictionaryExt.ToDictionary``7(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>
            Convert a generic Tuple to a dictionary lookup.
            Lookup is performed in the order of the Tuple items.
            </summary>
        </member>
        <member name="M:LCore.Extensions.DictionaryExt.ToDictionary``8(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,``7}})">
            <summary>
            Convert a generic Tuple to a dictionary lookup.
            Lookup is performed in the order of the Tuple items.
            </summary>
        </member>
        <member name="T:LCore.Extensions.DateExt">
            <summary>
            Provides extension methods for DateTime and TimeSpan.
            </summary>
        </member>
        <member name="M:LCore.Extensions.DateExt.Average(System.Collections.Generic.IEnumerable{System.TimeSpan})">
            <summary>
            Returns the average of all timespan elements in Times
            </summary>
        </member>
        <member name="M:LCore.Extensions.DateExt.DayOfWeekNumber(System.DayOfWeek)">
            <summary>
            Takes a DayOfWeek and returns the number of day of the week it is.
            Values are from Sunday: 0 to Saturday: 6
            </summary>
        </member>
        <member name="M:LCore.Extensions.DateExt.CleanDateString(System.DateTime)">
            <summary>
            Returns a cleaned string, with replacements made.
            These strings are safe to be used in a file name.
            </summary>
        </member>
        <member name="M:LCore.Extensions.DateExt.ToSpecification(System.DateTime)">
            <summary>
            Converts a DateTime to string using Date and Time Specification of RFC 822
            </summary>
        </member>
        <member name="M:LCore.Extensions.DateExt.GetMonthName(System.DateTime)">
            <summary>
            Gets the name of the month for the source DateTime <paramref name="Date"/>
            </summary>
        </member>
        <member name="M:LCore.Extensions.DateExt.ToTimeString(System.TimeSpan)">
            <summary>
            Returns a friendly formatted string from a timespan.
            Ex. 1 second
                5 minutes
                2 years
            </summary>
        </member>
        <member name="M:LCore.Extensions.DateExt.TimeDifference(System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Returns a friendly formatted string representing the difference between the two DateTimes.
            If Start is DateTime.MinValue then the output is "Never".
            
            Ex. 5 hours ago
                2 days from now
                1 year ago
            </summary>
        </member>
        <member name="M:LCore.Extensions.DateExt.IsPast(System.DateTime)">
            <summary>
            Returns whether or not the given datetime is in the past
            </summary>
        </member>
        <member name="M:LCore.Extensions.DateExt.IsFuture(System.DateTime)">
            <summary>
            Returns whether or not the given datetime is in the future
            </summary>
        </member>
        <member name="T:LCore.Extensions.FileExt">
            <summary>
            Provides extensions to more easily access the file system.
            </summary>
        </member>
        <member name="M:LCore.Extensions.FileExt.CleanFileName(System.String)">
            <summary>
            Removes non-supported characters from filenames.
            </summary>
        </member>
        <member name="M:LCore.Extensions.FileExt.EnsurePathExists(System.String)">
            <summary>
            Creates a directory path if it doesn't already exist.
            </summary>
        </member>
        <member name="M:LCore.Extensions.FileExt.EveryOtherByte(System.Byte[])">
            <summary>
            Returns a byte[] with every other element skipped.
            Useful for reading data that has been encoded in Unicode.
            </summary>
        </member>
        <member name="M:LCore.Extensions.FileExt.GetFileBlock(System.IO.FileStream,System.Int32,System.Int32)">
            <summary>
            Reads a chunk of file <paramref name="F" /> using <paramref name="BlockSize" /> and <paramref name="BlockNum" /> as index.
            </summary>
        </member>
        <member name="M:LCore.Extensions.FileExt.GetFileStream(System.String)">
            <summary>
            Returns a new FileStream using the default FileMode, FileAccess, and FileShare settings.
            (Open | Read | ReadWrite, Delete)
            </summary>
        </member>
        <member name="M:LCore.Extensions.FileExt.GetFileHash(System.String)">
            <summary>
            Returns the file's hash, determined by the file bytes and 
            L.HashAlgorithm (default to SHA256)
            </summary>
        </member>
        <member name="M:LCore.Extensions.FileExt.GetMemoryStream(System.IO.Stream)">
            <summary>
            Reads the entirety of a Stream and returns it as a MemoryStream.
            </summary>
        </member>
        <member name="M:LCore.Extensions.FileExt.GetStreamHash(System.IO.Stream)">
            <summary>
            Returns the stream's hash, determined by the stream bytes and 
            L.HashAlgorithm (default to SHA256)
            </summary>
        </member>
        <member name="M:LCore.Extensions.FileExt.GetStringHash(System.String)">
            <summary>
            Returns the string's hash, determined by the string bytes and 
            L.HashAlgorithm (default to SHA256)
            </summary>
        </member>
        <member name="M:LCore.Extensions.FileExt.MatchesWildCard(System.String,System.String)">
            <summary>
            Returns whether a string matches a wildcard 
            </summary>
            <param name="In"></param>
            <param name="WildCard"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.FileExt.ReadAllBytes(System.IO.Stream)">
            <summary>
            Reads all bytes from the stream and returns a Byte[].
            </summary>
        </member>
        <member name="T:LCore.Extensions.StringExt">
            <summary>
            Extends strings and char types.
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.Add(System.String,System.Char[])">
            <summary>
            Adds a series of chars to the supplied string and returns it.
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.Add(System.String,System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Adds a collection of chars to the supplied string and returns it.
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.After(System.String,System.String)">
            <summary>
            Returns the contents of <paramref name="In" /> after the first occurrence of 
            <paramref name="Sequence" />.
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.AfterLast(System.String,System.String)">
            <summary>
            Returns the contents of <paramref name="In" /> after the last occurrence of 
            <paramref name="Sequence" />.
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.AlignCenter(System.String,System.Int32,System.Char)">
            <summary>
            Takes a string and returns a padded string aligned Left.
            The pad character defaults to a space ' '.
            If <paramref name="In" /> is longer than <paramref name="Length" />, the result is <paramref name="In" /> truncated to <paramref name="Length" />.
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.AlignCenter(System.String,System.UInt32,System.Char)">
            <summary>
            Takes a string and returns a padded string aligned Left.
            The pad character defaults to a space ' '.
            If <paramref name="In" /> is longer than <paramref name="Length" />, the result is <paramref name="In" /> 
            truncated to <paramref name="Length" />.
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.AlignLeft(System.String,System.Int32,System.Char)">
            <summary>
            Takes a string and returns a padded string aligned Left.
            The pad character defaults to a space ' '.
            If <paramref name="In" /> is longer than <paramref name="Length" />, the result is <paramref name="In" /> truncated to <paramref name="Length" />.
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.AlignLeft(System.String,System.UInt32,System.Char)">
            <summary>
            Takes a string and returns a padded string aligned Left.
            The pad character defaults to a space ' '.
            If <paramref name="In" /> is longer than <paramref name="Length" />, the result is <paramref name="In" /> truncated to <paramref name="Length" />.
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.AlignRight(System.String,System.Int32,System.Char)">
            <summary>
            Takes a string and returns a padded string aligned either on the Left or Right. Left = true for left, false for Right.
            The pad character defaults to a space ' '.
            If <paramref name="In" /> is longer than <paramref name="Length" />, the result is <paramref name="In" /> truncated to <paramref name="Length" />.
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.AlignRight(System.String,System.UInt32,System.Char)">
            <summary>
            Takes a string and returns a padded string aligned either on the Left or Right. Left = true for left, false for Right.
            The pad character defaults to a space ' '.
            If <paramref name="In" /> is longer than <paramref name="Length" />, the result is <paramref name="In" /> truncated to <paramref name="Length" />.
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.Before(System.String,System.String)">
            <summary>
            Returns the contents of <paramref name="In" /> before the first occurrence of 
            <paramref name="Sequence" />.
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.BeforeLast(System.String,System.String)">
            <summary>
            Returns the contents of <paramref name="In" /> before the last occurrence of 
            <paramref name="Sequence" />.
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.ByteArrayToString(System.Byte[])">
            <summary>
            Takes a Byte[] and returns a String representation of the byte array.
            This method cannot fail.
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.CleanCrlf(System.String)">
            <summary>
            Returns a string with line-endings replaced with a temporary character. 
            Used with http binary communication.
            </summary>
            <param name="In"></param>
            <returns>A string with line-endings replaced with a temporary character</returns>
        </member>
        <member name="M:LCore.Extensions.StringExt.UnCleanCrlf(System.String)">
            <summary>
            Returns a string with line-endings returned from a temporary character. 
            Used with http binary communication.
            </summary>
            <param name="In"></param>
            <returns>A string with line-endings returned from a temporary character. </returns>
        </member>
        <member name="M:LCore.Extensions.StringExt.Combine(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Combines an IEnumerable<paramref name="In" /> using <paramref name="CombineStr" /> as a separator string.
            </summary>
            <param name="In"></param>
            <param name="CombineStr"></param>
            <returns>A combined string</returns>
        </member>
        <member name="M:LCore.Extensions.StringExt.Concatenate(System.String,System.Int32,System.String)">
            <summary>
            Concatenates a given String <paramref name="In" /> to length <paramref name="MaxLength" /> minus the length of <paramref name="ConcatenateString" />.
            You can specify a Concatenation String, which defaults to "..."
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.ContainsAny(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Takes a string and returns whether it contains any of the strings in the collection
            This method will not fail.
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.Count(System.String,System.String)">
            <summary>
            Returns the amount of times <paramref name="Search" /> appears in <paramref name="In" />.
            Overlapping sequences are counted multiple times.
            </summary>
            <param name="In">The source to search</param>
            <param name="Search">The search term</param>
            <returns>The amount of times <paramref name="Search" /> appears in <paramref name="In" /></returns>
        </member>
        <member name="M:LCore.Extensions.StringExt.Fill(System.Char,System.Int32)">
            <summary>
            Returns a String filled with <paramref name="Count" /> characters of the source character.
            Throws an exception if <paramref name="Count" /> is less than 0.
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.Fill(System.Char,System.UInt32)">
            <summary>
            Returns a String filled with <paramref name="Count" /> characters of the source character.
            Throws an exception if <paramref name="Count" /> is less than 0.
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.FirstCaps(System.String)">
            <summary>
            Formats an input string so that it is TitleCase.
            This method will not fail.
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.FormatFileSize(System.Int64,System.Int32)">
            <summary>
            Formats a file size Long into a friendly string, up to TB.
            The result will be displayed with <paramref name="Decimals" /> shown. Bytes will not display decimals.
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.FormatFileSize(System.Int32,System.Int32)">
            <summary>
            Formats a file size int into a friendly string, up to TB.
            The result will be displayed with <paramref name="Decimals" /> shown. Bytes will not display decimals.
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.HasMatch(System.String,System.String[])">
            <summary>
            Returns true if any expressions return a Regex match.
            </summary>
            <param name="In">String source</param>
            <param name="Expressions">Expressions to evaluate</param>
            <returns>true if any expressions return a Regex match.</returns>
        </member>
        <member name="M:LCore.Extensions.StringExt.Humanize(System.String)">
            <summary>
            Takes a String and returns a String inserting spaces where there are capital letters in the word. 
            Ex. "VeryGoodExample"  ->  "Very Good Example"
            This method will not fail.
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.IsEmpty(System.String)">
            <summary>
            Pass it any string reference to determine whether a String is null or Empty.
            This method will not fail.
            </summary>
            <param name="In"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.StringExt.IsNumber(System.Char)">
            <summary>
            Returns whether a char is a number.
            This method will not fail.
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.IsSymmetrical(System.String,System.String,System.Double)">
            <summary>
            Returns true if the source <paramref name="In" /> is symmetrical to <paramref name="Compare" />. 
            Symmetry guages how similar two strings are from 0 to 1.
            Default threshhold is 95% Symmetry (0.95).
            </summary>
            <param name="In">The string to compare</param>
            <param name="Compare">The string to compare with</param>
            <param name="Threshhold">Double from 0 to 1, Required threshhold percent default 0.95</param>
            <returns> true if the source <paramref name="In" /> is symmetrical to <paramref name="Compare" />. </returns>
        </member>
        <member name="M:LCore.Extensions.StringExt.JoinLines(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Similar to combine.
            Takes a string collection and joines each item, using "\r\n" as the default newline string.
            This method cannot fail.
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.Like(System.String,System.String)">
            <summary>
            Performs a case-insensitive comparison between the two Strings.
            White space at the beginning and end are ignored.
            This method cannot fail.
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.Lines(System.String)">
            <summary>
            Takes a String and returns its lines in an array.
            This method cannot fail.
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.Matches(System.String,System.String)">
            <summary>
            Returns all matches for <paramref name="In" /> nad Regex <paramref name="Expression" />.
            </summary>
            <param name="In"></param>
            <param name="Expression"></param>
            <returns>All matches for <paramref name="In" /> nad Regex <paramref name="Expression" />.</returns>
        </member>
        <member name="M:LCore.Extensions.StringExt.Pad(System.String,System.Int32,LCore.Extensions.L.Align,System.Char)">
            <summary>
            Takes a string and returns a padded string aligned either on the Left or Right. Left = true for left, false for Right.
            The pad character defaults to a space ' '.
            If <paramref name="In" /> is longer than <paramref name="Length" />, the result is <paramref name="In" /> truncated to <paramref name="Length" />.
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.Pad(System.String,System.UInt32,LCore.Extensions.L.Align,System.Char)">
            <summary>
            Takes a string and returns a padded string aligned either on the Left or Right. Left = true for left, false for Right.
            The pad character defaults to a space ' '.
            If <paramref name="In" /> is longer than <paramref name="Length" />, the result is <paramref name="In" /> truncated to <paramref name="Length" />.
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.Pluralize(System.String,System.Int32)">
            <summary>
            Takes a string and returns a pluralized version of the word or phrase.
            This method will not fail. If the input is empty it will just return "".
            
            <paramref name="Count" /> is used as the number of things you're referring to. 
            If you pass 1 (or -1), pluralization will not be applied
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.Pluralize(System.String,System.UInt32)">
            <summary>
            Takes a string and returns a pluralized version of the word or phrase.
            This method will not fail. If the input is empty it will just return "".
            
            <paramref name="Count" /> is used as the number of things you're referring to. 
            If you pass 1 (or -1), pluralization will not be applied
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.Pluralize(System.String)">
            <summary>
            Takes a string and returns a pluralized version of the word or phrase.
            This method will not fail. If the input is empty it will just return "".
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.RemoveAll(System.String,System.String[])">
            <summary>
            Returns a String based on <paramref name="In" /> with all passed strings removed.
            </summary>
            <param name="In">The source string</param>
            <param name="Find">The strings to remove.</param>
            <returns>A String based on <paramref name="In" /> with all passed strings removed.</returns>
        </member>
        <member name="M:LCore.Extensions.StringExt.ReplaceAll(System.String,System.String,System.String)">
            <summary>
            Takes a string and returns a string with all Occurrences of <paramref name="Find" /> replaced with <paramref name="Replace" />.
            This method will fail if <paramref name="Find" /> is empty.
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.ReplaceAll(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Takes a string and <paramref name="Replacements" /> dictionary. 
            All keys are replaced with the corresponding value.
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.ReplaceLineEndings(System.String,System.String)">
            <summary>
            Takes a string with possibly corrupted line-endings and normalizes them all to \r\n.
            Removes duplicate \r.
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.Reverse(System.String)">
            <summary>
            Takes a String and returns a reversed string. 
            This method cannot fail.
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.Singularize(System.String)">
            <summary>
            Takes a string and returns a singularized version of the word or phrase.
            This method will not fail. If the input is empty it will just return "".
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.Split(System.String,System.String)">
            <summary>
            Takes a String and returns a String[] split by the <paramref name="SplitStr" />
            This method will throw an Exception if <paramref name="SplitStr" /> is empty.
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.SplitWithQuotes(System.String,System.Char)">
            <summary>
            Returns a list of String segments from <paramref name="Line" />, split by <paramref name="SplitBy" />
            Very useful for CSV column formatting.
            </summary>
            <param name="Line">Source string</param>
            <param name="SplitBy">Character to split by</param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.StringExt.Sub(System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Alias for string.SubString with additional argument protection.
            Invalid values for <paramref name="Start"/> and <paramref name="Length"/>
            do not throw exceptions, they are bound to the start and and of <paramref name="In"/>.
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.Sub(System.String,System.UInt32,System.Nullable{System.UInt32})">
            <summary>
            Alias for string.SubString with additional argument protection.
            Invalid values for <paramref name="Start"/> and <paramref name="Length"/>
            do not throw exceptions, they are bound to the start and and of <paramref name="In"/>.
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.Surround(System.String,System.String,System.String)">
            <summary>
            Surrounds the source String with Before and After
            </summary>
            <param name="In"></param>
            <param name="Before"></param>
            <param name="After"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.StringExt.Symmetry(System.String,System.String)">
            <summary>
            Returns the Percent of 'symmetry' between two strings. 
            Symmetry guages how similar two strings are from 0 to 1.
            </summary>
            <param name="In">The string to compare</param>
            <param name="Compare">The string to compare with</param>
            <returns>The Percent of 'symmetry between two strings as a double</returns>
        </member>
        <member name="M:LCore.Extensions.StringExt.Times(System.String,System.Int32)">
            <summary>
            Returns input string <paramref name="In"/> repeated <paramref name="Count"/> times.
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.Times(System.String,System.UInt32)">
            <summary>
            Returns input string <paramref name="In"/> repeated <paramref name="Count"/> times.
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.Times(System.Char,System.Int32)">
            <summary>
            Returns input string <paramref name="In"/> repeated <paramref name="Count"/> times.
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.Times(System.Char,System.UInt32)">
            <summary>
            Returns input string <paramref name="In"/> repeated <paramref name="Count"/> times.
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.ToByteArray(System.String)">
            <summary>
            Takes a String and returns a Byte[] representation of the String.
            This method cannot fail.
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.ToHexString(System.Byte[])">
            <summary>
            Takes an array of Bytes and returns a friendly hexadecimal string.
            Ex. Byte[] { 10, 50, 80, 120, 150, 200, 250, 250 }  ->  "0x0A32507896C8FAFA"
            This method cannot fail.
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.ToStream(System.String)">
            <summary>
            Converts an input string into a memory stream.
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.ToUrlSlug(System.String)">
            <summary>
            Takes a String and returns a URL Slug String.
            Ex. Good Example  -> good-example
            This method cannot fail.
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.Trim(System.String,System.String)">
            <summary>
            Returns <paramref name="In" /> with <paramref name="TrimStr" /> removed from the start and 
            end if it's present. Trims multiple occurrences.
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.TrimEnd(System.String,System.String)">
            <summary>
            Returns <paramref name="In" /> with <paramref name="TrimStr" /> removed from the end 
            if it's present. Trims multiple occurrences.
            </summary>        
        </member>
        <member name="M:LCore.Extensions.StringExt.TrimStart(System.String,System.String)">
            <summary>
            Returns <paramref name="In" /> with <paramref name="TrimStr" /> removed from the start 
            if it's present. Trims multiple occurrences.
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.Words(System.String)">
            <summary>
            Takes a String and returns its words in an array. Removes newlines.
            This method cannot fail.
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.XmlClean(System.String)">
            <summary>
            Returns a String with all HTML tags replaced with "&lt;" and "&gt;"
            </summary>
            <param name="In">Source string</param>
            <returns>A String with all HTML tags replaced with "&lt;" and "&gt;"</returns>
        </member>
        <member name="M:LCore.Extensions.StringExt.UriEncode(System.String)">
            <summary>
            Encode a string, shorthand for Uri.EscapeUriString
            </summary>
        </member>
        <member name="M:LCore.Extensions.StringExt.UriDecode(System.String)">
            <summary>
            Encode a string, shorthand for Uri.UnescapeDataString
            </summary>
        </member>
        <member name="T:LCore.Extensions.LogicExt">
            <summary>
            Provides extensions methods for logical methods: 
            Action and Func
            </summary>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround``1(System.Action{``0},System.Func{``0})">
            <summary>
            Returns a method with the first parameter removed and supplied with the result of Func.
            </summary>
            <typeparam name="U"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround``2(System.Action{``1},System.Func{``0,``1})">
            <summary>
            Returns a method with the first parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround``3(System.Action{``2},System.Func{``0,``1,``2})">
            <summary>
            Returns a method with the first parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround``4(System.Action{``3},System.Func{``0,``1,``2,``3})">
            <summary>
            Returns a method with the first parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround``5(System.Action{``4},System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Returns a method with the first parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround``2(System.Action{``0,``1},System.Func{``0})">
            <summary>
            Returns a method with the first parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround2``2(System.Action{``0,``1},System.Func{``1})">
            <summary>
            Returns a method with the second parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround``3(System.Action{``0,``1},System.Func{``2,``0})">
            <summary>
            Returns a method with the first parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround2``3(System.Action{``0,``1},System.Func{``2,``1})">
            <summary>
            Returns a method with the second parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround``4(System.Action{``0,``1},System.Func{``2,``3,``0})">
            <summary>
            Returns a method with the first parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround2``4(System.Action{``0,``1},System.Func{``2,``3,``1})">
            <summary>
            Returns a method with the second parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround``5(System.Action{``0,``1},System.Func{``2,``3,``4,``0})">
            <summary>
            Returns a method with the first parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround2``5(System.Action{``0,``1},System.Func{``2,``3,``4,``1})">
            <summary>
            Returns a method with the second parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround``3(System.Action{``0,``1,``2},System.Func{``0})">
            <summary>
            Returns a method with the first parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround2``3(System.Action{``0,``1,``2},System.Func{``1})">
            <summary>
            Returns a method with the second parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround3``3(System.Action{``0,``1,``2},System.Func{``2})">
            <summary>
            Returns a method with the third parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround``4(System.Action{``0,``1,``2},System.Func{``3,``0})">
            <summary>
            Returns a method with the first parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround2``4(System.Action{``0,``1,``2},System.Func{``3,``1})">
            <summary>
            Returns a method with the second parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround3``4(System.Action{``0,``1,``2},System.Func{``3,``2})">
            <summary>
            Returns a method with the third parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround``5(System.Action{``0,``1,``2},System.Func{``3,``4,``0})">
            <summary>
            Returns a method with the first parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround2``5(System.Action{``0,``1,``2},System.Func{``3,``4,``1})">
            <summary>
            Returns a method with the second parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround3``5(System.Action{``0,``1,``2},System.Func{``3,``4,``2})">
            <summary>
            Returns a method with the third parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround``4(System.Action{``0,``1,``2,``3},System.Func{``0})">
            <summary>
            Returns a method with the first parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround2``4(System.Action{``0,``1,``2,``3},System.Func{``1})">
            <summary>
            Returns a method with the second parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround3``4(System.Action{``0,``1,``2,``3},System.Func{``2})">
            <summary>
            Returns a method with the third parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround4``4(System.Action{``0,``1,``2,``3},System.Func{``3})">
            <summary>
            Returns a method with the fourth parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround``5(System.Action{``0,``1,``2,``3},System.Func{``4,``0})">
            <summary>
            Returns a method with the first parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="In"/> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="Func"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround2``5(System.Action{``0,``1,``2,``3},System.Func{``4,``1})">
            <summary>
            Returns a method with the second parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround3``5(System.Action{``0,``1,``2,``3},System.Func{``4,``2})">
            <summary>
            Returns a method with the third parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround4``5(System.Action{``0,``1,``2,``3},System.Func{``4,``3})">
            <summary>
            Returns a method with the fourth parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround``2(System.Func{``0,``1},System.Func{``0})">
            <summary>
            Returns a method with the first parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround``3(System.Func{``1,``2},System.Func{``0,``1})">
            <summary>
            Returns a method with the first parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround``4(System.Func{``2,``3},System.Func{``0,``1,``2})">
            <summary>
            Returns a method with the first parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround``5(System.Func{``3,``4},System.Func{``0,``1,``2,``3})">
            <summary>
            Returns a method with the first parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround``6(System.Func{``4,``5},System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Returns a method with the first parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround``3(System.Func{``0,``1,``2},System.Func{``0})">
            <summary>
            Returns a method with the first parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround2``3(System.Func{``0,``1,``2},System.Func{``1})">
            <summary>
            Returns a method with the second parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround``4(System.Func{``0,``1,``3},System.Func{``2,``0})">
            <summary>
            Returns a method with the first parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround2``4(System.Func{``0,``1,``3},System.Func{``2,``1})">
            <summary>
            Returns a method with the second parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround``5(System.Func{``0,``1,``4},System.Func{``2,``3,``0})">
            <summary>
            Returns a method with the first parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround2``5(System.Func{``0,``1,``4},System.Func{``2,``3,``1})">
            <summary>
            Returns a method with the second parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround``6(System.Func{``0,``1,``5},System.Func{``2,``3,``4,``0})">
            <summary>
            Returns a method with the first parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround2``6(System.Func{``0,``1,``5},System.Func{``2,``3,``4,``1})">
            <summary>
            Returns a method with the second parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround``4(System.Func{``0,``1,``2,``3},System.Func{``0})">
            <summary>
            Returns a method with the first parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround2``4(System.Func{``0,``1,``2,``3},System.Func{``1})">
            <summary>
            Returns a method with the second parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround3``4(System.Func{``0,``1,``2,``3},System.Func{``2})">
            <summary>
            Returns a method with the third parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround``5(System.Func{``0,``1,``2,``4},System.Func{``3,``0})">
            <summary>
            Returns a method with the first parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround2``5(System.Func{``0,``1,``2,``4},System.Func{``3,``1})">
            <summary>
            Returns a method with the second parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround3``5(System.Func{``0,``1,``2,``4},System.Func{``3,``2})">
            <summary>
            Returns a method with the third parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround``6(System.Func{``0,``1,``2,``5},System.Func{``3,``4,``0})">
            <summary>
            Returns a method with the first parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround2``6(System.Func{``0,``1,``2,``5},System.Func{``3,``4,``1})">
            <summary>
            Returns a method with the second parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround3``6(System.Func{``0,``1,``2,``5},System.Func{``3,``4,``2})">
            <summary>
            Returns a method with the third parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround``5(System.Func{``0,``1,``2,``3,``4},System.Func{``0})">
            <summary>
            Returns a method with the first parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround2``5(System.Func{``0,``1,``2,``3,``4},System.Func{``1})">
            <summary>
            Returns a method with the second parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround3``5(System.Func{``0,``1,``2,``3,``4},System.Func{``2})">
            <summary>
            Returns a method with the third parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround4``5(System.Func{``0,``1,``2,``3,``4},System.Func{``3})">
            <summary>
            Returns a method with the fourth parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround``6(System.Func{``0,``1,``2,``3,``5},System.Func{``4,``0})">
            <summary>
            Returns a method with the first parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround2``6(System.Func{``0,``1,``2,``3,``5},System.Func{``4,``1})">
            <summary>
            Returns a method with the second parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround3``6(System.Func{``0,``1,``2,``3,``5},System.Func{``4,``2})">
            <summary>
            Returns a method with the third parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Surround4``6(System.Func{``0,``1,``2,``3,``5},System.Func{``4,``3})">
            <summary>
            Returns a method with the fourth parameter removed and supplied with the result of Func. Parameter lists are merged.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="In"></param>
            <param name="Func"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose``1(System.Func{``0},System.Action{``0})">
            <summary>
            Returns a method that uses the Func method as the first parameter to the Outer method. Inverse of Surround.
            </summary>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose``2(System.Func{``1,``0},System.Action{``0})">
            <summary>
            Returns a method that uses the Func method as the first parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose``3(System.Func{``1,``2,``0},System.Action{``0})">
            <summary>
            Returns a method that uses the Func method as the first parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose``4(System.Func{``1,``2,``3,``0},System.Action{``0})">
            <summary>
            Returns a method that uses the Func method as the first parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose``5(System.Func{``1,``2,``3,``4,``0},System.Action{``0})">
            <summary>
            Returns a method that uses the Func method as the first parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose``2(System.Func{``0},System.Action{``0,``1})">
            <summary>
            Returns a method that uses the Func method as the first parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose2``2(System.Func{``1},System.Action{``0,``1})">
            <summary>
            Returns a method that uses the Func method as the second parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose``3(System.Func{``2,``0},System.Action{``0,``1})">
            <summary>
            Returns a method that uses the Func method as the first parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose2``3(System.Func{``2,``1},System.Action{``0,``1})">
            <summary>
            Returns a method that uses the Func method as the second parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose``4(System.Func{``2,``3,``0},System.Action{``0,``1})">
            <summary>
            Returns a method that uses the Func method as the first parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose2``4(System.Func{``2,``3,``1},System.Action{``0,``1})">
            <summary>
            Returns a method that uses the Func method as the second parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose``5(System.Func{``2,``3,``4,``0},System.Action{``0,``1})">
            <summary>
            Returns a method that uses the Func method as the first parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose2``5(System.Func{``2,``3,``4,``1},System.Action{``0,``1})">
            <summary>
            Returns a method that uses the Func method as the second parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose``3(System.Func{``0},System.Action{``0,``1,``2})">
            <summary>
            Returns a method that uses the Func method as the first parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose2``3(System.Func{``1},System.Action{``0,``1,``2})">
            <summary>
            Returns a method that uses the Func method as the second parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose3``3(System.Func{``2},System.Action{``0,``1,``2})">
            <summary>
            Returns a method that uses the Func method as the third parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose``4(System.Func{``3,``0},System.Action{``0,``1,``2})">
            <summary>
            Returns a method that uses the Func method as the first parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose2``4(System.Func{``3,``1},System.Action{``0,``1,``2})">
            <summary>
            Returns a method that uses the Func method as the second parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose3``4(System.Func{``3,``2},System.Action{``0,``1,``2})">
            <summary>
            Returns a method that uses the Func method as the third parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose``5(System.Func{``3,``4,``0},System.Action{``0,``1,``2})">
            <summary>
            Returns a method that uses the Func method as the first parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose2``5(System.Func{``3,``4,``1},System.Action{``0,``1,``2})">
            <summary>
            Returns a method that uses the Func method as the second parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose3``5(System.Func{``3,``4,``2},System.Action{``0,``1,``2})">
            <summary>
            Returns a method that uses the Func method as the third parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose``4(System.Func{``0},System.Action{``0,``1,``2,``3})">
            <summary>
            Returns a method that uses the Func method as the first parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose2``4(System.Func{``1},System.Action{``0,``1,``2,``3})">
            <summary>
            Returns a method that uses the Func method as the second parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose3``4(System.Func{``2},System.Action{``0,``1,``2,``3})">
            <summary>
            Returns a method that uses the Func method as the third parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose4``4(System.Func{``3},System.Action{``0,``1,``2,``3})">
            <summary>
            Returns a method that uses the Func method as the fourth parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose``5(System.Func{``4,``0},System.Action{``0,``1,``2,``3})">
            <summary>
            Returns a method that uses the Func method as the first parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose2``5(System.Func{``4,``1},System.Action{``0,``1,``2,``3})">
            <summary>
            Returns a method that uses the Func method as the second parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose3``5(System.Func{``4,``2},System.Action{``0,``1,``2,``3})">
            <summary>
            Returns a method that uses the Func method as the third parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose4``5(System.Func{``4,``3},System.Action{``0,``1,``2,``3})">
            <summary>
            Returns a method that uses the Func method as the fourth parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose``2(System.Func{``0},System.Func{``0,``1})">
            <summary>
            Returns a method that uses the Func method as the first parameter to the Outer method. Inverse of Surround.
            </summary>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose``3(System.Func{``0,``1},System.Func{``1,``2})">
            <summary>
            Returns a method that uses the Func method as the first parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose``4(System.Func{``0,``1,``2},System.Func{``2,``3})">
            <summary>
            Returns a method that uses the Func method as the first parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose``5(System.Func{``0,``1,``2,``3},System.Func{``3,``4})">
            <summary>
            Returns a method that uses the Func method as the first parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose``6(System.Func{``0,``1,``2,``3,``4},System.Func{``4,``5})">
            <summary>
            Returns a method that uses the Func method as the first parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose``3(System.Func{``0},System.Func{``0,``1,``2})">
            <summary>
            Returns a method that uses the Func method as the first parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose2``3(System.Func{``1},System.Func{``0,``1,``2})">
            <summary>
            Returns a method that uses the Func method as the second parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose``4(System.Func{``2,``0},System.Func{``0,``1,``3})">
            <summary>
            Returns a method that uses the Func method as the first parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose2``4(System.Func{``2,``1},System.Func{``0,``1,``3})">
            <summary>
            Returns a method that uses the Func method as the second parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose``5(System.Func{``2,``3,``0},System.Func{``0,``1,``4})">
            <summary>
            Returns a method that uses the Func method as the first parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose2``5(System.Func{``2,``3,``1},System.Func{``0,``1,``4})">
            <summary>
            Returns a method that uses the Func method as the second parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose``6(System.Func{``2,``3,``4,``0},System.Func{``0,``1,``5})">
            <summary>
            Returns a method that uses the Func method as the first parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose2``6(System.Func{``2,``3,``4,``1},System.Func{``0,``1,``5})">
            <summary>
            Returns a method that uses the Func method as the second parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose``4(System.Func{``0},System.Func{``0,``1,``2,``3})">
            <summary>
            Returns a method that uses the Func method as the first parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose2``4(System.Func{``1},System.Func{``0,``1,``2,``3})">
            <summary>
            Returns a method that uses the Func method as the second parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose3``4(System.Func{``2},System.Func{``0,``1,``2,``3})">
            <summary>
            Returns a method that uses the Func method as the third parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose``5(System.Func{``3,``0},System.Func{``0,``1,``2,``4})">
            <summary>
            Returns a method that uses the Func method as the first parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose2``5(System.Func{``3,``1},System.Func{``0,``1,``2,``4})">
            <summary>
            Returns a method that uses the Func method as the second parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose3``5(System.Func{``3,``2},System.Func{``0,``1,``2,``4})">
            <summary>
            Returns a method that uses the Func method as the third parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose``6(System.Func{``3,``4,``0},System.Func{``0,``1,``2,``5})">
            <summary>
            Returns a method that uses the Func method as the first parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose2``6(System.Func{``3,``4,``1},System.Func{``0,``1,``2,``5})">
            <summary>
            Returns a method that uses the Func method as the second parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose3``6(System.Func{``3,``4,``2},System.Func{``0,``1,``2,``5})">
            <summary>
            Returns a method that uses the Func method as the third parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose``5(System.Func{``0},System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Returns a method that uses the Func method as the first parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose2``5(System.Func{``1},System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Returns a method that uses the Func method as the second parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose3``5(System.Func{``2},System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Returns a method that uses the Func method as the third parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose4``5(System.Func{``3},System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Returns a method that uses the Func method as the fourth parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose``6(System.Func{``4,``0},System.Func{``0,``1,``2,``3,``5})">
            <summary>
            Returns a method that uses the Func method as the first parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose2``6(System.Func{``4,``1},System.Func{``0,``1,``2,``3,``5})">
            <summary>
            Returns a method that uses the Func method as the second parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose3``6(System.Func{``4,``2},System.Func{``0,``1,``2,``3,``5})">
            <summary>
            Returns a method that uses the Func method as the third parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Enclose4``6(System.Func{``4,``3},System.Func{``0,``1,``2,``3,``5})">
            <summary>
            Returns a method that uses the Func method as the fourth parameter to the Outer method. Inverse of Surround.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="Func"></param>
            <param name="Outer"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Cast``2(System.Action{``0})">
            <summary>
            Returns a function that takes a Casts the paramater of the Action to U1
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="U1"></typeparam>
            <param name="In"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Cast``4(System.Action{``0,``1})">
            <summary>
            Returns a function that takes a Casts the paramaters of the Action to U1, U2
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U1"></typeparam>
            <typeparam name="U2"></typeparam>
            <param name="In"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Cast``6(System.Action{``0,``1,``2})">
            <summary>
            Returns a function that takes a Casts the paramaters of the Action to U1, U2, U3
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U1"></typeparam>
            <typeparam name="U2"></typeparam>
            <typeparam name="U3"></typeparam>
            <param name="In"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Cast``8(System.Action{``0,``1,``2,``3})">
            <summary>
            Returns a function that takes a Casts the paramaters of the Action to U1, U2, U3, U4
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U1"></typeparam>
            <typeparam name="U2"></typeparam>
            <typeparam name="U3"></typeparam>
            <typeparam name="U4"></typeparam>
            <param name="In"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Cast``2(System.Func{``0})">
            <summary>
            Returns a function that Casts the output of the Func to U2
            </summary>
            <typeparam name="U1"></typeparam>
            <typeparam name="U2"></typeparam>
            <param name="In"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Cast``4(System.Func{``0,``1})">
            <summary>
            Returns a function that Casts the output of the Func to U2 and the input to T2
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="U1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U2"></typeparam>
            <param name="In"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Cast``6(System.Func{``0,``1,``2})">
            <summary>
            Returns a function that Casts the output of the Func to U2 and the inputs to T3, T4
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="U1"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U2"></typeparam>
            <param name="In"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Cast``8(System.Func{``0,``1,``2,``3})">
            <summary>
            Returns a function that Casts the output of the Func to U2 and the inputs to T4, T5, T6
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="U1"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="U2"></typeparam>
            <param name="In"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.LogicExt.Cast``10(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Returns a function that Casts the output of the Func to U2 and the inputs to T6, T7, T8, T9
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="U1"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="U2"></typeparam>
            <param name="In"></param>
            <returns></returns>
        </member>
        <member name="T:LCore.Extensions.EnumerableExt">
            <summary>
            Provides extensions for list types:
            List`T, T[], IEnumerable`T
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Add``1(``0[],System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a new <typeparamref name="T[][]" /> with the supplied items appended to it.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Add``1(``0[],``0[])">
            <summary>
            Returns a new T[] with the supplied items appended to it.
            </summary>
            
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Add``1(System.Collections.Generic.List{``0},``0[])">
            <summary>
            Appends the supplied List<typeparamref name="T" /> with the supplied items.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Add``1(System.Collections.Generic.List{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Appends the supplied List<typeparamref name="T" /> with the supplied items.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="In"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.AddTo``1(System.Collections.Generic.IEnumerable{``0},System.Collections.ICollection)">
            <summary>
            Adds the item of the supplied collection to the second supplied collection.
            This method tries to look for the Collection's Add method, if it exists.
            </summary>
            <exception cref="T:System.InvalidOperationException">If an 'Add' method cannot be found for <paramref name="Collection" />.</exception>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.All(System.Collections.IEnumerable,System.Func{System.Object,System.Boolean})">
            <summary>
            Returns a Boolean indicating whether all items in the list satisfy the supplied condition.
            Execution will halt once the Condition returns false.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns a Boolean indicating whether all items in the list satisfy the supplied condition.
            Execution will halt once the Condition returns false.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.All(System.Collections.IEnumerable,System.Func{System.Int32,System.Object,System.Boolean})">
            <summary>
            Returns a Boolean indicating whether all items in the list satisfy the supplied condition.
            The int passed to the Func is the 0-based index of the current item.
            Execution will halt once the Condition returns false.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.All``1(System.Collections.IEnumerable,System.Func{System.Int32,``0,System.Boolean})">
            <summary>
            Returns a Boolean indicating whether all items in the list satisfy the supplied condition.
            The int passed to the Func is the 0-based index of the current item.
            Execution will halt once the Condition returns false.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Int32,``0,System.Boolean})">
            <summary>
            Returns a Boolean indicating whether all items in the list satisfy the supplied condition.
            The int passed to the Func is the 0-based index of the current item.
            Execution will halt once the Condition returns false.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Append``1(``0[],``0[])">
            <summary>
            Returns a new <typeparamref name="T[][]" /> with <paramref name="Obj" /> appended to <paramref name="In" />.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Array(System.Collections.IEnumerable)">
            <summary>
            Converts an IEnumerable to an object[].
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Array``1(System.Collections.IEnumerable)">
            <summary>
            Converts an IEnumerable to a <typeparamref name="T[][]" />.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Array``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts an IEnumerable to a <typeparamref name="T[][]" />.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Array``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts an <typeparamref name="T[][]" /> to a <typeparamref name="U[][]" /> for types 
            where <typeparamref name="U" /> : <typeparamref name="T" />. 
            Filters out elements of <paramref name="In" /> that are not of type <typeparamref name="U" />.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Collect``1(System.Collections.IEnumerable,System.Func{``0,``0})">
            <summary>
            Runs a Func`<typeparamref name="T" />,<typeparamref name="T" /> <paramref name="In.Count.Count" /> times and returns a list with the results. 
            Values from the Input collection are used as the parameters. 
            Null values and values that are not of type <typeparamref name="T" /> are excluded.
            This method will fail only if <paramref name="Func" /> throws an exception.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Collect``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0})">
            <summary>
            Runs a Func`<typeparamref name="T"/>,<typeparamref name="T" /> <paramref name="In.Count.Count" /> times and returns a list with the results. 
            Values from the Input collection are used as the parameters.
            Returns a list containing the result of the Func`<typeparamref name="T" />,<typeparamref name="T" />. Null values are excluded.
            This method will fail only if <paramref name="Func" /> throws an exception.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Collect``1(``0[],System.Func{``0,``0})">
            <summary>
            Iterates through a collection, executing the Func`<typeparamref name="T" />,<typeparamref name="T" /> on the input.
            Returns a T[] of the results. Null values are excluded.
            This method will fail only if <paramref name="Func" /> throws an exception.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Collect``1(System.Collections.Generic.List{``0},System.Func{``0,``0})">
            <summary>
            Iterates through a collection, executing the Func`<typeparamref name="T" />,<typeparamref name="T" /> on the input.
            Returns a List<typeparamref name="T" /> of the results. Null values are excluded.
            This method will fail only if <paramref name="Func" /> throws an exception.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Collect(System.Collections.IEnumerable,System.Func{System.Int32,System.Object,System.Object})">
            <summary>
            Runs a Func`Object,Object <paramref name="In.Count.Count" /> times and returns a list with the results. 
            Values from the Input collection are used as the parameters. Null values are excluded.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Collect``1(System.Collections.IEnumerable,System.Func{System.Int32,``0,``0})">
            <summary>
            Runs a Func`<typeparamref name="T" />,<typeparamref name="T" /> <paramref name="In.Count.Count" /> times and returns a list with the results. 
            Values from the Input collection are used as the parameters. 
            Null values and values that are not of type T are excluded.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Collect``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Int32,``0,``0})">
            <summary>
            Runs a Func`<typeparamref name="T" />,<typeparamref name="T" /> <paramref name="In.Count.Count" /> times and returns a list with the results. 
            Values from the Input collection are used as the parameters.
            Returns a list containing the result of the Func`<typeparamref name="T" />,<typeparamref name="T" />. Null values are excluded.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Collect``1(``0[],System.Func{System.Int32,``0,``0})">
            <summary>
            Iterates through a collection, executing the Func`int,<typeparamref name="T" />,<typeparamref name="T" /> on the input. 
            The int passed is the 0-based index of the current item.
            Returns a T[] of the results of the Func. Null values are excluded.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Collect``1(System.Collections.Generic.List{``0},System.Func{System.Int32,``0,``0})">
            <summary>
            Iterates through a collection, executing the Func`int,<typeparamref name="T" />,<typeparamref name="T" /> on the input. 
            The int passed is the 0-based index of the current item.
            Returns a List<typeparamref name="T" /> of the results of the Func. Null values are excluded.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Collect``1(System.Func{``0},System.Int32)">
            <summary>
            Runs a Func<typeparamref name="T" /> <paramref name="Count" /> times and returns a list with the results.
            Returns a list containing the result of the Func<typeparamref name="T" />. Null values are excluded.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Collect``1(System.Func{System.Int32,``0},System.Int32)">
            <summary>
            Runs a Func<typeparamref name="T" /> <paramref name="Count" /> times and returns a list with the results.
            Returns a list containing the result of the Func<typeparamref name="T" />. Null values are excluded.
            The int passed to the Func is the 0-based index of the current item.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.CollectStr(System.String,System.Func{System.Char,System.Char})">
            <summary>
            Iterates through a String, applying an action to each char.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.CollectStr``1(System.Collections.Generic.List{``0},System.Func{System.Int32,``0,System.String})">
            <summary>
            Iterates through a collection, collecting the results of the passed Func`int,<typeparamref name="T" />,string.
            The int passed is the index of the current item.
            Returns a string concatenation of the results of the Func.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.CollectStr``1(``0[],System.Func{System.Int32,``0,System.String})">
            <summary>
            Iterates through a collection, collecting the results of the passed Func`int,<typeparamref name="T" />,string.
            The int passed is the index of the current item.
            Returns a string concatenation of the results of the Func.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.CollectStr``2(``1,System.Func{System.Int32,``0,System.String})">
            <summary>
            Iterates through a collection, collecting the results of the passed Func`int,<typeparamref name="T" />,string.
            The int passed is the index of the current item.
            Returns a string concatenation of the results of the Func.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Combine(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Combines a list of strings with no separator.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Combine(System.Collections.Generic.IEnumerable{System.String},System.Char)">
            <summary>
            Joins a list of strings with a separator character.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Combine``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Convert a list of IConvertible to strings, then joins them with a separator string.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Combine``1(System.Collections.Generic.IEnumerable{``0},System.Char)">
            <summary>
            Convert a list of IConvertible to strings, then joins them with a separator character.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Convert(System.Collections.IEnumerable,System.Func{System.Object,System.Object})">
            <summary>
            Iterates through a collection, returning a List`Object containing the results of the passed Func`Object,Object.
            Null values are ignored.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Convert``2(``0[],System.Func{``0,``1})">
            <summary>
            Iterates through a collection, returning a U[] containing the results of the passed Func`<typeparamref name="T" />,<typeparamref name="U" />.
            Null values are ignored.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Convert``2(System.Collections.Generic.List{``0},System.Func{``0,``1})">
            <summary>
            Iterates through a collection, returning a List`<typeparamref name="U" /> containing the results of the passed Func`<typeparamref name="T" />,<typeparamref name="U" />.
            Null values are ignored.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Convert``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Iterates through a collection, returning a List`<typeparamref name="U" /> containing the results of the passed Func`<typeparamref name="T" />,<typeparamref name="U" />.
            Null values are ignored.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.ConvertAll(System.Collections.IEnumerable,System.Func{System.Object,System.Collections.Generic.IEnumerable{System.Object}})">
            <summary>
            Iterates over <paramref name="In" />, passing each item to <paramref name="Func" />.
            Func can return multiple objects. 
            They are all collected and returned in one list.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.ConvertAll``2(System.Collections.IEnumerable,System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Iterates over <paramref name="In" />, passing each item to <paramref name="Func" />.
            Func can return multiple objects. 
            They are all collected and returned in one list.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.ConvertAll``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Iterates over <paramref name="In" />, passing each item to <paramref name="Func" />.
            Func can return multiple objects. 
            They are all collected and returned in one list.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.ConvertAll``2(``0[],System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Iterates over <paramref name="In" />, passing each item to <paramref name="Func" />.
            Func can return multiple objects. 
            They are all collected and returned in one array.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.ConvertAll``2(System.Collections.Generic.List{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Iterates over <paramref name="In" />, passing each item to <paramref name="Func" />.
            Func can return multiple objects. 
            They are all collected and returned in one list.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Convert(System.Collections.IEnumerable,System.Func{System.Int32,System.Object,System.Object})">
            <summary>
            Iterates through a collection, returning a List`Object containing the results of the passed Func`Object,Object.
            The int passed is the 0-based index of the current item.
            Null values are ignored.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Convert``2(``0[],System.Func{System.Int32,``0,``1})">
            <summary>
            Iterates through a collection, returning a U[] containing the results of the passed Func`<typeparamref name="T" />,<typeparamref name="U" />.
            The int passed is the 0-based index of the current item.
            Null values are ignored.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Convert``2(System.Collections.Generic.List{``0},System.Func{System.Int32,``0,``1})">
            <summary>
            Iterates through a collection, returning a List`<typeparamref name="U" /> containing the results of the passed Func`int,<typeparamref name="T" />,<typeparamref name="U" />.
            The int passed is the 0-based index of the current item.
            Null values are ignored.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Convert``2(System.Collections.Generic.IEnumerable{``0},System.Func{System.Int32,``0,``1})">
            <summary>
            Iterates through a collection, returning a List`<typeparamref name="U" /> containing the results of the passed Func`int,<typeparamref name="T" />,<typeparamref name="U" />.
            The int passed is the 0-based index of the current item.
            Null values are ignored.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Count``1(``0)">
            <summary>
            Returns the size of a collection
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Count``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns the number of items in the collection that are equivalent to Obj.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the number of items in the collection that cause <paramref name="Condition"/> to return true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Cycle(System.Collections.IEnumerable,System.Func{System.Object,System.Boolean})">
            <summary>
            Cycles through a list of objects indefinitely.
            If <paramref name="Continue" /> returns true at the end, the set of objects will be iterated again.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Cycle``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Cycles through a list of objects indefinitely.
            If <paramref name="Continue" /> returns true at the end, the set of objects will be iterated again.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Each(System.Collections.IEnumerable,System.Action{System.Object})">
            <summary>
            Iterates through every item in a collection, executing the passed Action.
            This method will fail only if <paramref name="Func" /> throws an exception.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Each``1(System.Collections.IEnumerable,System.Action{``0})">
            <summary>
            Iterates through every item in a collection, executing the passed Action.
            The collection items are used as the parameters to the Action.
            This method will fail only if <paramref name="Func" /> throws an exception.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Iterates through every item in a collection, executing the passed Action.
            The collection items are used as the parameters to the Action.
            This method will fail only if <paramref name="Func" /> throws an exception.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Each(System.Collections.IEnumerable,System.Action{System.Int32,System.Object})">
            <summary>
            Iterates through every item in a collection, executing the passed Action`int,Object.
            The int passed to the Action is the 0-based index of the current item.
            The collection items are used as the parameters to the Func`int,Object.
            This method will fail only if <paramref name="Func" /> throws an exception.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Each``1(System.Collections.IEnumerable,System.Action{System.Int32,System.Object})">
            <summary>
            Iterates through every item in a collection, executing the passed Action`int,Object.
            The int passed to the Action is the 0-based index of the current item.
            The collection items are used as the parameters to the Action`int,Object.
            This method will fail only if <paramref name="Func" /> throws an exception.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{System.Int32,``0})">
            <summary>
            Iterates through every item in a collection, executing the passed Action`int,<typeparamref name="T" />.
            The int passed to the Action is the 0-based index of the current item.
            The collection items are used as the parameters to the Action`int,<typeparamref name="T" />.
            This method will fail only if <paramref name="Func" /> throws an exception.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Each``1(System.Action{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Performs the supplied action on each T in <paramref name="Obj" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Equivalent(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Compares the contents of two IEnumerable.
            Returns true if their count and all contents are the same.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Fill``1(``0[],``0)">
            <summary>
            Returns a new T[] containing <paramref name="In.Count.Count" /> entries containing the passed Obj.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Fill``1(System.Collections.Generic.List{``0},``0)">
            <summary>
            Returns a new List<typeparamref name="T" /> containing <paramref name="In.Count.Count" /> entries containing the passed Obj.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="In"></param>
            <param name="Obj"></param>
            <returns></returns>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Fill``1(``0[],System.Func{``0,``0})">
            <summary>
            Returns a new T[] containing <paramref name="In.Count.Count" /> entries using <paramref name="Filler"/>
            to generate entries.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Filter``1(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Returns a new List<typeparamref name="T" /> from the supplied collection. 
            Values that are null or are not of type T are not included.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Filter``2(``0[],System.Boolean)">
            <summary>
            Returns a new U[] from the supplied collection. 
            Values that are null or are not of type U are not included.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Filter``2(System.Collections.Generic.List{``0},System.Boolean)">
            <summary>
            Returns a new U[] from the supplied collection. 
            Values that are null or are not of type U are not included.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.First``1(System.Collections.IEnumerable,System.Func{``0,System.Boolean})">
            <summary>
            Returns the first item in <paramref name="In"/> that causes <paramref name="Condition"/> to return true.
            Returns null if <paramref name="In"/> is null or empty or <paramref name="Condition"/> never returns true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.First``1(``0[],System.Func{System.Object,System.Boolean})">
            <summary>
            Returns the first item in <paramref name="In"/> that causes <paramref name="Condition"/> to return true.
            Returns null if <paramref name="In"/> is null or empty or <paramref name="Condition"/> never returns true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the first item in <paramref name="In"/> that causes <paramref name="Condition"/> to return true.
            Returns null if <paramref name="In"/> is null or empty or <paramref name="Condition"/> never returns true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.First``1(System.Collections.IEnumerable,System.Int32,System.Func{``0,System.Boolean})">
            <summary>
            Returns the first <paramref name="Count"/> Items in <paramref name="In"/> that causes <paramref name="Condition"/> to return true.
            Returns an empty list if <paramref name="In"/> is null or empty or <paramref name="Condition"/> never returns true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.First``1(System.Collections.IEnumerable,System.UInt32,System.Func{``0,System.Boolean})">
            <summary>
            Returns the first <paramref name="Count"/> Items in <paramref name="In"/> that causes <paramref name="Condition"/> to return true.
            Returns an empty list if <paramref name="In"/> is null or empty or <paramref name="Condition"/> never returns true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.First``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Boolean})">
            <summary>
            Returns the first <paramref name="Count"/> Items in <paramref name="In"/> that causes <paramref name="Condition"/> to return true.
            Returns an empty list if <paramref name="In"/> is null or empty or <paramref name="Condition"/> never returns true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.First``1(System.Collections.Generic.IEnumerable{``0},System.UInt32,System.Func{``0,System.Boolean})">
            <summary>
            Returns the first <paramref name="Count"/> Items in <paramref name="In"/> that causes <paramref name="Condition"/> to return true.
            Returns an empty list if <paramref name="In"/> is null or empty or <paramref name="Condition"/> never returns true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.First``1(``0[],System.Int32,System.Func{``0,System.Boolean})">
            <summary>
            Returns the first <paramref name="Count"/> Items in <paramref name="In"/> that causes <paramref name="Condition"/> to return true.
            Returns an empty array if <paramref name="In"/> is null or empty or <paramref name="Condition"/> never returns true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.First``1(``0[],System.UInt32,System.Func{``0,System.Boolean})">
            <summary>
            Returns the first <paramref name="Count"/> Items in <paramref name="In"/> that causes <paramref name="Condition"/> to return true.
            Returns an empty array if <paramref name="In"/> is null or empty or <paramref name="Condition"/> never returns true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.First``1(System.Collections.IEnumerable,``0)">
            <summary>
            Returns the first Object in <paramref name="In"/> that causes is equal to <paramref name="Object"/>.
            Returns null if <paramref name="Object"/> is null or is not found.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Flatten``1(System.Collections.IEnumerable)">
            <summary>
            Iterates through a collection and sub-collections and returns a flattened List<typeparamref name="T" />. 
            Ignores all Objects that are not of type T as well as nulls.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.GetAt(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Returns the item at the specified index.
            If the index is out of range, null is returned.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.GetAt(System.Collections.IEnumerable,System.UInt32)">
            <summary>
            Returns the item at the specified index.
            If the index is out of range, null is returned.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.GetAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns the item at the specified index.
            If the index is out of range, null is returned.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.GetAt``1(System.Collections.Generic.IEnumerable{``0},System.UInt32)">
            <summary>
            Returns the item at the specified index.
            If the index is out of range, null is returned.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.GetAtIndices``1(``0[],System.Int32[])">
            <summary>
            Returns a new T[] containing the items at the specified indexes.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.GetAtIndices``1(System.Collections.IEnumerable,System.Int32[])">
            <summary>
            Returns a new List`Object containing the items at the specified indexes.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.GetAtIndices``1(System.Collections.Generic.IEnumerable{``0},System.Int32[])">
            <summary>
            Returns a new List<typeparam name="T" /> containing the items at the specified indexes.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Group``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Groups items implementing interface IGroup from an IEnumerable into a Dictionary`string,List`T` />" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Group``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Groups items into a dictionary using a custom indexer. 
            The result of the indexer will be used as the Key for each element.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.GroupTwice``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            Groups items into a 2-level dictionary using 2 custom indexers. 
            The result of the indexers will be used as the Keys for each element.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Has``1(System.Collections.IEnumerable,``0)">
            <summary>
            Returns whether the collection contains an object equivalent to Obj.
            Execution will stop immediately if an object is found.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Has``1(System.Collections.IEnumerable,System.Int32,``0)">
            <summary>
            Returns true if <paramref name="In"/> has exactly <paramref name="Count"/>
            instances of <paramref name="Obj"/>.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Has``1(System.Collections.IEnumerable,System.UInt32,``0)">
            <summary>
            Returns true if <paramref name="In"/> has exactly <paramref name="Count"/>
            instances of <paramref name="Obj"/>.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.HasAny(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Returns whether or not the source IEnumerable <paramref name="In" /> contains any of the elements from <paramref name="Obj" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.HasAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns whether or not the source T <paramref name="In" /> contains any of the elements from <paramref name="Obj" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.HasAny(System.Collections.IEnumerable,System.Object[])">
            <summary>
            Returns whether or not the source IEnumerable <paramref name="In" /> contains any of the elements from <paramref name="Obj" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.HasAny``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Returns whether or not the source T <paramref name="In" /> contains any of the elements from <paramref name="Obj" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Has``1(System.Collections.IEnumerable,System.Func{``0,System.Boolean})">
            <summary>
            Returns whether the collection contains an object that receives a true value from the condition when passed to it.
            Execution will stop immediately if a true value is found.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Has``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns whether the collection contains an object that receives a true value from the condition when passed to it.
            Execution will stop immediately if a true value is found.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.HasIndex(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Returns whether or not a given IEnumerable has an <paramref name="Index" />.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.HasIndex(System.Collections.IEnumerable,System.UInt32)">
            <summary>
            Returns whether or not a given IEnumerable has an <paramref name="Index" />.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Index``1(System.Collections.IEnumerable,System.Func{System.Object,``0})">
            <summary>
            Converts an IEnumerable to a Dictionary, using an indexer.
            Keys map to values 1-to-1, duplicate key values will be ignored. 
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Index``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Converts an IEnumerable to a Dictionary, using an indexer.
            Keys map to values 1-to-1, duplicate key values will be ignored. 
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.IndexTwice``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            Indexes an IEnumerable into a two-level Dictionary.
            Using, two indexers, if keys are the same, duplicates will be ignored.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.IndexOf``1(System.Collections.IEnumerable,System.Func{``0,System.Boolean})">
            <summary>
            Iterates over <paramref name="In" /> and returns the index of the first true result from <paramref name="Func" />.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Iterates over <paramref name="In" /> and returns the index of the first true result from <paramref name="Func" />.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.IsEmpty(System.Collections.IEnumerable)">
            <summary>
            Returns whether or not this supplied is null or empty.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Last``1(System.Collections.IEnumerable,System.Func{``0,System.Boolean})">
            <summary>
            Returns the Last item in <paramref name="In"/> that causes <paramref name="Condition"/> to return true.
            Returns null if <paramref name="In"/> is null or empty or <paramref name="Condition"/> never returns true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Last``1(``0[],System.Func{System.Object,System.Boolean})">
            <summary>
            Returns the Last item in <paramref name="In"/> that causes <paramref name="Condition"/> to return true.
            Returns null if <paramref name="In"/> is null or empty or <paramref name="Condition"/> never returns true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the Last item in <paramref name="In"/> that causes <paramref name="Condition"/> to return true.
            Returns null if <paramref name="In"/> is null or empty or <paramref name="Condition"/> never returns true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Last``1(System.Collections.IEnumerable,System.Int32,System.Func{``0,System.Boolean})">
            <summary>
            Returns the Last <paramref name="Count"/> Items in <paramref name="In"/> that causes <paramref name="Condition"/> to return true.
            Returns an empty list if <paramref name="In"/> is null or empty or <paramref name="Condition"/> never returns true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Last``1(System.Collections.IEnumerable,System.UInt32,System.Func{``0,System.Boolean})">
            <summary>
            Returns the Last <paramref name="Count"/> Items in <paramref name="In"/> that causes <paramref name="Condition"/> to return true.
            Returns an empty list if <paramref name="In"/> is null or empty or <paramref name="Condition"/> never returns true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Last``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Boolean})">
            <summary>
            Returns the Last <paramref name="Count"/> Items in <paramref name="In"/> that causes <paramref name="Condition"/> to return true.
            Returns an empty list if <paramref name="In"/> is null or empty or <paramref name="Condition"/> never returns true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Last``1(System.Collections.Generic.IEnumerable{``0},System.UInt32,System.Func{``0,System.Boolean})">
            <summary>
            Returns the Last <paramref name="Count"/> Items in <paramref name="In"/> that causes <paramref name="Condition"/> to return true.
            Returns an empty list if <paramref name="In"/> is null or empty or <paramref name="Condition"/> never returns true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Last``1(``0[],System.Int32,System.Func{``0,System.Boolean})">
            <summary>
            Returns the Last <paramref name="Count"/> Items in <paramref name="In"/> that causes <paramref name="Condition"/> to return true.
            Returns an empty array if <paramref name="In"/> is null or empty or <paramref name="Condition"/> never returns true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Last``1(``0[],System.UInt32,System.Func{``0,System.Boolean})">
            <summary>
            Returns the Last <paramref name="Count"/> Items in <paramref name="In"/> that causes <paramref name="Condition"/> to return true.
            Returns an empty array if <paramref name="In"/> is null or empty or <paramref name="Condition"/> never returns true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Last``1(System.Collections.IEnumerable,``0)">
            <summary>
            Returns the Last Object in <paramref name="In"/> that causes is equal to <paramref name="Object"/>.
            Returns null if <paramref name="Object"/> is null or is not found.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.List(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Returns a new List`Object from the supplied collection.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.List``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Creates a new List<typeparamref name="T" /> from the supplied collection.
            This method cannot fail.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.List``1(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Returns a new List<typeparamref name="T" /> from the supplied collection.
            Nulls and values that are not of type <typeparamref name="T" /> are not included.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.List``2(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Returns a new List`<typeparamref name="U" /> from the supplied collection<typeparamref name="T" />.
            Nulls and values that are not of type U are not included.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Move``1(``0[],System.Int32,System.Int32)">
            <summary>
            Moves items in an array, recursively shifting items where needed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Move(System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            Moves items in an IList, shifting items where needed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Named(System.Collections.IEnumerable,System.String)">
            <summary>
            Returns all items within <paramref name="In" /> that have the given <paramref name="Name" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Named``1(``0[],System.String)">
            <summary>
            Returns all items within <paramref name="In" /> that have the given <paramref name="Name" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Named``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Returns all items within <paramref name="In" /> that have the given <paramref name="Name" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Named(System.Collections.IEnumerable,System.String,System.Func{System.Object,System.String})">
            <summary>
            Returns all items within <paramref name="In" /> that have the given <paramref name="Name" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Named``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.String})">
            <summary>
            Returns all items within <paramref name="In" /> that have the given <paramref name="Name" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Named``1(``0[],System.String,System.Func{``0,System.String})">
            <summary>
            Returns all items within <paramref name="In" /> that have the given <paramref name="Name" />
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Random``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Boolean)">
            <summary>
            Returns a new List`<typeparamref name="T" /> containing <paramref name="Count" /> random items from the collection.
            If Count is higher than In.Count, an ArgumentException will be thrown.
            This method will not include any single index more than once unless AllowDuplicates is set to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Random``1(System.Collections.Generic.IEnumerable{``0},System.UInt32,System.Boolean)">
            <summary>
            Returns a new List`<typeparamref name="T" /> containing <paramref name="Count" /> random items from the collection.
            If Count is higher than In.Count, an ArgumentException will be thrown.
            This method will not include any single index more than once unless AllowDuplicates is set to true.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Random``1(``0[],System.Int32,System.Boolean)">
            <summary>
            Returns a new <typeparamref name="T[][]" /> containing <paramref name="Count" /> random items from the source <typeparamref name="T[][]" />
            If <paramref name="Count" /> is higher than In.Count, an ArgumentException will be thrown.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Random``1(``0[],System.UInt32,System.Boolean)">
            <summary>
            Returns a new <typeparamref name="T[][]" /> containing <paramref name="Count" /> random items from the source <typeparamref name="T[][]" />
            If <paramref name="Count" /> is higher than In.Count, an ArgumentException will be thrown.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Random``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns 1 random item from the collection.
            If the collection is empty, null is returned.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Remove``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Returns a new List<typeparamref name="T" /> that contains no instances of any object passed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Remove``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns a new List<typeparamref name="T" /> that contains no instances of any object that evokes a true result from the passed Func`<typeparamref name="T" />,Boolean.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Remove``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Int32,``0,System.Boolean})">
            <summary>
            Returns a new List<typeparamref name="T" /> that contains no instances of any object that evokes a true result from the passed 
            Func`int,<typeparamref name="T" />,Boolean.
            The int passed to the function is the 0-based index of the current item.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.RemoveAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32[])">
            <summary>
            Returns a new List<typeparamref name="T" />, excluding any indexes passed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.RemoveAt``1(``0[],System.Int32[])">
            <summary>
            Returns a new T[], excluding any indexes passed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.RemoveDuplicate``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Removes duplicate items from an enumerable using <paramref name="Indexer" /> to determine 
            uniqueness.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.RemoveDuplicate``2(``0[],System.Func{``0,``1})">
            <summary>
            Removes duplicate items from an enumerable using <paramref name="Indexer" /> to determine 
            uniqueness.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.RemoveDuplicate``2(System.Collections.IEnumerable,System.Func{``0,``1})">
            <summary>
            Removes duplicate items from an enumerable using <paramref name="Indexer" /> to determine 
            uniqueness.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.RemoveDuplicates``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a new List<typeparamref name="T" /> with duplicates removed (items with equivalent values).
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.RemoveDuplicates``1(``0[])">
            <summary>
            Returns a new List<typeparamref name="T" /> with duplicates removed (items with equivalent values).
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.RemoveDuplicates``1(System.Collections.IEnumerable)">
            <summary>
            Returns a new List`Object with duplicates removed (items with equivalent values).
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Mirror``1(``0[])">
            <summary>
            Returns a new array with the item orders reversed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Mirror``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a new List<typeparamref name="T" /> with the order of the items reversed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Mirror``1(System.Collections.IEnumerable)">
            <summary>
            Returns a new List`Object with the order of the items reversed.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Select``1(``0[],System.Func{``0,System.Boolean})">
            <summary>
            Returns a new T[] containing items from In that evoke a true result from the passed Func`<typeparamref name="T" />,Boolean.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Select``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns a new List<typeparamref name="T" /> containing items from In that evoke a true result from the passed Func`<typeparamref name="T" />,Boolean.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Select``1(System.Collections.IEnumerable,System.Func{``0,System.Boolean})">
            <summary>
            Returns a new List`Object containing items from In that evoke a true result from the passed 
            Func`Object,Boolean />.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Select``1(System.Collections.IEnumerable,System.Func{System.Int32,``0,System.Boolean})">
            <summary>
            Returns a new List`Object containing items from In that evoke a true result from the passed Func`int,Object,Boolean.
            The int passed to the Func is the 0-based index of the current item.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Select``1(``0[],System.Func{System.Int32,``0,System.Boolean})">
            <summary>
            Returns a new T[] containing items from In that evoke a true result from the passed Func`int,<typeparamref name="T" />,Boolean.
            The int passed to the Func is the 0-based index of the current item.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Select``1(System.Collections.Generic.List{``0},System.Func{System.Int32,``0,System.Boolean})">
            <summary>
            Returns a new List<typeparamref name="T" /> containing items from In that evoke a true result from the passed Func`<typeparamref name="T" />,Boolean.
            The int passed to the Func is the 0-based index of the current item.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Select``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Int32,``0,System.Boolean})">
            <summary>
            Returns a new List<typeparamref name="T" /> containing items from In that evoke a true result from the passed Func`<typeparamref name="T" />,Boolean.
            The int passed to the Func is the 0-based index of the current item.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.SetAt``1(System.Collections.IEnumerable,System.Int32,``0)">
            <summary>
            Sets the item in the collection at <paramref name="Index" /> to <paramref name="Value" />.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.SetAt``1(System.Collections.IEnumerable,System.UInt32,``0)">
            <summary>
            Sets the item in the collection at <paramref name="Index" /> to <paramref name="Value" />.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.SetAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0)">
            <summary>
            Sets the item in the collection at <paramref name="Index" /> to <paramref name="Value" />.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.SetAt``1(System.Collections.Generic.IEnumerable{``0},System.UInt32,``0)">
            <summary>
            Sets the item in the collection at <paramref name="Index" /> to <paramref name="Value" />.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Shuffle``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a new List<typeparamref name="T" /> with the item order randomized.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Shuffle``1(``0[])">
            <summary>
            Returns a new T[] with the item order randomized.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Shuffle``1(System.Collections.IEnumerable)">
            <summary>
            Returns a new List<typeparamref name="T" /> with the item order randomized.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Sort(System.Collections.IList)">
            <summary>
            Sorts the collection using the default comparer which works for all types that support IComparable.
            </summary>
            <param name="In"></param>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Sort``1(System.Collections.Generic.IList{``0},System.Func{``0,``0,System.Int32})">
            <summary>
            Sorts the collection using the results of the passed [Comparer] Func`<typeparamref name="T" />,<typeparamref name="T" />,int.
            The Func should return positive if the first item is greater, negative if the second item is greater, and 0 if they are equal.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Sort``1(System.Collections.Generic.IList{``0},System.Func{``0,System.IComparable})">
            <summary>
            Sorts the collection using the results of the passed Field Retriever Func`<typeparamref name="T" />,IComparable to determine what the items should be sorted by.
            Return the value you would like the collection sorted by.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="In"></param>
            <param name="FieldRetriever"></param>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Sum``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns the sum of all values returned by <paramref name="NumberRetriever"/>.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Swap``1(``0[],System.Int32,System.Int32)">
            <summary>
            Swaps two indexes in T[] <paramref name="In" />.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.Swap(System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            Swaps two indexes in list <paramref name="In" />.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.TotalCount(System.Collections.IEnumerable)">
            <summary>
            Returns the total number of elements within the collection.
            Counts contained IEnumerable objects for their contents also.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.ToNestedArrays``1(``0[0:,0:])">
            <summary>
            Converts a multidimensional array to nested arrays.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.ToNestedArrays``1(``0[0:,0:,0:])">
            <summary>
            Converts a multidimensional array to nested arrays.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.ToNestedArrays``1(``0[0:,0:,0:,0:])">
            <summary>
            Converts a multidimensional array to nested arrays.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.ToNestedArrays``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Converts a nested IEnumerable into a nested T[][]
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.ToNestedArrays``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}}})">
            <summary>
            Converts a nested IEnumerable into a nested T[][][]
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.ToNestedArrays``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}}}})">
            <summary>
            Converts a nested IEnumerable into a nested T[][][][]
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.While``1(System.Collections.IEnumerable,System.Func{``0,System.Boolean})">
            <summary>
            Iterates through a collection. A false return value from the Func stops the iteration.
            Returns false if the While loop was stopped prematurely or if the input was null, true otherwise.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.While``1(System.Collections.IEnumerable,System.Func{System.Int32,``0,System.Boolean})">
            <summary>
            Iterates through a collection. A false return value from the Func stops the iteration.
            The int passed to the Func is the 0-based index of the current item.
            Returns false if the While loop was stopped prematurely or if the input was null, true otherwise.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.While``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Iterates through a collection. A false return value from the Func stops the iteration.
            Returns false if the While loop was stopped prematurely or if the input was null, true otherwise.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.While``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Int32,``0,System.Boolean})">
            <summary>
            Iterates through a collection. A false return value from the Func stops the iteration.
            The int passed to the Func is the 0-based index of the current item.
            Returns false if the While loop was stopped prematurely or if the input was null, true otherwise.
            </summary>
        </member>
        <member name="M:LCore.Extensions.EnumerableExt.While``1(System.Action{``0},System.Func{System.Boolean},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Executes Action <paramref name="In" /> while <paramref name="Condition" /> returns true. 
            <paramref name="In" /> is passed values from <paramref name="Obj" />.
            </summary>
        </member>
        <member name="T:LCore.Interfaces.CodeComment">
            <summary>
            Stores XML comment metadata.
            </summary>
        </member>
        <member name="P:LCore.Interfaces.CodeComment.Returns">
            <summary>
            Summary comment
            </summary>
        </member>
        <member name="P:LCore.Interfaces.CodeComment.Value">
            <summary>
            Value comment
            </summary>
        </member>
        <member name="P:LCore.Interfaces.CodeComment.Summary">
            <summary>
            Returns comment
            </summary>
        </member>
        <member name="P:LCore.Interfaces.CodeComment.Remarks">
            <summary>
            Remarks comment
            </summary>
        </member>
        <member name="P:LCore.Interfaces.CodeComment.Examples">
            <summary>
            Examples comment
            </summary>
        </member>
        <member name="P:LCore.Interfaces.CodeComment.Parameters">
            <summary>
            Parameters comment
            </summary>
        </member>
        <member name="P:LCore.Interfaces.CodeComment.Exceptions">
            <summary>
            Exceptions comment
            </summary>
        </member>
        <member name="P:LCore.Interfaces.CodeComment.Permissions">
            <summary>
            Permissions comment
            </summary>
        </member>
        <member name="P:LCore.Interfaces.CodeComment.TypeParameters">
            <summary>
            Type Parameter comment
            </summary>
        </member>
        <member name="P:LCore.Interfaces.CodeComment.Includes">
            <summary>
            Includes comment
            </summary>
        </member>
        <member name="P:LCore.Interfaces.CodeComment.Features">
            <summary>
            Feature comments
            </summary>
        </member>
        <member name="P:LCore.Interfaces.CodeComment.ClassFeatures">
            <summary>
            Class feature comments
            </summary>
        </member>
        <member name="P:LCore.Interfaces.CodeComment.ProjectFeatures">
            <summary>
            Project feature comments
            </summary>
        </member>
        <member name="P:LCore.Interfaces.CodeComment.TestedFeatures">
            <summary>
            Tested feature comments
            </summary>
        </member>
        <member name="T:LCore.Interfaces.IExtensionProvider">
            <summary>
            Denotes that a static class provides extension methods.
            </summary>
        </member>
        <member name="T:LCore.Interfaces.ExtensionProviderAttribute">
            <summary>
            Default Attribute for IExtensionProvider
            </summary>
        </member>
        <member name="T:LCore.Interfaces.IGrouped">
            <summary>
            Allows for grouping. 
            Apply the IGrouped tag to a model to allow for grouping.
            </summary>
        </member>
        <member name="P:LCore.Interfaces.IGrouped.Group">
            <summary>
            The group field
            </summary>
        </member>
        <member name="T:LCore.Interfaces.ICodeComment">
            <summary>
            An interface to contain the information within XML comment metadata
            </summary>
        </member>
        <member name="P:LCore.Interfaces.ICodeComment.Summary">
            <summary>
            Returns comment
            </summary>
        </member>
        <member name="P:LCore.Interfaces.ICodeComment.Returns">
            <summary>
            Summary comment
            </summary>
        </member>
        <member name="P:LCore.Interfaces.ICodeComment.Value">
            <summary>
            Value comment
            </summary>
        </member>
        <member name="P:LCore.Interfaces.ICodeComment.Examples">
            <summary>
            Examples comment
            </summary>
        </member>
        <member name="P:LCore.Interfaces.ICodeComment.Remarks">
            <summary>
            Remarks comment
            </summary>
        </member>
        <member name="P:LCore.Interfaces.ICodeComment.Parameters">
            <summary>
            Parameters comment
            </summary>
        </member>
        <member name="P:LCore.Interfaces.ICodeComment.Exceptions">
            <summary>
            Exceptions comment
            </summary>
        </member>
        <member name="P:LCore.Interfaces.ICodeComment.Permissions">
            <summary>
            Permissions comment
            </summary>
        </member>
        <member name="P:LCore.Interfaces.ICodeComment.TypeParameters">
            <summary>
            Type Parameter comment
            </summary>
        </member>
        <member name="P:LCore.Interfaces.ICodeComment.Includes">
            <summary>
            Includes comment
            </summary>
        </member>
        <member name="P:LCore.Interfaces.ICodeComment.Features">
            <summary>
            Feature comments
            </summary>
        </member>
        <member name="P:LCore.Interfaces.ICodeComment.ClassFeatures">
            <summary>
            Class feature comments
            </summary>
        </member>
        <member name="P:LCore.Interfaces.ICodeComment.ProjectFeatures">
            <summary>
            Project feature comments
            </summary>
        </member>
        <member name="P:LCore.Interfaces.ICodeComment.TestedFeatures">
            <summary>
            Tested feature comments
            </summary>
        </member>
        <member name="T:LCore.Interfaces.IReverseAttributeOrder">
            <summary>
            Apply this interface to an Attribute to designate that 
            other attributes of the same type should be applied in 
            reverse order.
            </summary>
        </member>
        <member name="T:LCore.LUnit.DisableNullabilityTestingAttribute">
            <summary>
            Disables LUnit nullability testing for a method.
            </summary>
        </member>
        <member name="T:LCore.LUnit.IDisableNullabilityTestingAttribute">
            <summary>
            Disables LUnit nullability testing for a method.
            </summary>
        </member>
        <member name="T:LCore.LUnit.IValidateAttribute">
            <summary>
            Implement this interface for an Attribute to have all of its implementations validated 
            using an implementation of LUnit's AssemblyTester.
            </summary>
        </member>
        <member name="M:LCore.LUnit.IValidateAttribute.Validate(System.Reflection.MemberInfo)">
            <summary>
            Return null or an empty string[] to specify a valid attribute. 
            Otherwise, return any errors to have them reported during testing.
            </summary>
        </member>
        <member name="T:LCore.LUnit.ITestParameters">
            <summary>
            Implement this interface to specify an LUnit test attribute that contains method parameters.
            </summary>
        </member>
        <member name="P:LCore.LUnit.ITestParameters.Parameters">
            <summary>
            Parameters for the current test
            </summary>
        </member>
        <member name="T:LCore.LUnit.ILUnitAttribute">
            <summary>
            Root attribute interface used by LUnit
            </summary>
        </member>
        <member name="T:LCore.LUnit.ITestedIndirectlyAttribute">
            <summary>
            Extend this attribute to mark members as Tested indirectly within LUnit
            </summary>
        </member>
        <member name="T:LCore.LUnit.ITestSourceAttribute">
            <summary>
            Implement an Attribute with this interface to apply a maximum and/or 
            minimum bound to the parameter at the specified index.
            </summary>
        </member>
        <member name="P:LCore.LUnit.ITestSourceAttribute.ExpectedSource">
            <summary>
            The expected source value.
            </summary>
        </member>
        <member name="P:LCore.LUnit.ITestSourceAttribute.AdditionalSourceChecks">
            <summary>
            Additional optional source checks to perform.
            </summary>
        </member>
        <member name="T:LCore.LUnit.ITestSucceedsAttribute">
            <summary>
            Implement an Attribute with this interface to apply a maximum and/or 
            minimum bound to the parameter at the specified index.
            </summary>
        </member>
        <member name="P:LCore.LUnit.ITestSucceedsAttribute.AdditionalChecks">
            <summary>
            Additional optional checks to perform when running the test.
            </summary>
        </member>
        <member name="T:LCore.LUnit.ITestFailsAttribute">
            <summary>
            Interface denotes a test attribute. 
            Used to determine which methods are tested and untested.
            </summary>
        </member>
        <member name="P:LCore.LUnit.ITestFailsAttribute.ExceptionType">
            <summary>
            The type of exception to filter.
            </summary>
        </member>
        <member name="P:LCore.LUnit.ITestFailsAttribute.AdditionalChecks">
            <summary>
            Fully qualified references to additional checks to perform.
            </summary>
        </member>
        <member name="T:LCore.LUnit.ITestBoundAttribute">
            <summary>
            Implement an Attribute with this interface to apply a maximum and/or 
            minimum bound to the parameter at the specified index.
            </summary>
        </member>
        <member name="P:LCore.LUnit.ITestBoundAttribute.Minimum">
            <summary>
            The Minimum bound for this parameter (optional)
            </summary>
        </member>
        <member name="P:LCore.LUnit.ITestBoundAttribute.Maximum">
            <summary>
            The Maximum bound for this parameter (optional)
            </summary>
        </member>
        <member name="P:LCore.LUnit.ITestBoundAttribute.ValueType">
            <summary>
            The type of value used for the Minimum and Maximum
            </summary>
        </member>
        <member name="T:LCore.LUnit.ITestResultAttribute">
            <summary>
            Implement this interface to specify an LUnit test attribute based on the method's result.
            </summary>
        </member>
        <member name="P:LCore.LUnit.ITestResultAttribute.ExpectedResult">
            <summary>
            The expected result from the method.
            </summary>
        </member>
        <member name="P:LCore.LUnit.ITestResultAttribute.AdditionalResultChecks">
            <summary>
            Fully qualified references to additional checks to perform.
            </summary>
        </member>
        <member name="T:LCore.LUnit.ITestMethodGenericsAttribute">
            <summary>
            Implement this interface to specify generics used on a method for tests.
            </summary>
        </member>
        <member name="P:LCore.LUnit.ITestMethodGenericsAttribute.GenericTypes">
            <summary>
            Generic types defined on the current method
            </summary>
        </member>
        <member name="T:LCore.LUnit.TestedIndirectlyAttribute">
            <summary>
            Indicate that unit tests have been completed for the method.
            </summary>
        </member>
        <member name="T:LCore.LUnit.TestedAttribute">
            <summary>
            Indicate that unit tests have been completed for the method.
            </summary>
        </member>
        <member name="T:LCore.LUnit.TestFailsAttribute">
            <summary>
            Denotes that a particular test fails.
            Optionally specify the ExceptionType and 
            AdditionalChecks to be performed
            </summary>
        </member>
        <member name="P:LCore.LUnit.TestFailsAttribute.ExceptionType">
            <summary>
            The type of exception to filter.
            </summary>
        </member>
        <member name="P:LCore.LUnit.TestFailsAttribute.AdditionalChecks">
            <summary>
            Fully qualified references to additional checks to perform.
            </summary>
        </member>
        <member name="P:LCore.LUnit.TestFailsAttribute.Parameters">
            <summary>
            Parameters for the current test
            </summary>
        </member>
        <member name="M:LCore.LUnit.TestFailsAttribute.#ctor(System.Object[],System.Type,System.String[])">
            <summary>
            Denotes that a particular test fails.
            Optionally specify the <paramref name="ExceptionType" /> and 
            <paramref name="AdditionalChecks" /> to be performed
            </summary>
        </member>
        <member name="T:LCore.LUnit.TestMethodGenericsAttribute">
            <summary>
            Denotes that a method's tests use particular generic types.
            </summary>
        </member>
        <member name="P:LCore.LUnit.TestMethodGenericsAttribute.GenericTypes">
            <summary>
            Generic types defined on the current method
            </summary>
        </member>
        <member name="M:LCore.LUnit.TestMethodGenericsAttribute.#ctor(System.Type[])">
            <summary>
            Create a new TestMethodGenerics
            </summary>
        </member>
        <member name="T:LCore.LUnit.TestBoundAttribute">
            <summary>
            Applies a maximum and/or minimum bound to the parameter at the specified index.
            </summary>
        </member>
        <member name="P:LCore.LUnit.TestBoundAttribute.Minimum">
            <summary>
            The Minimum bound for this parameter (optional)
            </summary>
        </member>
        <member name="P:LCore.LUnit.TestBoundAttribute.Maximum">
            <summary>
            The Maximum bound for this parameter (optional)
            </summary>
        </member>
        <member name="P:LCore.LUnit.TestBoundAttribute.ValueType">
            <summary>
            The type of value used for the Minimum and Maximum
            </summary>
        </member>
        <member name="M:LCore.LUnit.TestBoundAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Sets the <paramref name="Minimum"/> and <paramref name="Minimum"/> 
            values used for the parameter.
            </summary>
        </member>
        <member name="M:LCore.LUnit.TestBoundAttribute.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Sets the <paramref name="Minimum"/> and <paramref name="Minimum"/> 
            values used for the parameter.
            
            </summary>
        </member>
        <member name="M:LCore.LUnit.TestBoundAttribute.#ctor(System.Int64,System.Int64)">
            <summary>
            Sets the <paramref name="Minimum"/> and <paramref name="Minimum"/> 
            values used for the parameter.
            </summary>
        </member>
        <member name="M:LCore.LUnit.TestBoundAttribute.#ctor(System.UInt64,System.UInt64)">
            <summary>
            Sets the <paramref name="Minimum"/> and <paramref name="Minimum"/> 
            values used for the parameter.
            </summary>
        </member>
        <member name="M:LCore.LUnit.TestBoundAttribute.#ctor(System.Int16,System.Int16)">
            <summary>
            Sets the <paramref name="Minimum"/> and <paramref name="Minimum"/> 
            values used for the parameter.
            </summary>
        </member>
        <member name="M:LCore.LUnit.TestBoundAttribute.#ctor(System.UInt16,System.UInt16)">
            <summary>
            Sets the <paramref name="Minimum"/> and <paramref name="Minimum"/> 
            values used for the parameter.
            </summary>
        </member>
        <member name="M:LCore.LUnit.TestBoundAttribute.#ctor(System.Byte,System.Byte)">
            <summary>
            Sets the <paramref name="Minimum"/> and <paramref name="Minimum"/> 
            values used for the parameter.
            </summary>
        </member>
        <member name="M:LCore.LUnit.TestBoundAttribute.#ctor(System.SByte,System.SByte)">
            <summary>
            Sets the <paramref name="Minimum"/> and <paramref name="Minimum"/> 
            values used for the parameter.
            </summary>
        </member>
        <member name="M:LCore.LUnit.TestBoundAttribute.#ctor(System.Decimal,System.Decimal)">
            <summary>
            Sets the <paramref name="Minimum"/> and <paramref name="Minimum"/> 
            values used for the parameter.
            </summary>
        </member>
        <member name="M:LCore.LUnit.TestBoundAttribute.#ctor(System.Double,System.Double)">
            <summary>
            Sets the <paramref name="Minimum"/> and <paramref name="Minimum"/> 
            values used for the parameter.
            </summary>
        </member>
        <member name="M:LCore.LUnit.TestBoundAttribute.#ctor(System.Single,System.Single)">
            <summary>
            Sets the <paramref name="Minimum"/> and <paramref name="Minimum"/> 
            values used for the parameter.
            </summary>
        </member>
        <member name="M:LCore.LUnit.TestBoundAttribute.#ctor(System.Object,System.Object)">
            <summary>
            Sets the <paramref name="Minimum"/> and <paramref name="Minimum"/> 
            values used for the parameter.
            </summary>
        </member>
        <member name="T:LCore.LUnit.TestResultAttribute">
            <summary>
            Denotes that a method returns a specific result when passed a 
            certain set of input parameters.
            </summary>
        </member>
        <member name="P:LCore.LUnit.TestResultAttribute.Parameters">
            <summary>
            Parameters for the current test
            </summary>
        </member>
        <member name="P:LCore.LUnit.TestResultAttribute.ExpectedResult">
            <summary>
            The expected result from the method.
            </summary>
        </member>
        <member name="P:LCore.LUnit.TestResultAttribute.AdditionalResultChecks">
            <summary>
            Fully qualified references to additional checks to perform.
            </summary>
        </member>
        <member name="P:LCore.LUnit.TestResultAttribute.GenericTypes">
            <summary>
            Generic types defined on the current method
            </summary>
        </member>
        <member name="M:LCore.LUnit.TestResultAttribute.#ctor(System.Object[],System.Object,System.String[])">
            <summary>
            Denotes that a method returns a specific result when passed a 
            certain set of input parameters.
            </summary>
        </member>
        <member name="T:LCore.LUnit.TestSourceAttribute">
            <summary>
            Denotes that a method modifies the source when passed a 
            certain set of input parameters.
            This is useful for methods the manipulate the source object
            rather than returning data.
            </summary>
        </member>
        <member name="P:LCore.LUnit.TestSourceAttribute.ExpectedSource">
            <summary>
            The expected source value.
            </summary>
        </member>
        <member name="P:LCore.LUnit.TestSourceAttribute.AdditionalSourceChecks">
            <summary>
            Additional optional source checks to perform.
            </summary>
        </member>
        <member name="P:LCore.LUnit.TestSourceAttribute.Parameters">
            <summary>
            Parameters for the current test
            </summary>
        </member>
        <member name="M:LCore.LUnit.TestSourceAttribute.#ctor(System.Object[],System.Object,System.String[])">
            <summary>
            Denotes that a method modifies the source when passed a 
            certain set of input parameters.
            This is useful for methods the manipulate the source object
            rather than returning data.
            Optionally provide additional source checks to perform.
            </summary>
        </member>
        <member name="T:LCore.LUnit.TestSucceedesAttribute">
            <summary>
            Denotes that a particular method succeeds (does not throw an exception)
            </summary>
        </member>
        <member name="P:LCore.LUnit.TestSucceedesAttribute.AdditionalChecks">
            <summary>
            Additional optional checks to perform when running the test.
            </summary>
        </member>
        <member name="P:LCore.LUnit.TestSucceedesAttribute.Parameters">
            <summary>
            Parameters for the current test
            </summary>
        </member>
        <member name="M:LCore.LUnit.TestSucceedesAttribute.#ctor(System.Object[],System.String[])">
            <summary>
            Denotes that a particular method succeeds when passed particular parameters.
            </summary>
        </member>
        <member name="T:LCore.LUnit.ITestedAttribute">
            <summary>
            Extend this attribute to mark members as Tested within LUnit
            </summary>
        </member>
        <member name="T:LCore.Naming.FriendlyNameAttribute">
            <summary>
            Tag model properties with this Attribute to designate the field's
            Friendly Name
            </summary>
        </member>
        <member name="P:LCore.Naming.FriendlyNameAttribute.FriendlyName">
            <summary>
            Friendly name for the object described.
            </summary>
        </member>
        <member name="M:LCore.Naming.FriendlyNameAttribute.#ctor(System.String)">
            <summary>
            Create a new FriendlyNameAttribute
            </summary>
            <param name="FriendlyName">Friendly name text</param>
        </member>
        <member name="T:LCore.Naming.INamed">
            <summary>
            Interface to tell if a class has a Name property.
            </summary>
        </member>
        <member name="P:LCore.Naming.INamed.Name">
            <summary>
            Get the name of the object
            </summary>
        </member>
        <member name="T:LCore.Naming.IFriendlyName">
            <summary>
            Interface exposes the FriendlyName property. 
            Extend this interface on an attribute to add friendly names 
            to classes and properties.
            </summary>
        </member>
        <member name="P:LCore.Naming.IFriendlyName.FriendlyName">
            <summary>
            Friendly name for the object described.
            </summary>
        </member>
        <member name="T:LCore.Dynamic.AttributeList">
            <summary>
            Internal class used to store multiple Attribute objects.
            </summary>
        </member>
        <member name="P:LCore.Dynamic.AttributeList.TypeName">
            <summary>
            The name of the type this AttributeList is representing
            </summary>
        </member>
        <member name="M:LCore.Dynamic.AttributeList.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Creates a new AttributeList from a 
            </summary>
            <param name="TypeName"></param>
            <param name="Attributes"></param>
        </member>
        <member name="M:LCore.Dynamic.AttributeList.GetCustomAttributes(System.Boolean)">
            <summary>Returns an array of all of the custom attributes defined on this member, excluding named attributes, or an empty array if there are no custom attributes.</summary>
            <returns>An array of Objects representing custom attributes, or an empty array.</returns>
            <param name="Inherit">When true, look up the hierarchy chain for the inherited custom attribute. </param>
        </member>
        <member name="M:LCore.Dynamic.AttributeList.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>Returns an array of custom attributes defined on this member, identified by type, or an empty array if there are no custom attributes of that type.</summary>
            <returns>An array of Objects representing custom attributes, or an empty array.</returns>
            <param name="AttributeType">The type of the custom attributes. </param>
            <param name="Inherit">When true, look up the hierarchy chain for the inherited custom attribute. </param>
        </member>
        <member name="M:LCore.Dynamic.AttributeList.IsDefined(System.Type,System.Boolean)">
            <summary>Indicates whether one or more instance of <paramref name="AttributeType" /> is defined on this member.</summary>
            <returns>true if the <paramref name="AttributeType" /> is defined on this member; false otherwise.</returns>
            <param name="AttributeType">The type of the custom attributes. </param>
            <param name="Inherit">When true, look up the hierarchy chain for the inherited custom attribute. </param>
        </member>
        <member name="F:LCore.Dynamic.CodeExplodeLogic.ExplodeCount">
            <summary>
            One for methods with 0 parameters, 16 for methods up to 16 parameters.
            </summary>
        </member>
        <member name="T:LCore.Dynamic.CodeExplodeExtensionMethod">
            <summary>
            Explodes a Method providing the method as an extension method on its type
            </summary>
        </member>
        <member name="T:LCore.Dynamic.LambdaExt">
            <summary>
            Provides internal methods to take a Type or MemberInfo and 
            return a string representation of methods, properties, etc.
            </summary>
        </member>
        <member name="T:LCore.Numbers.DecimalNumber">
            <summary>
            Provides an implementation of INumber for decimal
            </summary>
        </member>
        <member name="M:LCore.Numbers.DecimalNumber.op_Implicit(System.Decimal)~LCore.Numbers.DecimalNumber">
            <summary>
            Implicitally convert a decimal to a DecimalNumber
            </summary>
            <param name="i">The decimal to convert</param>
        </member>
        <member name="M:LCore.Numbers.DecimalNumber.#ctor(System.Decimal)">
            <summary>
            Create a new DecimalNumber wrapper for a decimal
            </summary>
            <param name="Value">Number value</param>
        </member>
        <member name="M:LCore.Numbers.DecimalNumber.#ctor">
            <summary>
            Create a new DecimalNumber wrapper for a decimal
            </summary>
        </member>
        <member name="P:LCore.Numbers.DecimalNumber.TypePrecision">
            <summary>
            The smallest storable change in value for type decimal.
            </summary>
        </member>
        <member name="P:LCore.Numbers.DecimalNumber.TypeMinValue">
            <summary>
            The lowest possible value for type decimal.
            </summary>
        </member>
        <member name="P:LCore.Numbers.DecimalNumber.TypeMaxValue">
            <summary>
            The highest possible value for type decimal.
            </summary>
        </member>
        <member name="P:LCore.Numbers.DecimalNumber.TypeDefaultValue">
            <summary>
            The default value for type decimal.
            </summary>
        </member>
        <member name="M:LCore.Numbers.DecimalNumber.GetValuePrecision">
            <summary>
            Returns the precision needed to store the current value.
            </summary>
        </member>
        <member name="M:LCore.Numbers.DecimalNumber.Add(System.Decimal,System.Decimal)">
            <summary>
            Applies the addition operation and returns the result as a decimal.
            </summary>
        </member>
        <member name="M:LCore.Numbers.DecimalNumber.Subtract(System.Decimal,System.Decimal)">
            <summary>
            Applies the subtraction operation and returns the result as a decimal.
            </summary>
        </member>
        <member name="M:LCore.Numbers.DecimalNumber.Multiply(System.Decimal,System.Decimal)">
            <summary>
            Applies the multiplication operation and returns the result as a decimal.
            </summary>
        </member>
        <member name="M:LCore.Numbers.DecimalNumber.Divide(System.Decimal,System.Decimal)">
            <summary>
            Applies the division operation and returns the result as a Number.
            </summary>
            <returns>A double result</returns>
        </member>
        <member name="M:LCore.Numbers.DecimalNumber.New(System.Decimal)">
            <summary>
            Create a new Number of the same type
            </summary>
        </member>
        <member name="M:LCore.Numbers.DecimalNumber.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:LCore.Numbers.DoubleNumber">
            <summary>
            Provides an implementation of INumber for double
            </summary>
        </member>
        <member name="M:LCore.Numbers.DoubleNumber.op_Implicit(System.Double)~LCore.Numbers.DoubleNumber">
            <summary>
            Implicitally convert a double to a DoubleNumber
            </summary>
            <param name="i">The double to convert</param>
        </member>
        <member name="M:LCore.Numbers.DoubleNumber.#ctor(System.Double)">
            <summary>
            Create a new DoubleNumber wrapper for a decimal
            </summary>
            <param name="Value">Number value</param>
        </member>
        <member name="M:LCore.Numbers.DoubleNumber.#ctor">
            <summary>
            Create a new DoubleNumber wrapper for a double
            </summary>
        </member>
        <member name="P:LCore.Numbers.DoubleNumber.TypePrecision">
            <summary>
            The smallest storable change in value for type double.
            </summary>
        </member>
        <member name="P:LCore.Numbers.DoubleNumber.TypeMinValue">
            <summary>
            The lowest possible value for type double.
            </summary>
        </member>
        <member name="P:LCore.Numbers.DoubleNumber.TypeMaxValue">
            <summary>
            The highest possible value for type double.
            </summary>
        </member>
        <member name="P:LCore.Numbers.DoubleNumber.TypeDefaultValue">
            <summary>
            The default value for type double.
            </summary>
        </member>
        <member name="M:LCore.Numbers.DoubleNumber.GetValuePrecision">
            <summary>
            Returns the precision needed to store the current value.
            </summary>
        </member>
        <member name="M:LCore.Numbers.DoubleNumber.Add(System.Double,System.Double)">
            <summary>
            Applies the addition operation and returns the result as a Number.
            </summary>
        </member>
        <member name="M:LCore.Numbers.DoubleNumber.Subtract(System.Double,System.Double)">
            <summary>
            Applies the subtraction operation and returns the result as a Number.
            </summary>
        </member>
        <member name="M:LCore.Numbers.DoubleNumber.Multiply(System.Double,System.Double)">
            <summary>
            Applies the multiplication operation and returns the result as a Number.
            </summary>
        </member>
        <member name="M:LCore.Numbers.DoubleNumber.Divide(System.Double,System.Double)">
            <summary>
            Applies the division operation and returns the result as a Number.
            </summary>
            <returns>A double result</returns>
        </member>
        <member name="M:LCore.Numbers.DoubleNumber.New(System.Double)">
            <summary>
            Create a new Number of the same type
            </summary>
        </member>
        <member name="M:LCore.Numbers.DoubleNumber.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:LCore.Numbers.FloatNumber">
            <summary>
            Provides an implementation of INumber for float
            </summary>
        </member>
        <member name="M:LCore.Numbers.FloatNumber.op_Implicit(System.Single)~LCore.Numbers.FloatNumber">
            <summary>
            Implicitally convert a float to a FloatNumber
            </summary>
            <param name="i">The float to convert</param>
        </member>
        <member name="M:LCore.Numbers.FloatNumber.#ctor(System.Single)">
            <summary>
            Create a new FloatNumber wrapper for a decimal
            </summary>
            <param name="Value">Number value</param>
        </member>
        <member name="M:LCore.Numbers.FloatNumber.#ctor">
            <summary>
            Create a new FloatNumber wrapper for a float
            </summary>
        </member>
        <member name="P:LCore.Numbers.FloatNumber.TypePrecision">
            <summary>
            The smallest storable change in value for type float.
            </summary>
        </member>
        <member name="P:LCore.Numbers.FloatNumber.TypeMinValue">
            <summary>
            The lowest possible value for type float.
            </summary>
        </member>
        <member name="P:LCore.Numbers.FloatNumber.TypeMaxValue">
            <summary>
            The highest possible value for type float.
            </summary>
        </member>
        <member name="P:LCore.Numbers.FloatNumber.TypeDefaultValue">
            <summary>
            The default value for type float.
            </summary>
        </member>
        <member name="M:LCore.Numbers.FloatNumber.GetValuePrecision">
            <summary>
            Returns the precision needed to store the current value.
            </summary>
        </member>
        <member name="M:LCore.Numbers.FloatNumber.Add(System.Single,System.Single)">
            <summary>
            Applies the addition operation and returns the result as a float.
            </summary>
        </member>
        <member name="M:LCore.Numbers.FloatNumber.Subtract(System.Single,System.Single)">
            <summary>
            Applies the subtraction operation and returns the result as a float.
            </summary>
        </member>
        <member name="M:LCore.Numbers.FloatNumber.Multiply(System.Single,System.Single)">
            <summary>
            Applies the multiplication operation and returns the result as a float.
            </summary>
        </member>
        <member name="M:LCore.Numbers.FloatNumber.Divide(System.Single,System.Single)">
            <summary>
            Applies the division operation and returns the result as a float.
            </summary>
            <returns>A double result</returns>
        </member>
        <member name="M:LCore.Numbers.FloatNumber.New(System.Single)">
            <summary>
            Create a new Number of the same type
            </summary>
        </member>
        <member name="M:LCore.Numbers.FloatNumber.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:LCore.Numbers.INumber`1">
            <summary>
            Provides an abstraction layer to all number types
            </summary>
            <typeparam name="T">Native number type</typeparam>
        </member>
        <member name="P:LCore.Numbers.INumber`1.TypePrecision">
            <summary>
            The smallest storable change in value for type <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="P:LCore.Numbers.INumber`1.TypeMinValue">
            <summary>
            The lowest possible value for type <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="P:LCore.Numbers.INumber`1.TypeMaxValue">
            <summary>
            The highest possible value for type <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="P:LCore.Numbers.INumber`1.TypeDefaultValue">
            <summary>
            The default value for type <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:LCore.Numbers.INumber`1.New(`0)">
            <summary>
            Create a new Number of the same type
            </summary>
        </member>
        <member name="P:LCore.Numbers.INumber`1.Value">
            <summary>
            The base number object
            </summary>
        </member>
        <member name="T:LCore.Numbers.INumber">
            <summary>
            Provides an abstraction layer to all number types
            </summary>
        </member>
        <member name="M:LCore.Numbers.INumber.New(System.Object)">
            <summary>
            Create a new Number of the same type
            </summary>
        </member>
        <member name="P:LCore.Numbers.INumber.Precision">
            <summary>
            The smallest storable change in value for the type.
            </summary>
        </member>
        <member name="P:LCore.Numbers.INumber.MinValue">
            <summary>
            The lowest possible value for the type.
            </summary>
        </member>
        <member name="P:LCore.Numbers.INumber.MaxValue">
            <summary>
            The highest possible value for the type.
            </summary>
        </member>
        <member name="P:LCore.Numbers.INumber.DefaultValue">
            <summary>
            The default value for the type.
            </summary>
        </member>
        <member name="M:LCore.Numbers.INumber.Divide(LCore.Numbers.Number)">
            <summary>
            Applies the division operation and returns the result as a Number.
            </summary>
            <param name="Value">Number value</param>
            <returns>A double result</returns>
        </member>
        <member name="M:LCore.Numbers.INumber.Multiply(LCore.Numbers.Number)">
            <summary>
            Applies the multiplication operation and returns the result as a Number.
            </summary>
            <param name="Value">Number value</param>
            <returns>A double result</returns>
        </member>
        <member name="M:LCore.Numbers.INumber.Subtract(LCore.Numbers.Number)">
            <summary>
            Applies the subtraction operation and returns the result as a Number.
            </summary>
            <param name="Value">Number value</param>
            <returns>A double result</returns>
        </member>
        <member name="M:LCore.Numbers.INumber.Add(LCore.Numbers.Number)">
            <summary>
            Applies the addition operation and returns the result as a Number.
            </summary>
            <param name="Value">Number value</param>
            <returns>A double result</returns>
        </member>
        <member name="M:LCore.Numbers.INumber.Divide(System.IConvertible)">
            <summary>
            Applies the division operation and returns the result as a Number.
            </summary>
            <param name="Value">Number value</param>
            <returns>A double result</returns>
            
        </member>
        <member name="M:LCore.Numbers.INumber.Multiply(System.IConvertible)">
            <summary>
            Applies the multiplication operation and returns the result as a Number.
            </summary>
            <param name="Value">Number value</param>
            <returns>A double result</returns>
        </member>
        <member name="M:LCore.Numbers.INumber.Subtract(System.IConvertible)">
            <summary>
            Applies the subtraction operation and returns the result as a Number.
            </summary>
            <param name="Value">Number value</param>
            <returns>A double result</returns>
        </member>
        <member name="M:LCore.Numbers.INumber.Add(System.IConvertible)">
            <summary>
            Applies the addition operation and returns the result as a Number.
            </summary>
            <param name="Value">Number value</param>
            <returns>A double result</returns>
        </member>
        <member name="M:LCore.Numbers.INumber.GetValuePrecision">
            <summary>
            Returns the precision needed to store the current value.
            </summary>
        </member>
        <member name="M:LCore.Numbers.INumber.GetValue">
            <summary>
            Gets the underlying value
            </summary>
        </member>
        <member name="T:LCore.Numbers.LongNumber">
            <summary>
            Provides an implementation of INumber for long
            </summary>
        </member>
        <member name="M:LCore.Numbers.LongNumber.op_Implicit(System.Int64)~LCore.Numbers.LongNumber">
            <summary>
            Implicitally convert a long to a LongNumber
            </summary>
            <param name="i">The long to convert</param>
        </member>
        <member name="M:LCore.Numbers.LongNumber.#ctor(System.Int64)">
            <summary>
            Create a new LongNumber wrapper for a decimal
            </summary>
            <param name="Value">Number value</param>
        </member>
        <member name="M:LCore.Numbers.LongNumber.#ctor">
            <summary>
            Create a new LongNumber wrapper for a long
            </summary>
        </member>
        <member name="P:LCore.Numbers.LongNumber.TypePrecision">
            <summary>
            The smallest storable change in value for type long.
            </summary>
        </member>
        <member name="P:LCore.Numbers.LongNumber.TypeMinValue">
            <summary>
            The lowest possible value for type long.
            </summary>
        </member>
        <member name="P:LCore.Numbers.LongNumber.TypeMaxValue">
            <summary>
            The highest possible value for type long.
            </summary>
        </member>
        <member name="P:LCore.Numbers.LongNumber.TypeDefaultValue">
            <summary>
            The default value for type long.
            </summary>
        </member>
        <member name="M:LCore.Numbers.LongNumber.GetValuePrecision">
            <summary>
            Returns the precision needed to store the current value.
            </summary>
        </member>
        <member name="M:LCore.Numbers.LongNumber.Add(System.Int64,System.Int64)">
            <summary>
            Applies the addition operation and returns the result as a long.
            </summary>
        </member>
        <member name="M:LCore.Numbers.LongNumber.Subtract(System.Int64,System.Int64)">
            <summary>
            Applies the subtraction operation and returns the result as a long.
            </summary>
        </member>
        <member name="M:LCore.Numbers.LongNumber.Multiply(System.Int64,System.Int64)">
            <summary>
            Applies the multiplication operation and returns the result as a long.
            </summary>
        </member>
        <member name="M:LCore.Numbers.LongNumber.Divide(System.Int64,System.Int64)">
            <summary>
            Applies the division operation and returns the result as a Number.
            </summary>
            <returns>A double result</returns>
        </member>
        <member name="M:LCore.Numbers.LongNumber.New(System.Int64)">
            <summary>
            Create a new Number of the same type
            </summary>
        </member>
        <member name="T:LCore.Numbers.Number`2">
            <summary>
            Base class to extend for native (and potentially non-native) number types
            </summary>
            <typeparam name="T">The Type of the number object</typeparam>
            <typeparam name="U"></typeparam>
        </member>
        <member name="M:LCore.Numbers.Number`2.op_Implicit(LCore.Numbers.Number{`0,`1})~`0">
            <summary>
            Implicitally convert a UShortNumber to a ushort
            </summary>
            <param name="i">The UShortNumber to convert</param>
        </member>
        <member name="M:LCore.Numbers.Number`2.#ctor">
            <summary>
            Create a new Number wrapper for a native number type
            </summary>
        </member>
        <member name="M:LCore.Numbers.Number`2.#ctor(`0)">
            <summary>
            Create a new Number wrapper for a native number type
            </summary>
            <param name="Value">The number value</param>
        </member>
        <member name="T:LCore.Numbers.Number`1">
            <summary>
            Base class to extend for native (and potentially non-native) number types
            </summary>
            <typeparam name="T">The Type of the number object</typeparam>
        </member>
        <member name="M:LCore.Numbers.Number`1.op_Division(LCore.Numbers.Number{`0},`0)">
            <summary>
            Applies the division operation and returns the result as a Number.
            </summary>
            <returns>A Number result</returns>
        </member>
        <member name="M:LCore.Numbers.Number`1.op_Multiply(LCore.Numbers.Number{`0},`0)">
            <summary>
            Applies the multiplication operation and returns the result as a Number.
            </summary>
        </member>
        <member name="M:LCore.Numbers.Number`1.op_Subtraction(LCore.Numbers.Number{`0},`0)">
            <summary>
            Applies the subtraction operation and returns the result as a Number.
            </summary>
        </member>
        <member name="M:LCore.Numbers.Number`1.op_Addition(LCore.Numbers.Number{`0},`0)">
            <summary>
            Applies the addition operation and returns the result as a Number.
            </summary>
        </member>
        <member name="P:LCore.Numbers.Number`1.NumberType">
            <summary>
            The type of number stored in the wrapper.
            </summary>
        </member>
        <member name="M:LCore.Numbers.Number`1.Add(LCore.Numbers.Number)">
            <summary>
            Applies the addition operation and returns the result as a Number.
            </summary>
            <param name="Value">Number value</param>
        </member>
        <member name="M:LCore.Numbers.Number`1.Subtract(LCore.Numbers.Number)">
            <summary>
            Applies the subtraction operation and returns the result as a Number.
            </summary>
            <param name="Value">Number value</param>
        </member>
        <member name="M:LCore.Numbers.Number`1.Multiply(LCore.Numbers.Number)">
            <summary>
            Applies the multiplication operation and returns the result as a Number.
            </summary>
            <param name="Value">Number value</param>
        </member>
        <member name="M:LCore.Numbers.Number`1.Divide(LCore.Numbers.Number)">
            <summary>
            Applies the division operation and returns the result as a Number.
            </summary>
            <param name="Value">Number value</param>
        </member>
        <member name="P:LCore.Numbers.Number`1.Precision">
            <summary>
            The smallest storable change in value for the type.
            </summary>
        </member>
        <member name="P:LCore.Numbers.Number`1.MinValue">
            <summary>
            The lowest possible value for the type.
            </summary>
        </member>
        <member name="P:LCore.Numbers.Number`1.MaxValue">
            <summary>
            The highest possible value for the type.
            </summary>
        </member>
        <member name="P:LCore.Numbers.Number`1.DefaultValue">
            <summary>
            The default value for the type.
            </summary>
        </member>
        <member name="P:LCore.Numbers.Number`1.TypePrecision">
            <summary>
            The smallest storable change in value for type <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="P:LCore.Numbers.Number`1.TypeMinValue">
            <summary>
            The lowest possible value for type <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="P:LCore.Numbers.Number`1.TypeMaxValue">
            <summary>
            The highest possible value for type <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="P:LCore.Numbers.Number`1.TypeDefaultValue">
            <summary>
            The default value for type <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:LCore.Numbers.Number`1.New(`0)">
            <summary>
            Create a new Number of the same type
            </summary>
        </member>
        <member name="M:LCore.Numbers.Number`1.New(System.Object)">
            <exception cref="T:System.ArgumentException">The object In is not of the correct type, and cannot be converted to it</exception>
        </member>
        <member name="M:LCore.Numbers.Number`1.GetValue">
            <summary>
            Gets the underlying value
            </summary>
        </member>
        <member name="M:LCore.Numbers.Number`1.Add(System.IConvertible)">
            <summary>
            Applies the addition operation and returns the result as a Number.
            </summary>
            <param name="Value">Number value</param>
        </member>
        <member name="M:LCore.Numbers.Number`1.Subtract(System.IConvertible)">
            <summary>
            Applies the subtraction operation and returns the result as a Number.
            </summary>
            <param name="Value">Number value</param>
        </member>
        <member name="M:LCore.Numbers.Number`1.Multiply(System.IConvertible)">
            <summary>
            Applies the multiplication operation and returns the result as a Number.
            </summary>
            <param name="Value">Number value</param>
        </member>
        <member name="M:LCore.Numbers.Number`1.Divide(System.IConvertible)">
            <summary>
            Applies the division operation and returns the result as a Number.
            </summary>
            <param name="Value">Number value</param>
        </member>
        <member name="M:LCore.Numbers.Number`1.Add(`0,`0)">
            <summary>
            Applies the addition operation and returns the result as a [T].
            </summary>
        </member>
        <member name="M:LCore.Numbers.Number`1.Subtract(`0,`0)">
            <summary>
            Applies the subtraction operation and returns the result as a [T].
            </summary>
        </member>
        <member name="M:LCore.Numbers.Number`1.Multiply(`0,`0)">
            <summary>
            Applies the multiplication operation and returns the result as a [T].
            </summary>
        </member>
        <member name="M:LCore.Numbers.Number`1.Divide(`0,`0)">
            <summary>
            Applies the division operation and returns the result as a Number.
            </summary>
        </member>
        <member name="M:LCore.Numbers.Number`1.New">
            <summary>
            Returns a new number using the default value for the number type.
            </summary>
        </member>
        <member name="P:LCore.Numbers.Number`1.Value">
            <summary>
            The base number object
            </summary>
        </member>
        <member name="M:LCore.Numbers.Number`1.#ctor">
            <summary>
            Create a new Number wrapper for a native number type
            </summary>
        </member>
        <member name="M:LCore.Numbers.Number`1.#ctor(`0)">
            <summary>
            Create a new Number wrapper for a native number type
            </summary>
            <param name="Value">The number value</param>
        </member>
        <member name="M:LCore.Numbers.Number`1.CompareTo(System.Object)">
            <summary>Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</summary>
            <returns>A value that indicates the relative order of the objects being compared. 
            The return value has these meanings: Value Meaning Less than zero This instance 
            precedes <paramref name="Obj" /> in the sort order. Zero This instance occurs 
            in the same position in the sort order as <paramref name="Obj" />. Greater than 
            zero This instance follows <paramref name="Obj" /> in the sort order. </returns>
            <param name="Obj">An object to compare with this instance. </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="Obj" /> is not the same type as this instance. </exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:LCore.Numbers.Number">
            <summary>
            Base class for number wrappers. Provides operators for seamless mathematical operations.
            </summary>
        </member>
        <member name="P:LCore.Numbers.Number.NumberType">
            <summary>
            The type of number stored in the wrapper.
            </summary>
        </member>
        <member name="M:LCore.Numbers.Number.Equals(System.Object)">
            <summary>
            Returns whether this Number is equal to <paramref name="Obj"/>
            </summary>
        </member>
        <member name="M:LCore.Numbers.Number.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:LCore.Numbers.Number.op_GreaterThan(LCore.Numbers.Number,System.IComparable)">
            <summary>
            Returns whether <paramref name="Number1"/> is greater than <paramref name="Number2"/>
            </summary>
        </member>
        <member name="M:LCore.Numbers.Number.op_LessThan(LCore.Numbers.Number,System.IComparable)">
            <summary>
            Returns whether <paramref name="Number1"/> is less than <paramref name="Number2"/>
            </summary>
        </member>
        <member name="M:LCore.Numbers.Number.op_GreaterThanOrEqual(LCore.Numbers.Number,System.IComparable)">
            <summary>
            Returns whether <paramref name="Number1"/> is greater than or equal to <paramref name="Number2"/>
            </summary>
        </member>
        <member name="M:LCore.Numbers.Number.op_LessThanOrEqual(LCore.Numbers.Number,System.IComparable)">
            <summary>
            Returns whether <paramref name="Number1"/> is less than or equal to <paramref name="Number2"/>
            </summary>
        </member>
        <member name="M:LCore.Numbers.Number.op_Equality(LCore.Numbers.Number,System.IComparable)">
            <summary>
            Returns whether <paramref name="Number1"/> is equal to <paramref name="Number2"/>
            </summary>
        </member>
        <member name="M:LCore.Numbers.Number.op_Inequality(LCore.Numbers.Number,System.IComparable)">
            <summary>
            Returns whether <paramref name="Number1"/> is not equal to <paramref name="Number2"/>
            </summary>
        </member>
        <member name="M:LCore.Numbers.Number.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:LCore.Numbers.Number.op_Division(LCore.Numbers.Number,System.IConvertible)">
            <summary>
            Performs the division operation on <paramref name="Number1"/> and <paramref name="Number2"/>.
            </summary>
        </member>
        <member name="M:LCore.Numbers.Number.op_Division(LCore.Numbers.Number,LCore.Numbers.Number)">
            <summary>
            Performs the division operation on <paramref name="Number1"/> and <paramref name="Number2"/>.
            </summary>
        </member>
        <member name="M:LCore.Numbers.Number.op_Multiply(LCore.Numbers.Number,System.IConvertible)">
            <summary>
            Performs the multiplication operation on <paramref name="Number1"/> and <paramref name="Number2"/>.
            </summary>
        </member>
        <member name="M:LCore.Numbers.Number.op_Multiply(LCore.Numbers.Number,LCore.Numbers.Number)">
            <summary>
            Performs the multiplication operation on <paramref name="Number1"/> and <paramref name="Number2"/>.
            </summary>
        </member>
        <member name="M:LCore.Numbers.Number.op_Subtraction(LCore.Numbers.Number,System.IConvertible)">
            <summary>
            Performs the subtraction operation on <paramref name="Number1"/> and <paramref name="Number2"/>.
            </summary>
        </member>
        <member name="M:LCore.Numbers.Number.op_Subtraction(LCore.Numbers.Number,LCore.Numbers.Number)">
            <summary>
            Performs the subtraction operation on <paramref name="Number1"/> and <paramref name="Number2"/>.
            </summary>
        </member>
        <member name="M:LCore.Numbers.Number.op_Addition(LCore.Numbers.Number,System.IConvertible)">
            <summary>
            Performs the addition operation on <paramref name="Number1"/> and <paramref name="Number2"/>.
            </summary>
        </member>
        <member name="M:LCore.Numbers.Number.op_Addition(LCore.Numbers.Number,LCore.Numbers.Number)">
            <summary>
            Performs the addition operation on <paramref name="Number1"/> and <paramref name="Number2"/>.
            </summary>
        </member>
        <member name="M:LCore.Numbers.Number.CompareTo(System.Object)">
            <summary>Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</summary>
            <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="Obj" /> in the sort order. Zero This instance occurs in the same position in the sort order as 
            <paramref name="Obj" />. Greater than zero This instance follows <paramref name="Obj" /> in the sort order. </returns>
            <param name="Obj">An object to compare with this instance. </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="Obj" /> is not the same type as this instance. </exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:LCore.Numbers.Number.New(System.Object)">
            <summary>
            Create a new Number of the same type
            </summary>
        </member>
        <member name="P:LCore.Numbers.Number.Precision">
            <summary>
            The smallest storable change in value for the type.
            </summary>
        </member>
        <member name="P:LCore.Numbers.Number.MinValue">
            <summary>
            The lowest possible value for the type.
            </summary>
        </member>
        <member name="P:LCore.Numbers.Number.MaxValue">
            <summary>
            The highest possible value for the type.
            </summary>
        </member>
        <member name="P:LCore.Numbers.Number.DefaultValue">
            <summary>
            The default value for the type.
            </summary>
        </member>
        <member name="M:LCore.Numbers.Number.Divide(LCore.Numbers.Number)">
            <summary>
            Applies the division operation and returns the result as a Number.
            </summary>
            <param name="Value">Number value</param>
        </member>
        <member name="M:LCore.Numbers.Number.Multiply(LCore.Numbers.Number)">
            <summary>
            Applies the multiplication operation and returns the result as a Number.
            </summary>
            <param name="Value">Number value</param>
        </member>
        <member name="M:LCore.Numbers.Number.Subtract(LCore.Numbers.Number)">
            <summary>
            Applies the subtraction operation and returns the result as a Number.
            </summary>
            <param name="Value">Number value</param>
        </member>
        <member name="M:LCore.Numbers.Number.Add(LCore.Numbers.Number)">
            <summary>
            Applies the addition operation and returns the result as a Number.
            </summary>
            <param name="Value">Number value</param>
        </member>
        <member name="M:LCore.Numbers.Number.Divide(System.IConvertible)">
            <summary>
            Applies the division operation and returns the result as a Number.
            </summary>
            <param name="Value">Number value</param>
            
        </member>
        <member name="M:LCore.Numbers.Number.Multiply(System.IConvertible)">
            <summary>
            Applies the multiplication operation and returns the result as a Number.
            </summary>
            <param name="Value">Number value</param>
        </member>
        <member name="M:LCore.Numbers.Number.Subtract(System.IConvertible)">
            <summary>
            Applies the subtraction operation and returns the result as a Number.
            </summary>
            <param name="Value">Number value</param>
        </member>
        <member name="M:LCore.Numbers.Number.Add(System.IConvertible)">
            <summary>
            Applies the addition operation and returns the result as a Number.
            </summary>
            <param name="Value">Number value</param>
        </member>
        <member name="M:LCore.Numbers.Number.GetValuePrecision">
            <summary>
            Returns the precision needed to store the current value.
            </summary>
        </member>
        <member name="M:LCore.Numbers.Number.GetValue">
            <summary>
            Gets the underlying value
            </summary>
        </member>
        <member name="T:LCore.Numbers.ByteNumber">
            <summary>
            Provides an implementation of INumber for byte
            </summary>
        </member>
        <member name="M:LCore.Numbers.ByteNumber.op_Implicit(System.Byte)~LCore.Numbers.ByteNumber">
            <summary>
            Implicitally convert a byte to a NumberByte
            </summary>
            <param name="i">The byte to convert</param>
        </member>
        <member name="M:LCore.Numbers.ByteNumber.#ctor(System.Byte)">
            <summary>
            Create a new NumberByte wrapper for a decimal
            </summary>
            <param name="Value">Number value</param>
        </member>
        <member name="M:LCore.Numbers.ByteNumber.#ctor">
            <summary>
            Create a new ByteNumber wrapper for a byte
            </summary>
        </member>
        <member name="P:LCore.Numbers.ByteNumber.TypePrecision">
            <summary>
            The smallest storable change in value for type byte.
            </summary>
        </member>
        <member name="P:LCore.Numbers.ByteNumber.TypeMinValue">
            <summary>
            The lowest possible value for type byte.
            </summary>
        </member>
        <member name="P:LCore.Numbers.ByteNumber.TypeMaxValue">
            <summary>
            The highest possible value for type byte.
            </summary>
        </member>
        <member name="P:LCore.Numbers.ByteNumber.TypeDefaultValue">
            <summary>
            The default value for type byte.
            </summary>
        </member>
        <member name="M:LCore.Numbers.ByteNumber.GetValuePrecision">
            <summary>
            Returns the precision needed to store the current value.
            </summary>
        </member>
        <member name="M:LCore.Numbers.ByteNumber.Add(System.Byte,System.Byte)">
            <summary>
            Applies the addition operation and returns the result as a byte.
            </summary>
        </member>
        <member name="M:LCore.Numbers.ByteNumber.Subtract(System.Byte,System.Byte)">
            <summary>
            Applies the subtraction operation and returns the result as a byte.
            </summary>
        </member>
        <member name="M:LCore.Numbers.ByteNumber.Multiply(System.Byte,System.Byte)">
            <summary>
            Applies the multiplication operation and returns the result as a byte.
            </summary>
        </member>
        <member name="M:LCore.Numbers.ByteNumber.Divide(System.Byte,System.Byte)">
            <summary>
            Applies the division operation and returns the result as a Number.
            </summary>
            <returns>A double result</returns>
        </member>
        <member name="M:LCore.Numbers.ByteNumber.New(System.Byte)">
            <summary>
            Create a new Number of the same type
            </summary>
        </member>
        <member name="T:LCore.Numbers.IntNumber">
            <summary>
            Provides an implementation of INumber for int
            </summary>
        </member>
        <member name="M:LCore.Numbers.IntNumber.op_Implicit(System.Int32)~LCore.Numbers.IntNumber">
            <summary>
            Implicitally convert a int to a NumberInt
            </summary>
            <param name="i">The int to convert</param>
        </member>
        <member name="M:LCore.Numbers.IntNumber.#ctor(System.Int32)">
            <summary>
            Create a new NumberInt wrapper for a decimal
            </summary>
            <param name="Value">Number value</param>
        </member>
        <member name="M:LCore.Numbers.IntNumber.#ctor">
            <summary>
            Create a new IntNumber wrapper for a int
            </summary>
        </member>
        <member name="P:LCore.Numbers.IntNumber.TypePrecision">
            <summary>
            The smallest storable change in value for type int.
            </summary>
        </member>
        <member name="P:LCore.Numbers.IntNumber.TypeMinValue">
            <summary>
            The lowest possible value for type int.
            </summary>
        </member>
        <member name="P:LCore.Numbers.IntNumber.TypeMaxValue">
            <summary>
            The highest possible value for type int.
            </summary>
        </member>
        <member name="P:LCore.Numbers.IntNumber.TypeDefaultValue">
            <summary>
            The default value for type int.
            </summary>
        </member>
        <member name="M:LCore.Numbers.IntNumber.GetValuePrecision">
            <summary>
            Returns the precision needed to store the current value.
            </summary>
        </member>
        <member name="M:LCore.Numbers.IntNumber.Add(System.Int32,System.Int32)">
            <summary>
            Applies the addition operation and returns the result as a int.
            </summary>
        </member>
        <member name="M:LCore.Numbers.IntNumber.Subtract(System.Int32,System.Int32)">
            <summary>
            Applies the subtraction operation and returns the result as a int.
            </summary>
        </member>
        <member name="M:LCore.Numbers.IntNumber.Multiply(System.Int32,System.Int32)">
            <summary>
            Applies the multiplication operation and returns the result as a int.
            </summary>
        </member>
        <member name="M:LCore.Numbers.IntNumber.Divide(System.Int32,System.Int32)">
            <summary>
            Applies the division operation and returns the result as a Number.
            </summary>
            <returns>A double result</returns>
        </member>
        <member name="M:LCore.Numbers.IntNumber.New(System.Int32)">
            <summary>
            Create a new Number of the same type
            </summary>
        </member>
        <member name="T:LCore.Numbers.SByteNumber">
            <summary>
            Provides an implementation of INumber for sbyte
            </summary>
        </member>
        <member name="M:LCore.Numbers.SByteNumber.op_Implicit(System.SByte)~LCore.Numbers.SByteNumber">
            <summary>
            Implicitally convert a sbyte to a SByteNumber
            </summary>
            <param name="i">The sbyte to convert</param>
        </member>
        <member name="M:LCore.Numbers.SByteNumber.#ctor(System.SByte)">
            <summary>
            Create a new SByteNumber wrapper for a decimal
            </summary>
            <param name="Value">Number value</param>
        </member>
        <member name="M:LCore.Numbers.SByteNumber.#ctor">
            <summary>
            Create a new SByteNumber wrapper for a sbyte
            </summary>
        </member>
        <member name="P:LCore.Numbers.SByteNumber.TypePrecision">
            <summary>
            The smallest storable change in value for type sbyte.
            </summary>
        </member>
        <member name="P:LCore.Numbers.SByteNumber.TypeMinValue">
            <summary>
            The lowest possible value for type sbyte.
            </summary>
        </member>
        <member name="P:LCore.Numbers.SByteNumber.TypeMaxValue">
            <summary>
            The highest possible value for type sbyte.
            </summary>
        </member>
        <member name="P:LCore.Numbers.SByteNumber.TypeDefaultValue">
            <summary>
            The default value for type sbyte.
            </summary>
        </member>
        <member name="M:LCore.Numbers.SByteNumber.GetValuePrecision">
            <summary>
            Returns the precision needed to store the current value.
            </summary>
        </member>
        <member name="M:LCore.Numbers.SByteNumber.Add(System.SByte,System.SByte)">
            <summary>
            Applies the addition operation and returns the result as an sbyte.
            </summary>
        </member>
        <member name="M:LCore.Numbers.SByteNumber.Subtract(System.SByte,System.SByte)">
            <summary>
            Applies the subtraction operation and returns the result as an sbyte.
            </summary>
        </member>
        <member name="M:LCore.Numbers.SByteNumber.Multiply(System.SByte,System.SByte)">
            <summary>
            Applies the multiplication operation and returns the result as an sbyte.
            </summary>
        </member>
        <member name="M:LCore.Numbers.SByteNumber.Divide(System.SByte,System.SByte)">
            <summary>
            Applies the division operation and returns the result as a Number.
            </summary>
            <returns>A double result</returns>
        </member>
        <member name="M:LCore.Numbers.SByteNumber.New(System.SByte)">
            <summary>
            Create a new Number of the same type
            </summary>
        </member>
        <member name="T:LCore.Numbers.ShortNumber">
            <summary>
            Provides an implementation of INumber for short
            </summary>
        </member>
        <member name="M:LCore.Numbers.ShortNumber.op_Implicit(System.Int16)~LCore.Numbers.ShortNumber">
            <summary>
            Implicitally convert a short to a ShortNumber
            </summary>
            <param name="i">The short to convert</param>
        </member>
        <member name="M:LCore.Numbers.ShortNumber.#ctor(System.Int16)">
            <summary>
            Create a new ShortNumber wrapper for a decimal
            </summary>
            <param name="Value">Number value</param>
        </member>
        <member name="M:LCore.Numbers.ShortNumber.#ctor">
            <summary>
            Create a new ShortNumber wrapper for a short
            </summary>
        </member>
        <member name="P:LCore.Numbers.ShortNumber.TypePrecision">
            <summary>
            The smallest storable change in value for type short.
            </summary>
        </member>
        <member name="P:LCore.Numbers.ShortNumber.TypeMinValue">
            <summary>
            The lowest possible value for type short.
            </summary>
        </member>
        <member name="P:LCore.Numbers.ShortNumber.TypeMaxValue">
            <summary>
            The highest possible value for type short.
            </summary>
        </member>
        <member name="P:LCore.Numbers.ShortNumber.TypeDefaultValue">
            <summary>
            The default value for type short.
            </summary>
        </member>
        <member name="M:LCore.Numbers.ShortNumber.GetValuePrecision">
            <summary>
            Returns the precision needed to store the current value.
            </summary>
        </member>
        <member name="M:LCore.Numbers.ShortNumber.Add(System.Int16,System.Int16)">
            <summary>
            Applies the addition operation and returns the result as a short.
            </summary>
        </member>
        <member name="M:LCore.Numbers.ShortNumber.Subtract(System.Int16,System.Int16)">
            <summary>
            Applies the subtraction operation and returns the result as a short.
            </summary>
        </member>
        <member name="M:LCore.Numbers.ShortNumber.Multiply(System.Int16,System.Int16)">
            <summary>
            Applies the multiplication operation and returns the result as a short.
            </summary>
        </member>
        <member name="M:LCore.Numbers.ShortNumber.Divide(System.Int16,System.Int16)">
            <summary>
            Applies the division operation and returns the result as a Number.
            </summary>
            <returns>A double result</returns>
        </member>
        <member name="M:LCore.Numbers.ShortNumber.New(System.Int16)">
            <summary>
            Create a new Number of the same type
            </summary>
        </member>
        <member name="T:LCore.Numbers.UIntNumber">
            <summary>
            Provides an implementation of INumber for uint
            </summary>
        </member>
        <member name="M:LCore.Numbers.UIntNumber.op_Implicit(System.UInt32)~LCore.Numbers.UIntNumber">
            <summary>
            Implicitally convert a uint to a UIntNumber
            </summary>
            <param name="i">The uint to convert</param>
        </member>
        <member name="M:LCore.Numbers.UIntNumber.#ctor(System.UInt32)">
            <summary>
            Create a new UIntNumber wrapper for a decimal
            </summary>
            <param name="Value">Number value</param>
        </member>
        <member name="M:LCore.Numbers.UIntNumber.#ctor">
            <summary>
            Create a new UIntNumber wrapper for a uint
            </summary>
        </member>
        <member name="P:LCore.Numbers.UIntNumber.TypePrecision">
            <summary>
            The smallest storable change in value for type uint.
            </summary>
        </member>
        <member name="P:LCore.Numbers.UIntNumber.TypeMinValue">
            <summary>
            The lowest possible value for type uint.
            </summary>
        </member>
        <member name="P:LCore.Numbers.UIntNumber.TypeMaxValue">
            <summary>
            The highest possible value for type uint.
            </summary>
        </member>
        <member name="P:LCore.Numbers.UIntNumber.TypeDefaultValue">
            <summary>
            The default value for type uint.
            </summary>
        </member>
        <member name="M:LCore.Numbers.UIntNumber.GetValuePrecision">
            <summary>
            Returns the precision needed to store the current value.
            </summary>
        </member>
        <member name="M:LCore.Numbers.UIntNumber.Add(System.UInt32,System.UInt32)">
            <summary>
            Applies the addition operation and returns the result as a uint.
            </summary>
        </member>
        <member name="M:LCore.Numbers.UIntNumber.Subtract(System.UInt32,System.UInt32)">
            <summary>
            Applies the subtraction operation and returns the result as a uint.
            </summary>
        </member>
        <member name="M:LCore.Numbers.UIntNumber.Multiply(System.UInt32,System.UInt32)">
            <summary>
            Applies the multiplication operation and returns the result as a uint.
            </summary>
        </member>
        <member name="M:LCore.Numbers.UIntNumber.Divide(System.UInt32,System.UInt32)">
            <summary>
            Applies the division operation and returns the result as a Number.
            </summary>
            <returns>A double result</returns>
        </member>
        <member name="M:LCore.Numbers.UIntNumber.New(System.UInt32)">
            <summary>
            Create a new Number of the same type
            </summary>
        </member>
        <member name="T:LCore.Numbers.ULongNumber">
            <summary>
            Provides an implementation of INumber for ulong
            </summary>
        </member>
        <member name="M:LCore.Numbers.ULongNumber.op_Implicit(System.UInt64)~LCore.Numbers.ULongNumber">
            <summary>
            Implicitally convert a ulong to a ULongNumber
            </summary>
            <param name="i">The ulong to convert</param>
        </member>
        <member name="M:LCore.Numbers.ULongNumber.#ctor(System.UInt64)">
            <summary>
            Create a new ULongNumber wrapper for a decimal
            </summary>
            <param name="Value">Number value</param>
        </member>
        <member name="M:LCore.Numbers.ULongNumber.#ctor">
            <summary>
            Create a new ULongNumber wrapper for a ulong
            </summary>
        </member>
        <member name="P:LCore.Numbers.ULongNumber.TypePrecision">
            <summary>
            The smallest storable change in value for type ulong.
            </summary>
        </member>
        <member name="P:LCore.Numbers.ULongNumber.TypeMinValue">
            <summary>
            The lowest possible value for type ulong.
            </summary>
        </member>
        <member name="P:LCore.Numbers.ULongNumber.TypeMaxValue">
            <summary>
            The highest possible value for type ulong.
            </summary>
        </member>
        <member name="P:LCore.Numbers.ULongNumber.TypeDefaultValue">
            <summary>
            The default value for type ulong.
            </summary>
        </member>
        <member name="M:LCore.Numbers.ULongNumber.GetValuePrecision">
            <summary>
            Returns the precision needed to store the current value.
            </summary>
        </member>
        <member name="M:LCore.Numbers.ULongNumber.Add(System.UInt64,System.UInt64)">
            <summary>
            Applies the addition operation and returns the result as a ulong.
            </summary>
        </member>
        <member name="M:LCore.Numbers.ULongNumber.Subtract(System.UInt64,System.UInt64)">
            <summary>
            Applies the subtraction operation and returns the result as a ulong.
            </summary>
        </member>
        <member name="M:LCore.Numbers.ULongNumber.Multiply(System.UInt64,System.UInt64)">
            <summary>
            Applies the multiplication operation and returns the result as a ulong.
            </summary>
        </member>
        <member name="M:LCore.Numbers.ULongNumber.Divide(System.UInt64,System.UInt64)">
            <summary>
            Applies the division operation and returns the result as a Number.
            </summary>
            <returns>A double result</returns>
        </member>
        <member name="M:LCore.Numbers.ULongNumber.New(System.UInt64)">
            <summary>
            Create a new Number of the same type
            </summary>
        </member>
        <member name="T:LCore.Numbers.UShortNumber">
            <summary>
            Provides an implementation of INumber for ushort
            </summary>
        </member>
        <member name="M:LCore.Numbers.UShortNumber.op_Implicit(System.UInt16)~LCore.Numbers.UShortNumber">
            <summary>
            Implicitally convert a ushort to a UShortNumber
            </summary>
            <param name="i">The ushort to convert</param>
        </member>
        <member name="M:LCore.Numbers.UShortNumber.#ctor(System.UInt16)">
            <summary>
            Create a new UShortNumber wrapper for a decimal
            </summary>
            <param name="Value">Number value</param>
        </member>
        <member name="M:LCore.Numbers.UShortNumber.#ctor">
            <summary>
            Create a new UShortNumber wrapper for a ushort
            </summary>
        </member>
        <member name="P:LCore.Numbers.UShortNumber.TypePrecision">
            <summary>
            The smallest storable change in value for type ushort.
            </summary>
        </member>
        <member name="P:LCore.Numbers.UShortNumber.TypeMinValue">
            <summary>
            The lowest possible value for type ushort.
            </summary>
        </member>
        <member name="P:LCore.Numbers.UShortNumber.TypeMaxValue">
            <summary>
            The highest possible value for type ushort.
            </summary>
        </member>
        <member name="P:LCore.Numbers.UShortNumber.TypeDefaultValue">
            <summary>
            The default value for ushort.
            </summary>
        </member>
        <member name="M:LCore.Numbers.UShortNumber.GetValuePrecision">
            <summary>
            Returns the precision needed to store the current value.
            </summary>
        </member>
        <member name="M:LCore.Numbers.UShortNumber.Add(System.UInt16,System.UInt16)">
            <summary>
            Applies the addition operation and returns the result as a ushort.
            </summary>
        </member>
        <member name="M:LCore.Numbers.UShortNumber.Subtract(System.UInt16,System.UInt16)">
            <summary>
            Applies the subtraction operation and returns the result as a ushort.
            </summary>
        </member>
        <member name="M:LCore.Numbers.UShortNumber.Multiply(System.UInt16,System.UInt16)">
            <summary>
            Applies the multiplication operation and returns the result as a ushort.
            </summary>
        </member>
        <member name="M:LCore.Numbers.UShortNumber.Divide(System.UInt16,System.UInt16)">
            <summary>
            Applies the division operation and returns the result as a Number.
            </summary>
            <returns>A double result</returns>
        </member>
        <member name="M:LCore.Numbers.UShortNumber.New(System.UInt16)">
            <summary>
            Create a new Number of the same type
            </summary>
        </member>
        <member name="M:LCore.Statistics.QuantitativeSampleSet`1.GetStandardDeviationLine(`0)">
            <summary>
            Returns a positive or negative number representing the distance (in standard deviations) from the mean of the data.
            </summary>
            <param name="DataPoint">Value in relation to the sample set</param>
            <returns>Returns a positive or negative number representing the distance (in standard deviations) from the mean of the data.</returns>
        </member>
        <member name="P:LCore.Statistics.SampleSet.PopulationSize">
            <summary>
            PopulationSize defaults to the SampleSize unless specified.
            </summary>
        </member>
        <member name="M:LCore.Statistics.StatsExt.GetRatioWithin(System.Double)">
            <summary>
            Returns the ratio (between 0 and 1) of data that exists within StandardDeviations of the mean.
            As per Chebyshev's Inequality.
            </summary>
            <param name="StandardDeviations">Must be positive</param>
            <returns>Returns the ratio (between 0 and 1) of data that exists within StandardDeviations of the mean</returns>
            <exception cref="T:System.ArgumentException"><paramref name="StandardDeviations" /> was less than 0.</exception>
        </member>
        <member name="M:LCore.Statistics.StatsExt.GetRatioWithout(System.Double)">
            <summary>
            Returns the ratio (between 0 and 1) of data that exists outside of StandardDeviations of the mean.
            Derived from Chebyshev's Inequality.
            </summary>
            <param name="StandardDeviations">Must be positive</param>
            <returns>Returns the ratio (between 0 and 1) of data that exists outside of StandardDeviations of the mean</returns>
            <exception cref="T:System.ArgumentException"><paramref name="StandardDeviations" /> was less than 0.</exception>
        </member>
        <member name="M:LCore.Statistics.StatsExt.GetRatioGreaterThan(System.Double)">
            <summary>
            Returns the ratio (between 0 and 1) of data that exists greater than StandardDeviations of the mean.
            Derived from Chebyshev's Inequality.
            </summary>
            <param name="StandardDeviations">May be positive or negative</param>
            <returns>Returns the ratio (between 0 and 1) of data that exists greater than StandardDeviations of the mean</returns>
        </member>
        <member name="M:LCore.Statistics.StatsExt.GetRatioLessThan(System.Double)">
            <summary>
            Returns the ratio (between 0 and 1) of data that exists less than StandardDeviations of the mean.
            Derived from Chebyshev's Inequality.
            </summary>
            <param name="StandardDeviations">May be positive or negative</param>
            <returns>Returns the ratio (between 0 and 1) of data that exists less than StandardDeviations of the mean</returns>
        </member>
        <member name="M:LCore.Statistics.StatsExt.GetRatioWithinRange(System.Double,System.Double)">
            <summary>
            Returns the ratio (between 0 and 1) of data that exists between the two values of Standard Deviation.
            Derived from Chebyshev's Inequality.
            </summary>
            <param name="MinimumStandardDeviations">Positive or negative, must be less than MaximumStandardDeviations</param>
            <param name="MaximumStandardDeviations">Positive or negative, must be more than MaximumStandardDeviations</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Maximum must be greater than minimum.</exception>
        </member>
        <member name="M:LCore.Statistics.StatsExt.GetRatioWithoutRange(System.Double,System.Double)">
            <summary>
            Returns the ratio (between 0 and 1) of data that exists outside of two values of Standard Deviation.
            Derived from Chebyshev's Inequality.
            </summary>
            <param name="MinimumStandardDeviations">Positive or negative, must be less than MaximumStandardDeviations</param>
            <param name="MaximumStandardDeviations">Positive or negative, must be more than MaximumStandardDeviations</param>
            <returns></returns>
        </member>
        <member name="M:LCore.Statistics.StatsExt.GetStandardDeviationRange(System.Single)">
            <summary>
            Returns the number of Standard Deviations from the mean must be included to contain the passed Ratio (between 0 and 1) of data.
            Derived from Chebyshev's Inequality.
            </summary>
            <param name="Ratio">Must be between 0 and 1</param>
            <returns>Returns the number of Standard Deviations from the mean must be included to contain the passed Ratio (between 0 and 1) of data.</returns>
            <exception cref="T:System.ArgumentException">Ratio was not not between 0 and 1.</exception>
        </member>
        <member name="M:LCore.Statistics.StatsExt.GetStandardDeviationLowerRatio(System.Single)">
            <summary>
            Returns the number of Standard Deviations a line must be drawn so that the Ratio greater is equal to the passed Ratio.
            Derived from Chebyshev's Inequality.
            </summary>
            <param name="Ratio">Must be between 0 and 1</param>
            <returns>Returns the number of Standard Deviations the line must be drawn so that the Ratio greater is equal to the passed Ratio.</returns>
            <exception cref="T:System.ArgumentException">Ratio was not not between 0 and 1.</exception>
        </member>
        <member name="M:LCore.Statistics.StatsExt.GetStandardDeviationUpperRatio(System.Single)">
            <summary>
            Returns the number of Standard Deviations a line must be drawn so that the Ratio less then the line is equal to the passed Ratio.
            Derived from Chebyshev's Inequality.
            </summary>
            <param name="Ratio">Must be between 0 and 1</param>
            <returns>Returns the number of Standard Deviations a line must be drawn so that the Ratio less then the line is equal to the passed Ratio.</returns>
            <exception cref="T:System.ArgumentException">Ratio was not not between 0 and 1.</exception>
        </member>
        <member name="T:LCore.Tools.CacheData">
            <summary>
            Stores function result and execution time data used from L caching methods.
            </summary>
        </member>
        <member name="F:LCore.Tools.CacheData.Data">
            <summary>
            Data from method results
            </summary>
        </member>
        <member name="F:LCore.Tools.CacheData.OriginalTimeMS">
            <summary>
            The original execution length for this particular method cache
            </summary>
        </member>
        <member name="M:LCore.Tools.CacheData.AddTime(System.Int64)">
            <summary>
            Adds a value of time saved to the cache
            </summary>
        </member>
        <member name="M:LCore.Tools.CacheData.#ctor(System.Object,System.Int64)">
            <summary>
            Creates a new CacheData object from a method result.
            </summary>
        </member>
        <member name="P:LCore.Tools.CacheData.TotalTimeSaved">
            <summary>
            Estimates the total CPU time saved by this cache.
            </summary>
        </member>
        <member name="P:LCore.Tools.CacheData.PercentSaved">
            <summary>
            Estimates the percentage of time saved vs. used by this cache.
            </summary>
        </member>
        <member name="T:LCore.Tools.MethodProfileData">
            <summary>
            Class used to provide structured Method Profile times 
            for the Profile extension method.
            </summary>
        </member>
        <member name="T:LCore.Tools.MethodProfileData`1">
            <summary>
            Class used to provide structured Method Profile times 
            for the Profile extension method.
            </summary>
        </member>
        <member name="P:LCore.Tools.MethodProfileData`1.Times">
            <summary>
            The collection of execution times for the method.
            </summary>
        </member>
        <member name="F:LCore.Tools.MethodProfileData`1.Data">
            <summary>
            The data cached.
            </summary>
        </member>
        <member name="P:LCore.Tools.MethodProfileData`1.AverageMS">
            <summary>
            Computes the average millisecond execution time for the method
            </summary>
        </member>
        <member name="T:LCore.Tools.DoubleDictionary`3">
            <summary>
            The double dictionary indexes data using two keys. 
            </summary>
            <typeparam name="TKey">TKey is the Primary Key</typeparam>
            <typeparam name="TKey2">TKey2 is the Secondary Key</typeparam>
            <typeparam name="TValue">TValue is the Value</typeparam>
        </member>
        <member name="T:LCore.Tools.RegistryHelper">
            <summary>
            Handles saving and loading Strings, int, booleans, and IEnumerables to the registry.
            All unhandled exceptions are Formed. Safe class.
            </summary>
        </member>
        <member name="M:LCore.Tools.RegistryHelper.RemoveAll">
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to read from the registry key. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The user does not have the necessary registry rights.</exception>
            <exception cref="T:System.IO.IOException">A system error occurred; for example, the current key has been deleted.</exception>
        </member>
        <member name="M:LCore.Tools.RegistryHelper.Remove(System.String[])">
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to read from the registry key. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The user does not have the necessary registry rights.</exception>
            <exception cref="T:System.IO.IOException">A system error occurred; for example, the current key has been deleted.</exception>
        </member>
        <member name="M:LCore.Tools.RegistryHelper.Save(System.String,System.Object)">
            <exception cref="T:System.ArgumentNullException"><paramref name="Obj"/> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="Name"/> cannot be null or empty.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The <see cref="T:Microsoft.Win32.RegistryKey" /> is read-only, and cannot be written to; for example, the key has not been opened with write access. -or-The <see cref="T:Microsoft.Win32.RegistryKey" /> object represents a root-level node, and the operating system is Windows Millennium Edition or Windows 98.</exception>
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to create or modify registry keys. </exception>
            <exception cref="T:System.IO.IOException">The <see cref="T:Microsoft.Win32.RegistryKey" /> object represents a root-level node, and the operating system is Windows 2000, Windows XP, or Windows Server 2003.</exception>
        </member>
        <member name="M:LCore.Tools.RegistryHelper.Save(System.String,System.String)">
            <exception cref="T:System.ArgumentNullException"><paramref name="Name" /> is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The <see cref="T:Microsoft.Win32.RegistryKey" /> is read-only, and cannot be written to; for example, the key has not been opened with write access. -or-The <see cref="T:Microsoft.Win32.RegistryKey" /> object represents a root-level node, and the operating system is Windows Millennium Edition or Windows 98.</exception>
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to create or modify registry keys. </exception>
            <exception cref="T:System.IO.IOException">The <see cref="T:Microsoft.Win32.RegistryKey" /> object represents a root-level node, and the operating system is Windows 2000, Windows XP, or Windows Server 2003.</exception>
        </member>
        <member name="M:LCore.Tools.RegistryHelper.Save(System.String,System.IConvertible)">
            <exception cref="T:System.ArgumentNullException"><paramref name="Obj" /> is null. </exception>
            <exception cref="T:System.ArgumentException"><paramref name="Obj" /> is an unsupported data type. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Microsoft.Win32.RegistryKey" /> that contains the specified value is closed (closed keys cannot be accessed). </exception>
            <exception cref="T:System.UnauthorizedAccessException">The <see cref="T:Microsoft.Win32.RegistryKey" /> is read-only, and cannot be written to; for example, the key has not been opened with write access. -or-The <see cref="T:Microsoft.Win32.RegistryKey" /> object represents a root-level node, and the operating system is Windows Millennium Edition or Windows 98.</exception>
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to create or modify registry keys. </exception>
            <exception cref="T:System.IO.IOException">The <see cref="T:Microsoft.Win32.RegistryKey" /> object represents a root-level node, and the operating system is Windows 2000, Windows XP, or Windows Server 2003.</exception>
        </member>
        <member name="M:LCore.Tools.RegistryHelper.Save(System.String,System.Byte[])">
            <exception cref="T:System.ArgumentNullException"><paramref name="List" /> is null. </exception>
            <exception cref="T:System.ArgumentException">The type of <paramref name="List" /> did not match the registry data type specified by <paramref>
                    <name>valueKind</name>
                </paramref>
                , therefore the data could not be converted properly. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Microsoft.Win32.RegistryKey" /> that contains the specified value is closed (closed keys cannot be accessed). </exception>
            <exception cref="T:System.UnauthorizedAccessException">The <see cref="T:Microsoft.Win32.RegistryKey" /> is read-only, and cannot be written to; for example, the key has not been opened with write access.-or-The <see cref="T:Microsoft.Win32.RegistryKey" /> object represents a root-level node, and the operating system is Windows Millennium Edition or Windows 98. </exception>
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to create or modify registry keys. </exception>
            <exception cref="T:System.IO.IOException">The <see cref="T:Microsoft.Win32.RegistryKey" /> object represents a root-level node, and the operating system is Windows 2000, Windows XP, or Windows Server 2003.</exception>
        </member>
        <member name="M:LCore.Tools.RegistryHelper.Save(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <exception cref="T:System.ArgumentNullException"><paramref name="List" /> is null. </exception>
            <exception cref="T:System.ArgumentException"><paramref name="List" /> is an unsupported data type. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Microsoft.Win32.RegistryKey" /> that contains the specified value is closed (closed keys cannot be accessed). </exception>
            <exception cref="T:System.UnauthorizedAccessException">The <see cref="T:Microsoft.Win32.RegistryKey" /> is read-only, and cannot be written to; for example, the key has not been opened with write access. -or-The <see cref="T:Microsoft.Win32.RegistryKey" /> object represents a root-level node, and the operating system is Windows Millennium Edition or Windows 98.</exception>
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to create or modify registry keys. </exception>
            <exception cref="T:System.IO.IOException">The <see cref="T:Microsoft.Win32.RegistryKey" /> object represents a root-level node, and the operating system is Windows 2000, Windows XP, or Windows Server 2003.</exception>
        </member>
        <member name="M:LCore.Tools.RegistryHelper.LoadObject(System.String)">
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to read from the registry key. </exception>
            <exception cref="T:System.IO.IOException">The <see cref="T:Microsoft.Win32.RegistryKey" /> that contains the specified value has been marked for deletion. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The user does not have the necessary registry rights.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Microsoft.Win32.RegistryKey" /> that contains the specified value is closed (closed keys cannot be accessed). </exception>
        </member>
        <member name="M:LCore.Tools.RegistryHelper.LoadString(System.String)">
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to read from the registry key. </exception>
            <exception cref="T:System.IO.IOException">The <see cref="T:Microsoft.Win32.RegistryKey" /> that contains the specified value has been marked for deletion. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The user does not have the necessary registry rights.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Microsoft.Win32.RegistryKey" /> that contains the specified value is closed (closed keys cannot be accessed). </exception>
        </member>
        <member name="M:LCore.Tools.RegistryHelper.LoadInt(System.String)">
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to read from the registry key. </exception>
            <exception cref="T:System.IO.IOException">The <see cref="T:Microsoft.Win32.RegistryKey" /> that contains the specified value has been marked for deletion. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The user does not have the necessary registry rights.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Microsoft.Win32.RegistryKey" /> that contains the specified value is closed (closed keys cannot be accessed). </exception>
        </member>
        <member name="M:LCore.Tools.RegistryHelper.LoadLong(System.String)">
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to read from the registry key. </exception>
            <exception cref="T:System.IO.IOException">The <see cref="T:Microsoft.Win32.RegistryKey" /> that contains the specified value has been marked for deletion. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The user does not have the necessary registry rights.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Microsoft.Win32.RegistryKey" /> that contains the specified value is closed (closed keys cannot be accessed). </exception>
        </member>
        <member name="M:LCore.Tools.RegistryHelper.LoadFloat(System.String)">
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to read from the registry key. </exception>
            <exception cref="T:System.IO.IOException">The <see cref="T:Microsoft.Win32.RegistryKey" /> that contains the specified value has been marked for deletion. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The user does not have the necessary registry rights.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Microsoft.Win32.RegistryKey" /> that contains the specified value is closed (closed keys cannot be accessed). </exception>
        </member>
        <member name="M:LCore.Tools.RegistryHelper.LoadDouble(System.String)">
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to read from the registry key. </exception>
            <exception cref="T:System.IO.IOException">The <see cref="T:Microsoft.Win32.RegistryKey" /> that contains the specified value has been marked for deletion. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The user does not have the necessary registry rights.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Microsoft.Win32.RegistryKey" /> that contains the specified value is closed (closed keys cannot be accessed). </exception>
        </member>
        <member name="M:LCore.Tools.RegistryHelper.LoadChar(System.String)">
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to read from the registry key. </exception>
            <exception cref="T:System.IO.IOException">The <see cref="T:Microsoft.Win32.RegistryKey" /> that contains the specified value has been marked for deletion. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The user does not have the necessary registry rights.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Microsoft.Win32.RegistryKey" /> that contains the specified value is closed (closed keys cannot be accessed). </exception>
        </member>
        <member name="M:LCore.Tools.RegistryHelper.LoadBool(System.String)">
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to read from the registry key. </exception>
            <exception cref="T:System.IO.IOException">The <see cref="T:Microsoft.Win32.RegistryKey" /> that contains the specified value has been marked for deletion. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The user does not have the necessary registry rights.</exception>
        </member>
        <member name="M:LCore.Tools.RegistryHelper.LoadBinary(System.String)">
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to read from the registry key. </exception>
            <exception cref="T:System.IO.IOException">The <see cref="T:Microsoft.Win32.RegistryKey" /> that contains the specified value has been marked for deletion. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The user does not have the necessary registry rights.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Microsoft.Win32.RegistryKey" /> that contains the specified value is closed (closed keys cannot be accessed). </exception>
        </member>
        <member name="M:LCore.Tools.RegistryHelper.LoadList(System.String)">
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to read from the registry key. </exception>
            <exception cref="T:System.IO.IOException">The <see cref="T:Microsoft.Win32.RegistryKey" /> that contains the specified value has been marked for deletion. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The user does not have the necessary registry rights.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Microsoft.Win32.RegistryKey" /> that contains the specified value is closed (closed keys cannot be accessed). </exception>
            <exception cref="T:System.FormatException">Count registry value is not properly set</exception>
            <exception cref="T:System.InvalidCastException">Count registry value is not properly set</exception>
            <exception cref="T:System.OverflowException">Count registry value is not properly set</exception>
        </member>
        <member name="M:LCore.Tools.RegistryHelper.LoadAll">
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to read from the registry key. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The user does not have the necessary registry rights.</exception>
            <exception cref="T:System.IO.IOException">A system error occurred; for example, the current key has been deleted.</exception>
        </member>
        <member name="M:LCore.Tools.RegistryHelper.#ctor(System.String,Microsoft.Win32.RegistryKey)">
            <summary>
            Creates a new RegistryHandler under the provided key.
            </summary>
            <param name="RegistrySubKey">Cannot be null</param>
            <param name="RootKey"></param>
            <exception cref="T:System.InvalidOperationException">Could not open registry key</exception>
            <exception cref="T:System.ArgumentException">Value cannot be null or empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="RootKey"/> is <see langword="null" />.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Microsoft.Win32.RegistryKey" /> is closed (closed keys cannot be accessed). </exception>
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to read the registry key. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The current <see cref="T:Microsoft.Win32.RegistryKey" /> object represents a key with access control security, and the caller does not have <see cref="F:System.Security.AccessControl.RegistryRights.ChangePermissions" /> rights.</exception>
            <exception cref="T:System.IO.IOException">The nesting level exceeds 510.-or-A system error occurred, such as deletion of the key, or an attempt to create a key in the <see cref="F:Microsoft.Win32.Registry.LocalMachine" /> root.</exception>
        </member>
        <member name="T:LCore.Tools.ExceptionList">
            <summary>
            Allows an exception to contain multiple exceptions within itself.
            </summary>
        </member>
        <member name="M:LCore.Tools.ExceptionList.op_Implicit(LCore.Tools.ExceptionList)~System.Exception[]">
            <summary>
            Implicitally convert a List<paramref name="Ex" /> to an ExceptionList
            </summary>
        </member>
        <member name="M:LCore.Tools.ExceptionList.op_Implicit(System.Exception[])~LCore.Tools.ExceptionList">
            <summary>
            Implicitally convert a ExceptionList to an Exception[]
            </summary>
        </member>
        <member name="M:LCore.Tools.ExceptionList.op_Implicit(LCore.Tools.ExceptionList)~System.Collections.Generic.List{System.Exception}">
            <summary>
            Implicitally convert a List<paramref name="Ex" /> to an ExceptionList
            </summary>
        </member>
        <member name="M:LCore.Tools.ExceptionList.op_Implicit(System.Collections.Generic.List{System.Exception})~LCore.Tools.ExceptionList">
            <summary>
            Implicitally convert a ExceptionList to a List<paramref name="Ex" />
            </summary>
        </member>
        <member name="P:LCore.Tools.ExceptionList.Exceptions">
            <summary>
            The list of exceptions stored.
            </summary>
        </member>
        <member name="M:LCore.Tools.ExceptionList.#ctor(System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Create a new ExceptionList
            </summary>
        </member>
        <member name="P:LCore.Tools.ExceptionList.Message">
            <summary>Gets a message that describes the current exception.</summary>
            <returns>The error message that explains the reason for the exception, or an empty string ("").</returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:LCore.Tools.ExceptionList.StackTrace">
            <summary>Gets a string representation of the immediate frames on the call stack.</summary>
            <returns>A string that describes the immediate frames of the call stack.</returns>
            <filterpriority>2</filterpriority>
            <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
            </PermissionSet>
        </member>
        <member name="T:LCore.Tools.Lists`2">
            <summary>
            A class to maintain paired lists of two related objects.
            Useful when you are using two lists in unisen whose 
            lengths must match.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
        </member>
        <member name="P:LCore.Tools.Lists`2.List1">
            <summary>
            Retrieve the contents of List1.
            </summary>
        </member>
        <member name="P:LCore.Tools.Lists`2.List2">
            <summary>
            Retrieve the contents of List2.
            </summary>
        </member>
        <member name="P:LCore.Tools.Lists`2.Count">
            <summary>
            Retrieve the Count of both lists.
            </summary>
        </member>
        <member name="M:LCore.Tools.Lists`2.Add(`0,`1)">
            <summary>
            Adds an object to each list.
            </summary>
        </member>
        <member name="M:LCore.Tools.Lists`2.Set(System.Int32,`0,`1)">
            <summary>
            Sets the values at index for both lists.
            </summary>
        </member>
        <member name="M:LCore.Tools.Lists`2.Set1(System.Int32,`0)">
            <summary>
            Sets the values at index for the first list.
            </summary>
        </member>
        <member name="M:LCore.Tools.Lists`2.Set2(System.Int32,`1)">
            <summary>
            Sets the values at index for the second list.
            </summary>
        </member>
        <member name="M:LCore.Tools.Lists`2.GetAt(System.Int32)">
            <summary>
            Returns the Set of values at the index.
            </summary>
        </member>
        <member name="M:LCore.Tools.Lists`2.RemoveAt(System.Int32)">
            <summary>
            Removes values from both lists at <paramref name="Index" />.
            </summary>
        </member>
        <member name="M:LCore.Tools.Lists`2.#ctor">
            <summary>
            Create a new Lists object.
            </summary>
        </member>
        <member name="M:LCore.Tools.Lists`2.#ctor(System.Collections.Generic.List{`0},System.Collections.Generic.List{`1})">
            <summary>
            Create a new lists object starting with two lists with the same Count.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="List1"/> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="List2"/> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">List counts did not match</exception>
        </member>
        <member name="T:LCore.Tools.Set`2">
            <summary>
            A simple container for two objects of any types.
            </summary>
        </member>
        <member name="M:LCore.Tools.Set`2.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="Obj">The object to compare with the current object. </param>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:LCore.Tools.Set`2.op_Equality(LCore.Tools.Set{`0,`1},LCore.Tools.Set{`0,`1})">
            <summary>
            Returns whether <paramref name="Set1"/> is equal to <paramref name="Set2"/>
            </summary>
        </member>
        <member name="M:LCore.Tools.Set`2.op_Inequality(LCore.Tools.Set{`0,`1},LCore.Tools.Set{`0,`1})">
            <summary>
            Returns whether <paramref name="Set1"/> is not equal to <paramref name="Set2"/>
            </summary>
        </member>
        <member name="M:LCore.Tools.Set`2.op_Implicit(LCore.Tools.Set{`0,`1})~System.Tuple{`0,`1}">
            <summary>
            Implicitally convert a Set to a Tuple
            </summary>
        </member>
        <member name="M:LCore.Tools.Set`2.op_Implicit(System.Tuple{`0,`1})~LCore.Tools.Set{`0,`1}">
            <summary>
            Implicitally convert a Tuple to a Set
            </summary>
        </member>
        <member name="M:LCore.Tools.Set`2.GetHashCode">
            <summary>Serves as a hash function for a particular type. </summary>
            <returns>A hash code for the current object.</returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:LCore.Tools.Set`2.Obj1">
            <summary>
            Object 1
            </summary>
        </member>
        <member name="P:LCore.Tools.Set`2.Obj2">
            <summary>
            Object 3
            </summary>
        </member>
        <member name="M:LCore.Tools.Set`2.#ctor(`0,`1)">
            <summary>
            Construct a set with <typeparamref name="T1" /> and <typeparamref name="T2" />
            </summary>
        </member>
        <member name="M:LCore.Tools.Set`2.Equals(LCore.Tools.Set{`0,`1})">
            <summary>
            Determines if both members of a set match another set of the same type.
            </summary>
        </member>
        <member name="M:LCore.Tools.Set`2.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:LCore.Tools.DateTimeConverter">
            <summary>
            Provides methods for converting <see cref="T:System.DateTime"/> structures to and from the equivalent RFC 3339 string representation.
            </summary>
        </member>
        <member name="F:LCore.Tools.DateTimeConverter._Formats">
            <summary>
            Private member to hold array of formats that RFC 3339 date-time representations conform to.
            </summary>
        </member>
        <member name="F:LCore.Tools.DateTimeConverter.Format">
            <summary>
            Private member to hold the DateTime format string for representing a DateTime in the RFC 3339 format.
            </summary>
        </member>
        <member name="P:LCore.Tools.DateTimeConverter.Rfc3339DateTimeFormat">
            <summary>
            Gets the custom format specifier that may be used to represent a <see cref="T:System.DateTime"/> in the RFC 3339 format.
            </summary>
            <value>A <i>DateTime format string</i> that may be used to represent a <see cref="T:System.DateTime"/> in the RFC 3339 format.</value>
            <remarks>
            <para>
            This method returns a string representation of a <see cref="T:System.DateTime"/> that 
            is precise to the three most significant digits of the seconds fraction; that is, it represents 
            the milliseconds in a date and time value. The <see cref="P:LCore.Tools.DateTimeConverter.Rfc3339DateTimeFormat"/> is a valid 
            date-time format string for use in the <see cref="M:System.DateTime.ToString(System.String,System.IFormatProvider)"/> method.
            </para>
            </remarks>
        </member>
        <member name="P:LCore.Tools.DateTimeConverter.Rfc3339DateTimePatterns">
            <summary>
            Gets an array of the expected formats for RFC 3339 date-time string representations.
            </summary>
            <value>
            An array of the expected formats for RFC 3339 date-time string representations 
            that may used in the <see cref="M:System.DateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)"/> method.
            </value>
        </member>
        <member name="M:LCore.Tools.DateTimeConverter.Parse(System.String)">
            <summary>
            Converts the specified string representation of a date and time to its <see cref="T:System.DateTime"/> equivalent.
            </summary>
            <param name="Str">A string containing a date and time to convert.</param>
            <returns>A <see cref="T:System.DateTime"/> equivalent to the date and time contained in <paramref name="Str"/>.</returns>
            <remarks>
            The string <paramref name="Str"/> is parsed using formatting information in the <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo"/> object.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="Str"/> is a <b>null</b> reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.FormatException"><paramref name="Str"/> does not contain a valid RFC 3339 string representation of a date and time.</exception>
        </member>
        <member name="M:LCore.Tools.DateTimeConverter.ToString(System.DateTime)">
            <summary>
            Converts the value of the specified <see cref="T:System.DateTime"/> object to its equivalent string representation.
            </summary>
            <param name="UtcDateTime">The Coordinated Universal Time (UTC) <see cref="T:System.DateTime"/> to convert.</param>
            <returns>A RFC 3339 string representation of the value of the <paramref name="UtcDateTime"/>.</returns>
            <remarks>
            <para>
            This method returns a string representation of the <paramref name="UtcDateTime"/> that 
            is precise to the three most significant digits of the seconds fraction; that is, it represents 
            the milliseconds in a date and time value.
            </para>
            <para>
            While it is possible to display higher precision fractions of a second component of a time value, 
            that value may not be meaningful. The precision of date and time values depends on the resolution 
            of the system clock. On Windows NT 3.5 and later, and Windows Vista operating systems, the clock's 
            resolution is approximately 10-15 milliseconds.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">The specified <paramref name="UtcDateTime"/> object does not represent a <see cref="F:System.DateTimeKind.Utc">Coordinated Universal Time (UTC)</see> value.</exception>
        </member>
        <member name="M:LCore.Tools.DateTimeConverter.TryParse(System.String,System.DateTime@)">
            <summary>
            Converts the specified string representation of a date and time to its <see cref="T:System.DateTime"/> equivalent.
            </summary>
            <param name="Str">A string containing a date and time to convert.</param>
            <param name="Result">
            When this method returns, contains the <see cref="T:System.DateTime"/> value equivalent to the date and time 
            contained in <paramref name="Str"/>, if the conversion succeeded, 
            or <see cref="F:System.DateTime.MinValue">MinValue</see> if the conversion failed. 
            The conversion fails if the s parameter is a <b>null</b> reference (Nothing in Visual Basic), 
            or does not contain a valid string representation of a date and time. 
            This parameter is passed uninitialized.
            </param>
            <returns><b>true</b> if the <paramref name="Str"/> parameter was converted successfully; otherwise, <b>false</b>.</returns>
            <remarks>
            The string <paramref name="Str"/> is parsed using formatting information in the <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo"/> object.
            </remarks>
        </member>
        <member name="T:LCore.Tools.ProgressUpdater">
            <summary>
            For assisting asynchronous actions or UI threads,
            Progress keeps track of current progress and total size,
            to allow progress for bar updating.
            </summary>
        </member>
        <member name="M:LCore.Tools.ProgressUpdater.#ctor(System.Action{System.String},System.Action{System.String},System.Action{System.Int32},System.Action{System.Int32})">
            <summary>
            Create a new ProgressUpdater
            </summary>
        </member>
        <member name="M:LCore.Tools.ProgressUpdater.Status(System.String)">
            <summary>
            Send a message to any UpdateStatus actions.
            </summary>
        </member>
        <member name="M:LCore.Tools.ProgressUpdater.Log(System.String)">
            <summary>
            Send a message to any UpdateLog actions.
            </summary>
        </member>
        <member name="M:LCore.Tools.ProgressUpdater.Progress(System.Int32)">
            <summary>
            Send a message to any UpdateProgress actions.
            </summary>
        </member>
        <member name="M:LCore.Tools.ProgressUpdater.Maximum(System.Int32)">
            <summary>
            Send a message to any UpdateMaximum actions.
            </summary>
        </member>
        <member name="M:LCore.Tools.ProgressUpdater.Clear">
            <summary>
            Clears current data and resets the ProgressUpdater.
            </summary>
        </member>
        <member name="M:LCore.Tools.Schedule.FromString(System.String)">
            <exception cref="T:System.ArgumentException">ScheduleMode could not be determined.</exception>
        </member>
        <member name="T:LCore.Tools.StatMonitor">
            <summary>
            A simple utility to monitor a series of number and compute the walking average over
            a number of results.
            </summary>
        </member>
        <member name="M:LCore.Tools.StatMonitor.GetCurrentAverageStat">
            <summary>
            Computes the current walking average of the data.
            </summary>
        </member>
        <member name="M:LCore.Tools.StatMonitor.#ctor(System.Int32)">
            <summary>
            Create a new StatMonitor using a particular walking average size.
            <paramref name="WalkingAverageSize" /> must be at least 1.
            </summary>
            <param name="WalkingAverageSize"></param>
            <exception cref="T:System.ArgumentException"><paramref name="WalkingAverageSize" /> was not greater than 0.</exception>
        </member>
        <member name="M:LCore.Tools.StatMonitor.AddStat(System.Double)">
            <summary>
            Add a statistic to the data.
            </summary>
        </member>
        <member name="M:LCore.Tools.StatMonitor.Clear">
            <summary>
            Clears all statistics.
            </summary>
        </member>
        <member name="T:LCore.Tools.StopWatch">
            <summary>
            Simple class to time actions.
            </summary>
        </member>
        <member name="M:LCore.Tools.StopWatch.#ctor">
            <summary>
            Create a new StopWatch.
            </summary>
        </member>
        <member name="M:LCore.Tools.StopWatch.Start">
            <summary>
            Start the StopWatch timer.
            </summary>
        </member>
        <member name="M:LCore.Tools.StopWatch.Stop">
            <summary>
            Stops the timer and returns the duration in milliseconds.
            </summary>
            <returns>The duration in milliseconds</returns>
        </member>
        <member name="T:LCore.Octicon">
            <summary>
            Enum of all Octicons supported by GitHub
            </summary>
        </member>
        <member name="M:LCore.Tasks.Task.RunTask">
            <exception cref="T:System.Threading.ThreadStateException">The thread has already been started. </exception>
            <exception cref="T:System.OutOfMemoryException">There is not enough memory available to start this thread. </exception>
        </member>
        <member name="M:LCore.Tasks.Tasks.AddPriorityTask(LCore.Tasks.Tasks.EmptyHandler,System.String)">
            <exception cref="T:System.Threading.ThreadStateException">The thread has already been started. </exception>
            <exception cref="T:System.OutOfMemoryException">There is not enough memory available to start this thread. </exception>
        </member>
        <member name="M:LCore.Tasks.Tasks.AddTask(LCore.Tasks.Tasks.EmptyHandler,System.String)">
            <exception cref="T:System.Threading.ThreadStateException">The thread has already been started. </exception>
            <exception cref="T:System.OutOfMemoryException">There is not enough memory available to start this thread. </exception>
        </member>
        <member name="M:LCore.Tasks.Tasks.AddTask(System.EventHandler,System.String)">
            <exception cref="T:System.Threading.ThreadStateException">The thread has already been started. </exception>
            <exception cref="T:System.OutOfMemoryException">There is not enough memory available to start this thread. </exception>
        </member>
        <member name="M:LCore.Tasks.Tasks.AddTask(System.EventHandler,System.String,System.Object)">
            <exception cref="T:System.Threading.ThreadStateException">The thread has already been started. </exception>
            <exception cref="T:System.OutOfMemoryException">There is not enough memory available to start this thread. </exception>
        </member>
    </members>
</doc>
