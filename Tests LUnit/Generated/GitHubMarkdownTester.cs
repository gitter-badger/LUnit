// WARNING: this file was autogenerated by LUnit. Remove this line or move this file to prevent this file's contents from being overwritten.
using Xunit.Abstractions;
using LCore.LUnit;
using Xunit;
using System;
using LCore.LUnit.Markdown;
namespace LUnit_Tests.LCore.LUnit.Markdown
{
    /*
    Covering class: LCore.LUnit.Markdown.GitHubMarkdown
    
    LUnit has Autogenerated 29 method stubs:
    */
    public partial class GitHubMarkdownTester : XUnitOutputTester, IDisposable
    {
        public GitHubMarkdownTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Markdown)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.GetMarkdownLines) + "() => List<String>")]
        public void GetMarkdownLines()
        {
            // TODO: Implement method test LCore.LUnit.Markdown.GitHubMarkdown.GetMarkdownLines
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Markdown)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.BlankLine) + "()")]
        public void BlankLine()
        {
            // TODO: Implement method test LCore.LUnit.Markdown.GitHubMarkdown.BlankLine
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Markdown)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.HorizontalRule) + "()")]
        public void HorizontalRule()
        {
            // TODO: Implement method test LCore.LUnit.Markdown.GitHubMarkdown.HorizontalRule
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Markdown)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.Header) + "(String, Int32)")]
        public void Header()
        {
            // TODO: Implement method test LCore.LUnit.Markdown.GitHubMarkdown.Header
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Markdown)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.HeaderUnderline) + "(String, Int32)")]
        public void HeaderUnderline()
        {
            // TODO: Implement method test LCore.LUnit.Markdown.GitHubMarkdown.HeaderUnderline
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Markdown)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.OrderedList) + "(String[])")]
        public void OrderedList()
        {
            // TODO: Implement method test LCore.LUnit.Markdown.GitHubMarkdown.OrderedList
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Markdown)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.OrderedList) + "(Tuple<UInt32, String>[])")]
        public void OrderedList()
        {
            // TODO: Implement method test LCore.LUnit.Markdown.GitHubMarkdown.OrderedList
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Markdown)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.OrderedList) + "(Set<UInt32, String>[])")]
        public void OrderedList()
        {
            // TODO: Implement method test LCore.LUnit.Markdown.GitHubMarkdown.OrderedList
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Markdown)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.UnorderedList) + "(String[])")]
        public void UnorderedList()
        {
            // TODO: Implement method test LCore.LUnit.Markdown.GitHubMarkdown.UnorderedList
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Markdown)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.UnorderedList) + "(Tuple<UInt32, String>[])")]
        public void UnorderedList()
        {
            // TODO: Implement method test LCore.LUnit.Markdown.GitHubMarkdown.UnorderedList
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Markdown)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.UnorderedList) + "(Set<UInt32, String>[])")]
        public void UnorderedList()
        {
            // TODO: Implement method test LCore.LUnit.Markdown.GitHubMarkdown.UnorderedList
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Markdown)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.Code) + "(String[], String)")]
        public void Code()
        {
            // TODO: Implement method test LCore.LUnit.Markdown.GitHubMarkdown.Code
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Markdown)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.Table) + "(String[,], Boolean, Align[])")]
        public void Table()
        {
            // TODO: Implement method test LCore.LUnit.Markdown.GitHubMarkdown.Table
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Markdown)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.Table) + "(IEnumerable<IEnumerable<String>>, Boolean, Align[])")]
        public void Table()
        {
            // TODO: Implement method test LCore.LUnit.Markdown.GitHubMarkdown.Table
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Markdown)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.BlockQuote) + "(String[])")]
        public void BlockQuote()
        {
            // TODO: Implement method test LCore.LUnit.Markdown.GitHubMarkdown.BlockQuote
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Markdown)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.Lines) + "(String[])")]
        public void Lines()
        {
            // TODO: Implement method test LCore.LUnit.Markdown.GitHubMarkdown.Lines
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Markdown)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.Line) + "(String)")]
        public void Line()
        {
            // TODO: Implement method test LCore.LUnit.Markdown.GitHubMarkdown.Line
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Markdown)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.Strikethrough) + "(String) => String")]
        public void Strikethrough()
        {
            // TODO: Implement method test LCore.LUnit.Markdown.GitHubMarkdown.Strikethrough
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Markdown)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.Highlight) + "(String) => String")]
        public void Highlight()
        {
            // TODO: Implement method test LCore.LUnit.Markdown.GitHubMarkdown.Highlight
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Markdown)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.Link) + "(String, String, String) => String")]
        public void Link()
        {
            // TODO: Implement method test LCore.LUnit.Markdown.GitHubMarkdown.Link
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Markdown)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.Image) + "(String, String, Nullable<Align>) => String")]
        public void Image()
        {
            // TODO: Implement method test LCore.LUnit.Markdown.GitHubMarkdown.Image
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Markdown)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.InlineCode) + "(String) => String")]
        public void InlineCode()
        {
            // TODO: Implement method test LCore.LUnit.Markdown.GitHubMarkdown.InlineCode
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Markdown)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.Italic) + "(String) => String")]
        public void Italic()
        {
            // TODO: Implement method test LCore.LUnit.Markdown.GitHubMarkdown.Italic
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Markdown)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.Bold) + "(String) => String")]
        public void Bold()
        {
            // TODO: Implement method test LCore.LUnit.Markdown.GitHubMarkdown.Bold
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Markdown)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.Glyph) + "(GlyphIcon) => String")]
        public void Glyph()
        {
            // TODO: Implement method test LCore.LUnit.Markdown.GitHubMarkdown.Glyph
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Markdown)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.Badge) + "(String, String, String) => String")]
        public void Badge()
        {
            // TODO: Implement method test LCore.LUnit.Markdown.GitHubMarkdown.Badge
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Markdown)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.Badge) + "(String, String, BadgeColor) => String")]
        public void Badge()
        {
            // TODO: Implement method test LCore.LUnit.Markdown.GitHubMarkdown.Badge
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Markdown)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.GetRelativePath) + "(String) => String")]
        public void GetRelativePath()
        {
            // TODO: Implement method test LCore.LUnit.Markdown.GitHubMarkdown.GetRelativePath
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Markdown)+ "." + nameof(GitHubMarkdown)+ "." + nameof(GitHubMarkdown.Gravatar) + "(String, Int32) => String")]
        public void Gravatar()
        {
            // TODO: Implement method test LCore.LUnit.Markdown.GitHubMarkdown.Gravatar
        }

    }
}
