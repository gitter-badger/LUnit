// WARNING: this file was autogenerated by LUnit. Remove this line or move this file to prevent this file's contents from being overwritten.
using Xunit.Abstractions;
using LCore.LUnit;
using Xunit;
using System;
using LCore.LUnit.Assert;
namespace LUnit_Tests.LCore.LUnit.Assert
{
    /*
    Covering class: LCore.LUnit.Assert.AssertionExt
    
    LUnit has Autogenerated 45 method stubs:
    */
    public partial class AssertionExtTester
    {
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertSucceedes) + "(MethodInfo, Object, Object[])")]
        public void AssertSucceedes()
        {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSucceedes
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertSucceedes) + "(MethodInfo, Object, Object[], Func<Boolean>[])")]
        public void AssertSucceedes()
        {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSucceedes
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertSucceedes) + "(MethodInfo, Object, Object[], Func<Object, Boolean>[])")]
        public void AssertSucceedes()
        {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSucceedes
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertSucceedes) + "(MethodInfo, Object, Object[], Func<U, Boolean>[])")]
        public void AssertSucceedes()
        {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSucceedes
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertSucceedes) + "(Action)")]
        public void AssertSucceedes()
        {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSucceedes
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertSucceedes) + "(Action<T1>, T1)")]
        public void AssertSucceedes()
        {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSucceedes
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertSucceedes) + "(Action<T1, T2>, T1, T2)")]
        public void AssertSucceedes()
        {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSucceedes
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertSucceedes) + "(Action<T1, T2, T3>, T1, T2, T3)")]
        public void AssertSucceedes()
        {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSucceedes
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertSucceedes) + "(Action<T1, T2, T3, T4>, T1, T2, T3, T4)")]
        public void AssertSucceedes()
        {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSucceedes
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertSucceedes) + "(Func<U>)")]
        public void AssertSucceedes()
        {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSucceedes
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertSucceedes) + "(Func<T1, U>, T1)")]
        public void AssertSucceedes()
        {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSucceedes
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertSucceedes) + "(Func<T1, T2, U>, T1, T2)")]
        public void AssertSucceedes()
        {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSucceedes
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertSucceedes) + "(Func<T1, T2, T3, U>, T1, T2, T3)")]
        public void AssertSucceedes()
        {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSucceedes
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertSucceedes) + "(Func<T1, T2, T3, T4, U>, T1, T2, T3, T4)")]
        public void AssertSucceedes()
        {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSucceedes
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertFails) + "(MethodInfo, Object[], Object, Func<Boolean>[])")]
        public void AssertFails()
        {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertFails
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertFails) + "(MethodInfo, Object[], Object, Type, Func<Boolean>[])")]
        public void AssertFails()
        {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertFails
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertFails) + "(Action)")]
        public void AssertFails()
        {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertFails
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertFails) + "(Action<T1>, T1)")]
        public void AssertFails()
        {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertFails
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertFails) + "(Action<T1, T2>, T1, T2)")]
        public void AssertFails()
        {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertFails
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertFails) + "(Action<T1, T2, T3>, T1, T2, T3)")]
        public void AssertFails()
        {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertFails
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertFails) + "(Action<T1, T2, T3, T4>, T1, T2, T3, T4)")]
        public void AssertFails()
        {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertFails
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertFails) + "(Action)")]
        public void AssertFails()
        {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertFails
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertFails) + "(Action<T1>, T1)")]
        public void AssertFails()
        {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertFails
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertFails) + "(Action<T1, T2>, T1, T2)")]
        public void AssertFails()
        {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertFails
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertFails) + "(Action<T1, T2, T3>, T1, T2, T3)")]
        public void AssertFails()
        {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertFails
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertFails) + "(Action<T1, T2, T3, T4>, T1, T2, T3, T4)")]
        public void AssertFails()
        {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertFails
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertFails) + "(Func<U>)")]
        public void AssertFails()
        {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertFails
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertFails) + "(Func<T1, U>, T1)")]
        public void AssertFails()
        {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertFails
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertFails) + "(Func<T1, T2, U>, T1, T2)")]
        public void AssertFails()
        {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertFails
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertFails) + "(Func<T1, T2, T3, U>, T1, T2, T3)")]
        public void AssertFails()
        {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertFails
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertFails) + "(Func<T1, T2, T3, T4, U>, T1, T2, T3, T4)")]
        public void AssertFails()
        {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertFails
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertFails) + "(Func<U>)")]
        public void AssertFails()
        {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertFails
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertFails) + "(Func<T1, U>, T1)")]
        public void AssertFails()
        {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertFails
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertFails) + "(Func<T1, T2, U>, T1, T2)")]
        public void AssertFails()
        {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertFails
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertFails) + "(Func<T1, T2, T3, U>, T1, T2, T3)")]
        public void AssertFails()
        {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertFails
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertFails) + "(Func<T1, T2, T3, T4, U>, T1, T2, T3, T4)")]
        public void AssertFails()
        {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertFails
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertResult) + "(MethodInfo, Object, Object[], Object, Func<Object, Boolean>[])")]
        public void AssertResult()
        {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertResult
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertResult) + "(MethodInfo, Object, Object[], U, Func<Object, Boolean>[])")]
        public void AssertResult()
        {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertResult
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertResult) + "(Func<U>, U)")]
        public void AssertResult()
        {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertResult
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertResult) + "(Func<T1, U>, T1, U)")]
        public void AssertResult()
        {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertResult
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertResult) + "(Func<T1, T2, U>, T1, T2, U)")]
        public void AssertResult()
        {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertResult
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertResult) + "(Func<T1, T2, T3, U>, T1, T2, T3, U)")]
        public void AssertResult()
        {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertResult
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertResult) + "(Func<T1, T2, T3, T4, U>, T1, T2, T3, T4, U)")]
        public void AssertResult()
        {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertResult
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertSource) + "(MethodInfo, Object, Object[], Object, Func<Object, Boolean>[])")]
        public void AssertSource()
        {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSource
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Assert)+ "." + nameof(AssertionExt)+ "." + nameof(AssertionExt.AssertSource) + "(MethodInfo, Object, Object[], U, Func<Object, Boolean>[])")]
        public void AssertSource()
        {
            // TODO: Implement method test LCore.LUnit.Assert.AssertionExt.AssertSource
        }

    }
}
