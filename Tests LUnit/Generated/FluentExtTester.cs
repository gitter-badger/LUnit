// WARNING: this file was autogenerated by LUnit. Remove this line or move this file to prevent this file's contents from being overwritten.
using Xunit.Abstractions;
using LCore.LUnit;
using Xunit;
using System;
using LCore.LUnit.Fluent;
namespace LUnit_Tests.LCore.LUnit.Fluent
{
    /*
    Covering class: LCore.LUnit.Fluent.FluentExt
    
    LUnit has Autogenerated 54 method stubs:
    */
    public partial class FluentExtTester
    {
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldSucceed) + "(MethodInfo, Object, Object[])")]
        public void ShouldSucceed()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldSucceed
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldSucceed) + "(MethodInfo, Object, Object[], Func<Boolean>[])")]
        public void ShouldSucceed()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldSucceed
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldSucceed) + "(MethodInfo, Object, Object[], Func<Object, Boolean>[])")]
        public void ShouldSucceed()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldSucceed
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldSucceed) + "(MethodInfo, Object, Object[], Func<U, Boolean>[])")]
        public void ShouldSucceed()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldSucceed
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldSucceed) + "(Action)")]
        public void ShouldSucceed()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldSucceed
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldSucceed) + "(Action<T1>, T1)")]
        public void ShouldSucceed()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldSucceed
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldSucceed) + "(Action<T1, T2>, T1, T2)")]
        public void ShouldSucceed()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldSucceed
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldSucceed) + "(Action<T1, T2, T3>, T1, T2, T3)")]
        public void ShouldSucceed()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldSucceed
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldSucceed) + "(Action<T1, T2, T3, T4>, T1, T2, T3, T4)")]
        public void ShouldSucceed()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldSucceed
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldSucceed) + "(Func<U>)")]
        public void ShouldSucceed()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldSucceed
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldSucceed) + "(Func<T1, U>, T1)")]
        public void ShouldSucceed()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldSucceed
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldSucceed) + "(Func<T1, T2, U>, T1, T2)")]
        public void ShouldSucceed()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldSucceed
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldSucceed) + "(Func<T1, T2, T3, U>, T1, T2, T3)")]
        public void ShouldSucceed()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldSucceed
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldSucceed) + "(Func<T1, T2, T3, T4, U>, T1, T2, T3, T4)")]
        public void ShouldSucceed()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldSucceed
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldFail) + "(MethodInfo, Object[], Object, Func<Boolean>[])")]
        public void ShouldFail()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldFail
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldFail) + "(MethodInfo, Object[], Object, Type, Func<Boolean>[])")]
        public void ShouldFail()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldFail
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldFail) + "(Action)")]
        public void ShouldFail()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldFail
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldFail) + "(Action<T1>, T1)")]
        public void ShouldFail()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldFail
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldFail) + "(Action<T1, T2>, T1, T2)")]
        public void ShouldFail()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldFail
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldFail) + "(Action<T1, T2, T3>, T1, T2, T3)")]
        public void ShouldFail()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldFail
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldFail) + "(Action<T1, T2, T3, T4>, T1, T2, T3, T4)")]
        public void ShouldFail()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldFail
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldFail) + "(Action)")]
        public void ShouldFail()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldFail
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldFail) + "(Action<T1>, T1)")]
        public void ShouldFail()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldFail
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldFail) + "(Action<T1, T2>, T1, T2)")]
        public void ShouldFail()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldFail
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldFail) + "(Action<T1, T2, T3>, T1, T2, T3)")]
        public void ShouldFail()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldFail
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldFail) + "(Action<T1, T2, T3, T4>, T1, T2, T3, T4)")]
        public void ShouldFail()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldFail
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldFail) + "(Func<U>)")]
        public void ShouldFail()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldFail
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldFail) + "(Func<T1, U>, T1)")]
        public void ShouldFail()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldFail
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldFail) + "(Func<T1, T2, U>, T1, T2)")]
        public void ShouldFail()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldFail
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldFail) + "(Func<T1, T2, T3, U>, T1, T2, T3)")]
        public void ShouldFail()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldFail
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldFail) + "(Func<T1, T2, T3, T4, U>, T1, T2, T3, T4)")]
        public void ShouldFail()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldFail
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldFail) + "(Func<U>)")]
        public void ShouldFail()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldFail
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldFail) + "(Func<T1, U>, T1)")]
        public void ShouldFail()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldFail
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldFail) + "(Func<T1, T2, U>, T1, T2)")]
        public void ShouldFail()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldFail
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldFail) + "(Func<T1, T2, T3, U>, T1, T2, T3)")]
        public void ShouldFail()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldFail
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldFail) + "(Func<T1, T2, T3, T4, U>, T1, T2, T3, T4)")]
        public void ShouldFail()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldFail
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldBe) + "(MethodInfo, Object, Object[], Object, Func<Object, Boolean>[])")]
        public void ShouldBe()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldBe
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldBe) + "(MethodInfo, Object, Object[], U, Func<Object, Boolean>[])")]
        public void ShouldBe()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldBe
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldBe) + "(Func<U>, U)")]
        public void ShouldBe()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldBe
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldBe) + "(Func<T1, U>, T1, U)")]
        public void ShouldBe()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldBe
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldBe) + "(Func<T1, T2, U>, T1, T2, U)")]
        public void ShouldBe()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldBe
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldBe) + "(Func<T1, T2, T3, U>, T1, T2, T3, U)")]
        public void ShouldBe()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldBe
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldBe) + "(Func<T1, T2, T3, T4, U>, T1, T2, T3, T4, U)")]
        public void ShouldBe()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldBe
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.HaveAttribute) + "(TypeAssertions, String, Object[]) => AndConstraint<TypeAssertions>")]
        public void HaveAttribute()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.HaveAttribute
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.HaveAttribute) + "(TypeAssertions, Boolean, String, Object[]) => AndConstraint<TypeAssertions>")]
        public void HaveAttribute()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.HaveAttribute
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.NotHaveAttribute) + "(TypeAssertions, String, Object[]) => AndConstraint<TypeAssertions>")]
        public void NotHaveAttribute()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.NotHaveAttribute
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.NotHaveAttribute) + "(TypeAssertions, Boolean, String, Object[]) => AndConstraint<TypeAssertions>")]
        public void NotHaveAttribute()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.NotHaveAttribute
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldBe) + "(T, T, String, Object[]) => AndConstraint<ObjectAssertions>")]
        public void ShouldBe()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldBe
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldBeTrue) + "(Boolean, String, Object[]) => AndConstraint<BooleanAssertions>")]
        public void ShouldBeTrue()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldBeTrue
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldBeFalse) + "(Boolean, String, Object[]) => AndConstraint<BooleanAssertions>")]
        public void ShouldBeFalse()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldBeFalse
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldBeNull) + "(T, String, Object[]) => AndConstraint<ObjectAssertions>")]
        public void ShouldBeNull()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldBeNull
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldBeNull) + "(Nullable<T>, String, Object[]) => AndConstraint<ObjectAssertions>")]
        public void ShouldBeNull()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldBeNull
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldNotBeNull) + "(T, String, Object[]) => AndConstraint<ObjectAssertions>")]
        public void ShouldNotBeNull()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldNotBeNull
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LUnit)+ "." + nameof(global::LCore.LUnit.Fluent)+ "." + nameof(FluentExt)+ "." + nameof(FluentExt.ShouldNotBeNull) + "(Nullable<T>, String, Object[]) => AndConstraint<ObjectAssertions>")]
        public void ShouldNotBeNull()
        {
            // TODO: Implement method test LCore.LUnit.Fluent.FluentExt.ShouldNotBeNull
        }

    }
}
